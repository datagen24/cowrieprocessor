"""Tests for the Cowrie malware enrichment helper script."""

from __future__ import annotations

import json
import runpy
import sys
from pathlib import Path
from types import SimpleNamespace

import pytest


class DummySession:
    """Stubbed requests session that captures outgoing VT calls."""

    def __init__(self, response_payload: dict | None = None) -> None:
        """Initialise the dummy session with an optional response payload."""
        self.headers: dict[str, str] = {}
        self._response_payload = response_payload or {
            "data": {
                "attributes": {
                    "last_analysis_stats": {"malicious": 5, "harmless": 10},
                    "last_analysis_date": 1_723_000_000,
                    "trid": [{"file_type": "ELF binary"}],
                    "type_tag": "trojan",
                    "type_description": "Downloader",
                    "meaningful_name": "malware.bin",
                    "popular_threat_classification": {"suggested_threat_label": "Agent.X"},
                }
            }
        }
        self.called_urls: list[str] = []

    def get(self, url: str) -> SimpleNamespace:
        """Record a GET call and emit the canned payload."""
        self.called_urls.append(url)
        return SimpleNamespace(text=json.dumps(self._response_payload))

    def close(self) -> None:
        """Provide a close method compatible with requests.Session."""
        return None


@pytest.fixture
def script_path() -> Path:
    """Return the repository-local path to the enrichment script."""
    return Path(__file__).resolve().parents[2] / "cowrie_malware_enrichment.py"


@pytest.mark.skip(reason="Legacy script cowrie_malware_enrichment.py has been refactored into ORM-based system")
def test_vt_lookup_appends_results(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, script_path: Path) -> None:
    """Execute the enrichment script end-to-end with a stub VT response."""
    log_path = tmp_path / "cowrie.json"
    log_path.write_text(
        json.dumps(
            {
                "eventid": "cowrie.session.file_download",
                "timestamp": "2024-09-28T12:00:07.000000Z",
                "session": "abc123",
                "shasum": "feedface",
            }
        )
        + "\n",
        encoding="utf-8",
    )

    dummy_session = DummySession()

    import requests

    monkeypatch.setattr(requests, "session", lambda: dummy_session)
    monkeypatch.chdir(tmp_path)
    monkeypatch.setattr(sys, "argv", [str(script_path), "--filepath", str(log_path), "--vtapi", "dummy-key"])

    runpy.run_path(str(script_path), run_name="__main__")

    vt_data_path = tmp_path / "vt_data"
    assert vt_data_path.exists()
    vt_lines = [json.loads(line) for line in vt_data_path.read_text(encoding="utf-8").splitlines()]

    assert vt_lines[0]["hash"] == "feedface"
    assert vt_lines[0]["malicious"] == 5
    assert vt_lines[0]["filetype"] == "ELF binary"
    assert dummy_session.called_urls == ["https://www.virustotal.com/api/v3/files/feedface"]


@pytest.mark.skip(reason="Legacy script cowrie_malware_enrichment.py has been refactored into ORM-based system")
def test_timespan_filters_old_events(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, script_path: Path) -> None:
    """Ensure the script skips VT lookups when events are older than the window."""
    log_path = tmp_path / "cowrie.json"
    log_path.write_text(
        json.dumps(
            {
                "eventid": "cowrie.session.file_download",
                "timestamp": "2000-01-01T00:00:00.000000Z",
                "session": "ancient",
                "shasum": "deadbeef",
            }
        )
        + "\n",
        encoding="utf-8",
    )

    dummy_session = DummySession()

    import requests

    monkeypatch.setattr(requests, "session", lambda: dummy_session)
    monkeypatch.chdir(tmp_path)
    monkeypatch.setattr(
        sys,
        "argv",
        [
            str(script_path),
            "--filepath",
            str(log_path),
            "--vtapi",
            "dummy-key",
            "--timespan",
            "60",
        ],
    )

    runpy.run_path(str(script_path), run_name="__main__")

    assert not dummy_session.called_urls
    assert not (tmp_path / "vt_data").exists()
