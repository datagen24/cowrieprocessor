[project]
name = "cowrieprocessor"
version = "0.1.0"
description = "Process Cowrie honeypot logs with enrichments (VT, DShield, URLHaus, SPUR, Dropbox)."
readme = "README.md"
requires-python = ">=3.9"
license = "BSD-4-Clause"
keywords = ["cowrie", "honeypot", "security", "virustotal", "dshield", "urlhaus", "spur", "dropbox"]
dependencies = [
  "requests>=2.31.0",
  "dropbox>=11.36.2",
  "ipaddress>=1.0.23",
  "pathlib>=1.0.1",
  "python-dateutil>=2.8.2",
  "sqlalchemy>=2.0.36",
  "tomli>=2.0.1; python_version < '3.11'",
  "types-python-dateutil>=2.9.0.20250822",
  "pip>=25.2",
  "tqdm>=4.67.1",
  "psutil>=7.1.0",
  "scikit-learn>=1.3.0",
  "pandas>=2.0.0",
  "numpy>=1.24.0",
  "vt-py>=0.21.0",
]

[project.optional-dependencies]
postgres = [
    "psycopg[binary]>=3.1",
    "psycopg-pool>=3.1",
]

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[tool.uv]
# Using uv to manage a virtual environment and resolve dependencies from this pyproject.

[dependency-groups]
dev = [
  "ruff==0.12.11",
  "mypy==1.14.1",
  "types-requests==2.32.0.20240914",
  "pre-commit==3.8.0",
  "pytest==8.3.3",
  "pytest-cov==5.0.0",
  "sphinx==7.4.7",
]
docs = [
  "sphinx>=7.4.0",
  "sphinx-rtd-theme>=2.0.0",
  "sphinx-autodoc-typehints>=2.0.0",
  "myst-parser>=3.0.0",
  "linkify-it-py>=2.0.0",
]

[tool.ruff]
# Keep close to existing style; avoid massive churn.
line-length = 120
target-version = "py313"
exclude = [
    "archive/",
    "scripts/debug/",
    "scripts/migrations/archive/",
    "docs/archive/",
    "notes/archive/",
    "fix_mypy_errors.py",
]

[tool.ruff.lint]
select = ["E", "F", "D", "I"]
ignore = []

[tool.ruff.lint.pydocstyle]
convention = "google" # Enforce Google-style docstrings

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_return_any = true
warn_unreachable = true
explicit_package_bases = true
strict_optional = true
exclude = [
    "^archive/",
    "^scripts/debug/",
    "^scripts/migrations/archive/",
    "^docs/archive/",
    "^notes/archive/",
    "fix_mypy_errors\\.py$",
]

[[tool.mypy.overrides]]
module = ["dateutil.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
# Allow missing type annotations in tests
disallow_untyped_defs = false
disallow_incomplete_defs = false
# But still catch real type errors
check_untyped_defs = true
# Don't warn about unused ignores (common in tests)
warn_unused_ignores = false

[tool.coverage.run]
source = ["cowrieprocessor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "archive/*",
    "scripts/debug/*",
    "scripts/migrations/archive/*",
    "docs/archive/*",
    "notes/archive/*",
    "fix_mypy_errors.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.setuptools]
packages = [
  "cowrieprocessor",
]
py-modules = [
  "process_cowrie",
  "cowrie_malware_enrichment",
  "submit_vtfiles",
  "secrets_resolver",
]

[project.scripts]
cowrie-loader = "cowrieprocessor.cli.ingest:main"
cowrie-report = "cowrieprocessor.cli.report:main"
cowrie-health = "cowrieprocessor.cli.health:main"
cowrie-db = "cowrieprocessor.cli.cowrie_db:main"
cowrie-analyze = "cowrieprocessor.cli.analyze:main"
cowrie-enrich = "cowrieprocessor.cli.enrich_passwords:main"
cowrie-enrich-ssh-keys = "cowrieprocessor.cli.enrich_ssh_keys:main"
